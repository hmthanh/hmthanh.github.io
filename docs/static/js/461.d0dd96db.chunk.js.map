{"version":3,"file":"static/js/461.d0dd96db.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/elements/Ellipse.ts","../node_modules/src/.internal/core/elements/Image.ts","../node_modules/src/.internal/core/elements/Slice.ts","../node_modules/src/.internal/core/elements/Preloader.ts","../node_modules/src/.internal/core/elements/CloseButton.ts","../node_modules/src/.internal/core/elements/SwitchButton.ts","../node_modules/src/.internal/core/elements/Slider.ts","../node_modules/src/.internal/core/elements/TextLink.ts","../node_modules/src/.internal/core/elements/Trapezoid.ts","../node_modules/src/.internal/core/elements/WavedCircle.ts","../node_modules/src/.internal/core/elements/ZoomOutButton.ts","../node_modules/src/.internal/core/elements/PlayButton.ts","../node_modules/src/.internal/core/rendering/fills/ColorModifier.ts","../node_modules/src/.internal/core/rendering/fills/GradientModifier.ts","../node_modules/src/.internal/core/rendering/fills/LinearGradientModifier.ts","../node_modules/src/.internal/core/elements/3d/Cone.ts","../node_modules/src/.internal/core/rendering/filters/LightenFilter.ts","../node_modules/src/.internal/core/elements/3d/Rectangle3D.ts","../node_modules/src/.internal/core/elements/3d/Slice3D.ts","../node_modules/src/.internal/core/rendering/fills/RadialGradientModifier.ts","../node_modules/src/.internal/core/rendering/fills/LinePattern.ts","../node_modules/src/.internal/core/rendering/fills/CirclePattern.ts","../node_modules/src/.internal/core/rendering/fills/RectPattern.ts","../node_modules/src/.internal/core/rendering/filters/ColorizeFilter.ts","../node_modules/src/.internal/core/rendering/filters/DesaturateFilter.ts","../node_modules/src/.internal/core/rendering/filters/BlurFilter.ts","../node_modules/src/.internal/core/rendering/filters/FocusFilter.ts","../node_modules/src/.internal/core/utils/PatternSet.ts","../node_modules/src/.internal/core/utils/Plugin.ts","../node_modules/src/.internal/core/elements/AmChartsLogo.ts","../node_modules/src/.internal/core/utils/Instance.ts"],"sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Ellipse]].\r\n */\r\nexport interface IEllipseProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Ellipse]].\r\n */\r\nexport interface IEllipseEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IEllipseAdapters extends ICircleAdapters, IEllipseProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nexport class Ellipse extends Circle {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IEllipseProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IEllipseAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IEllipseEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Ellipse\";\r\n\r\n\t\tthis.element = this.paper.add(\"ellipse\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the ellipsis.\r\n\t */\r\n\tprotected draw() {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"rx\": this.radius });\r\n\t\tthis.element.attr({ \"ry\": this.radiusY });\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t *\r\n\t * @param value  Vertical radius\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.height = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\treturn this.innerHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal radius.\r\n\t *\r\n\t * @param value  Horizontal radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.width = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.innerWidth / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n","/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Image]].\r\n */\r\nexport interface IImageProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A URI of the image.\r\n\t */\r\n\thref?: string;\r\n\r\n\t/**\r\n\t * Sets image `width` in relation to its `height`.\r\n\t */\r\n\twidthRatio?: number;\r\n\r\n\t/**\r\n\t * Sets image `height` in relation to its `width`.\r\n\t */\r\n\theightRatio?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Image]].\r\n */\r\nexport interface IImageEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Image]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IImageAdapters extends ISpriteAdapters, IImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nexport class Image extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IImageEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Image\";\r\n\t\tthis.element = this.paper.add(\"image\");\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.width = 50;\r\n\t\tthis.height = 50;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.href) {\r\n\r\n\t\t\tlet width = this.innerWidth;\r\n\t\t\tlet height = this.innerHeight;\r\n\r\n\t\t\tif ($type.isNumber(this.widthRatio)) {\r\n\t\t\t\twidth = height * this.widthRatio;\r\n\t\t\t\tthis.width = width;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this.heightRatio)) {\r\n\t\t\t\theight = width * this.heightRatio;\r\n\t\t\t\tthis.height = height;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.element.attr({\r\n\t\t\t\t\"width\": width,\r\n\t\t\t\t\"height\": height\r\n\t\t\t});\r\n\t\t\tthis.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An image URI.\r\n\t *\r\n\t * @param value  Image URI\r\n\t */\r\n\tpublic set href(value: string) {\r\n\t\tthis.setPropertyValue(\"href\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image URI\r\n\t */\r\n\tpublic get href(): string {\r\n\t\treturn this.getPropertyValue(\"href\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `width` relatively to its `height`.\r\n\t *\r\n\t * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set widthRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"widthRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get widthRatio(): number {\r\n\t\treturn this.getPropertyValue(\"widthRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `height` relatively to its `width`.\r\n\t *\r\n\t * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set heightRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"heightRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get heightRatio(): number {\r\n\t\treturn this.getPropertyValue(\"heightRatio\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\treturn {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.pixelWidth,\r\n\t\t\theight: this.pixelHeight\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n","/**\r\n * Slice module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slice]].\r\n */\r\nexport interface ISliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices, in px or %\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n\r\n\t/**\r\n\t * [shiftRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tshiftRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tinnerCornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice]].\r\n */\r\nexport interface ISliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliceAdapters extends IContainerAdapters, ISliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nexport class Slice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t *\r\n\t * Slice itself is a [[Container]] so that [[Slice3D]] could extend it and\r\n\t * add 3D elements to it.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"cornerRadius\", 0);\r\n\t\tthis.setPropertyValue(\"startAngle\", 0);\r\n\t\tthis.setPercentProperty(\"innerRadius\", 0);\r\n\t\tthis.setPercentProperty(\"radius\", 0);\r\n\t\tthis.setPropertyValue(\"arc\", 0);\r\n\t\tthis.setPropertyValue(\"shiftRadius\", 0);\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"layout\", \"none\");\r\n\r\n\t\t// Create a slice wedge element\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis._disposers.push(this.slice);\r\n\r\n\t\t//this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n\t\t//this.element.attr({ \"stroke-linecap\": \"round\" });\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet radiusY = this.radiusY;\r\n\t\tif(this.radius > 0 && radiusY == 0){\r\n\t\t\tradiusY = 0.01;\r\n\t\t}\r\n\t\tthis.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n\t\tthis.slice.invalidate();\r\n\t\tthis.shiftRadius = this.shiftRadius;\r\n\r\n\t\tif (this.realFill instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realFill);\r\n\t\t}\r\n\t\tif (this.realStroke instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realStroke);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateGradient(gradient: RadialGradient) {\r\n\t\tgradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n\t\tgradient.element.attr({ \"r\": this.radius });\r\n\t\tgradient.cx = 0;\r\n\t\tgradient.cy = 0;\r\n\t\tgradient.element.attr({ radius: this.radius });\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\tlet innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n\t\t\tlet outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n\t\t\treturn $math.getCommonRectangle([innerRect, outerRect]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t *\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\tlet radius: number = this.getPropertyValue(\"radius\");\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\t\treturn radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet value: number = this.getPropertyValue(\"radiusY\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radius;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px or %)\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or %)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius px\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set innerCornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerCornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get innerCornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerCornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how far (relatively to center) a slice should be moved.\r\n\t *\r\n\t * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n\t * 1 - slice shifted outside by whole of its radius.\r\n\t *\r\n\t * @param  value  Radius shift\r\n\t */\r\n\tpublic set shiftRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"shiftRadius\", value);\r\n\r\n\t\tvalue = this.getPropertyValue(\"shiftRadius\");\r\n\r\n\t\tthis.dx = value * this.radius * this.ix;\r\n\t\tthis.dy = value * this.radiusY * this.iy;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius shift\r\n\t */\r\n\tpublic get shiftRadius(): number {\r\n\t\treturn this.getPropertyValue(\"shiftRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [ix description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get ix(): number {\r\n\t\treturn $math.cos(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * [iy description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get iy(): number {\r\n\t\treturn $math.sin(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of the slice's middle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle\r\n\t */\r\n\tpublic get middleAngle(): number {\r\n\t\treturn this.startAngle + this.arc / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n","/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Preloader]].\r\n */\r\nexport interface IPreloaderProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t */\r\n\tprogress?: number;\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tdelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Preloader]].\r\n */\r\nexport interface IPreloaderEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Preloader]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPreloaderAdapters extends IContainerAdapters, IPreloaderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nexport class Preloader extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPreloaderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPreloaderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPreloaderEvents;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that indicates load progress.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic progressSlice: Slice;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that shows the full ring. (background for the\r\n\t * `progressSlice`)\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic backgroundSlice: Slice;\r\n\r\n\t/**\r\n\t * Label that displays progress in percent.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Logs the timestamp of when the loader was initiated. It will be used to\r\n\t * delay showing of the Preloader so for quick operations it does not even\r\n\t * appear on screen.\r\n\t */\r\n\tprotected _started: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Preloader\";\r\n\r\n\t\t// Set dimensions\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create main container\r\n\t\tlet sliceContainer: Container = this.createChild(Container);\r\n\t\tsliceContainer.shouldClone = false;\r\n\r\n\t\t// Add background (100%) slice\r\n\t\tlet backgroundSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tbackgroundSlice.shouldClone = false;\r\n\t\tbackgroundSlice.radius = 53;\r\n\t\tbackgroundSlice.arc = 360;\r\n\t\tbackgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackgroundSlice.fillOpacity = 0.8;\r\n\t\tbackgroundSlice.innerRadius = 42;\r\n\t\tbackgroundSlice.isMeasured = false;\r\n\t\tthis.backgroundSlice = backgroundSlice;\r\n\r\n\t\t// Add progress slice\r\n\t\tlet progressSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tprogressSlice.shouldClone = false;\r\n\t\tprogressSlice.radius = 50;\r\n\t\tprogressSlice.innerRadius = 45;\r\n\t\tprogressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tprogressSlice.fillOpacity = 0.2;\r\n\t\tprogressSlice.isMeasured = false;\r\n\t\tthis.progressSlice = progressSlice;\r\n\r\n\t\t// Add text label element\r\n\t\tlet label: Label = sliceContainer.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.fill = interfaceColors.getFor(\"text\");\r\n\t\tlabel.align = \"center\";\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.textAlign = \"middle\";\r\n\t\tlabel.fillOpacity = 0.4;\r\n\t\tthis.label = label;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.background.opacity = 1;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.delay = 300;\r\n\r\n\t\t// Create hidden state\r\n\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\thiddenState.properties.opacity = 0;\r\n\r\n\t\t// Hide by default\r\n\t\tthis.visible = false;\r\n\t\tthis.hide(0);\r\n\t\tthis.__disabled = true;\r\n\r\n\t\t// Make it disposable\r\n\t\t// @todo Maybe it's enough to just dispose `sliceContainer`?\r\n\t\tthis._disposers.push(this.backgroundSlice);\r\n\t\tthis._disposers.push(this.progressSlice);\r\n\t\tthis._disposers.push(this.label);\r\n\t\tthis._disposers.push(sliceContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t *\r\n\t * Setting this to a value less than 1, will automatically reveal the\r\n\t * preloader, while setting it to 1 (100%) will hide it.\r\n\t *\r\n\t * @param value Progress (0-1)\r\n\t */\r\n\tpublic set progress(value: number) {\r\n\t\tthis.__disabled = false;\r\n\r\n\t\tthis.validateLayout(); // show not in center without this\r\n\r\n\t\tthis.setPropertyValue(\"progress\", value);\r\n\r\n\t\t/*if (!this.visible && value == 1) {\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\tthis.progressSlice.arc = 360 * value;\r\n\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.text = Math.round(value * 100) + \"%\";\r\n\t\t}\r\n\r\n\t\tif (value >= 1) {\r\n\r\n\t\t\t// Cancel the timeout\r\n\t\t\tif (this._started) {\r\n\t\t\t\tthis._started = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO remove closure ?\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tlet animation = this.hide();\r\n\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.interactionsEnabled = false;\r\n\t\t\tthis.setPropertyValue(\"progress\", 0);\r\n\t\t}\r\n\t\telse if (value > 0) {\r\n\t\t\tif (this.delay) {\r\n\t\t\t\tif (!this._started) {\r\n\t\t\t\t\tthis._started = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse if ((this._started + this.delay) <= new Date().getTime()) {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t\tthis.show();\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get progress(): number {\r\n\t\treturn this.getPropertyValue(\"progress\");\r\n\t}\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t * @param value  Delay (ms)\r\n\t */\r\n\tpublic set delay(value: number) {\r\n\t\tthis.setPropertyValue(\"delay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay (ms)\r\n\t */\r\n\tpublic get delay(): number {\r\n\t\treturn this.getPropertyValue(\"delay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n","/**\r\n * Zoom out button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CloseButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICloseButtonAdapters extends IButtonAdapters, ICloseButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link ICloseButtonEvents} for a list of available events\r\n * @see {@link ICloseButtonAdapters} for a list of available Adapters\r\n */\r\nexport class CloseButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICloseButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICloseButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICloseButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CloseButton\";\r\n\r\n\t\tthis.padding(8, 8, 8, 8);\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tthis.width = 30;\r\n\t\tthis.height = 30;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(20, 20, 20, 20);\r\n\r\n\t\tlet bgc = interfaceColors.getFor(\"background\");\r\n\t\tbackground.fill = bgc;\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.strokeWidth = 1;\r\n\r\n\t\tlet downColor = interfaceColors.getFor(\"primaryButtonActive\")\r\n\r\n\t\tlet bhs =background.states.getKey(\"hover\");\r\n\t\tbhs.properties.strokeWidth = 3;\r\n\t\tbhs.properties.fill = bgc;\r\n\r\n\t\tlet bds = background.states.getKey(\"down\");\t\t\t\t\r\n\t\tbds.properties.stroke = downColor;\r\n\t\tbds.properties.fill = bgc;\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\t\ticon.stroke = background.stroke;\r\n\r\n\t\tthis.icon = icon;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet w = this.pixelWidth / 3;\r\n\t\tlet h = this.pixelHeight / 3;\r\n\r\n\t\tlet path = $path.moveTo({ x: -w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: w / 2, y: h / 2 });\r\n\t\tpath += $path.moveTo({ x: w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: -w / 2, y: h / 2 });\r\n\t\tthis.icon.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Close\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CloseButton\"] = CloseButton;\r\n","/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\t\tthis.states.create(\"active\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\trightLabel.valign = \"middle\";\r\n\t\tleftLabel.valign = \"middle\";\r\n\t\tbutton.valign = \"middle\"\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated Use `switchButton` instead\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element for switch.\r\n\t *\r\n\t * @param Button\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Button\r\n\t */\r\n\tpublic get switchButton(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n","/**\r\n * Slider is a scrollbar with just one selection grip.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slider]].\r\n */\r\nexport interface ISliderProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[Slider]].\r\n */\r\nexport interface ISliderEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slider]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliderAdapters extends IScrollbarAdapters, ISliderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a slider - a version of scrollbar with just one grip.\r\n *\r\n * @see {@link ISliderEvents} for a list of available events\r\n * @see {@link ISliderAdapters} for a list of available Adapters\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliderEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Slider\";\r\n\r\n\t\tthis.thumb.opacity = 0;\r\n\t\tthis.thumb.interactionsEnabled = false;\r\n\t\tthis.endGrip.opacity = 0;\r\n\t\tthis.endGrip.interactionsEnabled = false;\r\n\r\n\t\tthis.startGrip.events.on(\"drag\", () => {\r\n\t\t\tthis.endGrip.x = this.startGrip.x;\r\n\t\t\tthis.endGrip.y = this.startGrip.y;\r\n\t\t})\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\tprotected set __end(value: number) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the end grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set end(position: number) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the start grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set start(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__start = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\treturn this._start;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slider\"] = Slider;\r\n","/**\r\n * A module that defines Text element used to indicate links.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[TextLink]].\r\n */\r\nexport interface ITextLinkProperties extends ILabelProperties { }\r\n\r\n/**\r\n * Defines events for [[TextLink]].\r\n */\r\nexport interface ITextLinkEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TextLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITextLinkAdapters extends ILabelAdapters, ITextLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a text element with a link.\r\n *\r\n * @see {@link ITextLinkEvents} for a list of available events\r\n * @see {@link ITextLinkAdapters} for a list of available Adapters\r\n */\r\nexport class TextLink extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITextLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITextLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITextLinkEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TextLink\";\r\n\t\tthis.selectable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"primaryButton\").brighten(0.3);\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.fill = interfaceColors.getFor(\"primaryButtonHover\").brighten(0.3);\r\n\r\n\t\tlet downState = this.states.create(\"down\");\r\n\t\tdownState.properties.fill = interfaceColors.getFor(\"primaryButtonDown\").brighten(0.3);\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextLink\"] = TextLink;\r\n","/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\ttopSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tbottomSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tleftSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\trightSide?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\thorizontalNeck?: Percent;\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\tverticalNeck?: Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Trapezoid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITrapezoidAdapters extends ISpriteAdapters, ITrapezoidProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nexport class Trapezoid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITrapezoidProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITrapezoidAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITrapezoidEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Trapezoid\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.topSide = percent(100);\r\n\t\tthis.bottomSide = percent(100);\r\n\t\tthis.leftSide = percent(100);\r\n\t\tthis.rightSide = percent(100);\r\n\r\n\t\tthis.isMeasured = false; // todo: add measureElement\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet ts: number = $utils.relativeToValue(this.topSide, w);\r\n\t\tlet bs: number = $utils.relativeToValue(this.bottomSide, w);\r\n\t\tlet ls: number = $utils.relativeToValue(this.leftSide, h);\r\n\t\tlet rs: number = $utils.relativeToValue(this.rightSide, h);\r\n\r\n\t\t// 1----2\r\n\t\t// |    |\r\n\t\t// 4----3\r\n\r\n\t\tlet x0: number = (w - ts) / 2;\r\n\t\tlet y0: number = (h - ls) / 2;\r\n\r\n\t\tlet x1: number = w - (w - ts) / 2;\r\n\t\tlet y1: number = (h - rs) / 2;\r\n\r\n\t\tlet x2: number = w - (w - bs) / 2;\r\n\t\tlet y2: number = h - (h - rs) / 2;\r\n\r\n\t\tlet x3: number = (w - bs) / 2;\r\n\t\tlet y3: number = h - (h - ls) / 2;\r\n\r\n\t\tlet mt: string = \"\";\r\n\t\tlet mr: string = \"\";\r\n\t\tlet mb: string = \"\";\r\n\t\tlet ml: string = \"\";\r\n\r\n\t\tif ($type.hasValue(this.horizontalNeck)) {\r\n\t\t\tlet hn: number = this.horizontalNeck.value;\r\n\t\t\tmt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n\t\t\tmb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.verticalNeck)) {\r\n\t\t\tlet vn: number = this.verticalNeck.value;\r\n\t\t\tmr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n\t\t\tml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n\t\t}\r\n\r\n\r\n\t\tlet path: string = $path.moveTo({ x: x0, y: y0 })\r\n\t\t\t+ mt\r\n\t\t\t+ $path.lineTo({ x: x1, y: y1 })\r\n\t\t\t+ mr\r\n\t\t\t+ $path.lineTo({ x: x2, y: y2 })\r\n\t\t\t+ mb\r\n\t\t\t+ $path.lineTo({ x: x3, y: y3 })\r\n\t\t\t+ ml\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set topSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get topSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set bottomSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get bottomSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set leftSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get leftSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"leftSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set rightSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get rightSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"rightSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Horizontal neck position\r\n\t */\r\n\tpublic set horizontalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"horizontalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal neck position\r\n\t */\r\n\tpublic get horizontalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"horizontalNeck\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Vertical neck position\r\n\t */\r\n\tpublic set verticalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"verticalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical neck position\r\n\t */\r\n\tpublic get verticalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"verticalNeck\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n","/**\r\n * Functionality for drawing waved circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedCircle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedCircleAdapters extends ICircleAdapters, IWavedCircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nexport class WavedCircle extends Circle implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedCircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedCircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedCircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedCircle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\r\n\t\tthis.fill = undefined;\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.tension = 0.8;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tlet path: string = \"\";\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\r\n\t\tif (radius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(radius);\r\n\t\t\tpath = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\t\tif (innerRadius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(innerRadius);\r\n\t\t\tpoints.reverse();\r\n\t\t\tpath += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns points that circle consists of.\r\n\t *\r\n\t * @param radius  Radius (px)\r\n\t * @return Points\r\n\t */\r\n\tprotected getPoints(radius: number): IPoint[] {\r\n\t\tlet circleLength: number = radius * Math.PI * 2;\r\n\t\tlet halfWaveHeight: number = this.waveHeight / 2;\r\n\r\n\t\tlet waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n\t\tlet halfWaveLength: number = waveLength / 2;\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet count = circleLength / waveLength;\r\n\t\tfor (let i = 0; i <= count; i++) {\r\n\t\t\tlet angle1: number = (i * waveLength) / circleLength * 360;\r\n\t\t\tlet angle2: number = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n\r\n\t\t\tpoints.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n\t\t\tpoints.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n\t\t}\r\n\t\tpoints.pop();\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated inner radius of the circle in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n","/**\r\n * Zoom out button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomOutButton]].\r\n */\r\nexport interface IZoomOutButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomOutButton]].\r\n */\r\nexport interface IZoomOutButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomOutButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomOutButtonAdapters extends IButtonAdapters, IZoomOutButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IZoomOutButtonEvents} for a list of available events\r\n * @see {@link IZoomOutButtonAdapters} for a list of available Adapters\r\n */\r\nexport class ZoomOutButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomOutButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomOutButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomOutButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ZoomOutButton\";\r\n\r\n\t\tthis.padding(9, 9, 9, 9);\r\n\t\t//this.dx = - 5;\r\n\t\t//this.dy = 5;\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(20, 20, 20, 20);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 11, y: 0 });\r\n\t\ticon.path = path;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(8, 3, 8, 3);\r\n\t\ticon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tthis.icon = icon;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Zoom Out\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomOutButton\"] = ZoomOutButton;\r\n","/**\r\n * Play button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PlayButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPlayButtonAdapters extends IButtonAdapters, IPlayButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nexport class PlayButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPlayButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPlayButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPlayButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PlayButton\";\r\n\r\n\t\tthis.padding(12, 12, 12, 12);\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(25, 25, 25, 25);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create a play icon\r\n\t\tlet playIcon: Triangle = new Triangle();\r\n\t\tplayIcon.direction = \"right\";\r\n\t\tplayIcon.width = 9;\r\n\t\tplayIcon.height = 11;\r\n\t\tplayIcon.marginLeft = 1;\r\n\t\tplayIcon.marginRight = 1;\r\n\t\tplayIcon.horizontalCenter = \"middle\";\r\n\t\tplayIcon.verticalCenter = \"middle\";\r\n\r\n\t\tplayIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tplayIcon.fill = playIcon.stroke;\r\n\t\tthis.icon = playIcon;\r\n\r\n\t\t// Create a play icon\r\n\t\tlet stopIcon: RoundedRectangle = new RoundedRectangle();\r\n\t\tstopIcon.width = 11;\r\n\t\tstopIcon.height = 11;\r\n\t\tstopIcon.horizontalCenter = \"middle\";\r\n\t\tstopIcon.verticalCenter = \"middle\";\r\n\t\tstopIcon.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tstopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tstopIcon.fill = playIcon.stroke;\r\n\r\n\t\tthis.togglable = true;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.transitionDuration = 0;\r\n\t\tactiveState.properties.icon = stopIcon;\r\n\r\n\t\tthis.defaultState.transitionDuration = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Play\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for color modifiers.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class ColorModifier extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies color value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Original color\r\n\t * @return Modified\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorModifier\"] = ColorModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class GradientModifier extends ColorModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t */\r\n\tprotected _lightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t */\r\n\tprotected _brightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t */\r\n\tprotected _opacities!: number[];\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t */\r\n\tprotected _offsets!: number[];\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.lightnesses = [];\r\n\t\tthis.brightnesses = [];\r\n\t\tthis.opacities = [];\r\n\t\tthis.offsets = [];\r\n\t\tthis.className = \"GradientModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t *\r\n\t * @param value  Lightness values\r\n\t */\r\n\tpublic set lightnesses(value: number[]) {\r\n\t\tthis._lightnesses = value;\r\n\t\tthis._brightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness values\r\n\t */\r\n\tpublic get lightnesses(): number[] {\r\n\t\treturn this._lightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t *\r\n\t * @param value  Brightness values\r\n\t */\r\n\tpublic set brightnesses(value: number[]) {\r\n\t\tthis._brightnesses = value;\r\n\t\tthis._lightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Brightness values\r\n\t */\r\n\tpublic get brightnesses(): number[] {\r\n\t\treturn this._brightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t *\r\n\t * @param value  Opacity values\r\n\t */\r\n\tpublic set opacities(value: number[]) {\r\n\t\tthis._opacities = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity values\r\n\t */\r\n\tpublic get opacities(): number[] {\r\n\t\treturn this._opacities;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t *\r\n\t * @param value  Offsets\r\n\t */\r\n\tpublic set offsets(value: number[]) {\r\n\t\tthis._offsets = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offsets\r\n\t */\r\n\tpublic get offsets(): number[] {\r\n\t\treturn this._offsets;\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies the color based on step setting.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Source color\r\n\t * @return A gradient that matches set modification rules\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\r\n\t\t// Clear current gradient\r\n\t\tthis.gradient.clear();\r\n\r\n\t\t// Get step count\r\n\t\tlet count: number = 0;\r\n\t\tif (this.opacities) {\r\n\t\t\tcount = $math.max(count, this.opacities.length);\r\n\t\t}\r\n\t\tif (this.lightnesses) {\r\n\t\t\tcount = $math.max(count, this.lightnesses.length);\r\n\t\t}\r\n\t\tif (this.brightnesses) {\r\n\t\t\tcount = $math.max(count, this.brightnesses.length);\r\n\t\t}\r\n\r\n\t\t// Init step values\r\n\t\tlet opacity: number = 1,\r\n\t\t\tlightness: $type.Optional<number>,\r\n\t\t\tbrightness: $type.Optional<number>;\r\n\r\n\t\t// Apply steps\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Take base color\r\n\t\t\tlet color = value;\r\n\r\n\t\t\t// Check if there are any parameters for this step\r\n\t\t\tif (this.opacities && $type.isNumber(this.opacities[i])) {\r\n\t\t\t\topacity = this.opacities[i];\r\n\t\t\t}\r\n\t\t\tif (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n\t\t\t\tlightness = this.lightnesses[i];\r\n\t\t\t\tbrightness = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n\t\t\t\tbrightness = this.brightnesses[i];\r\n\t\t\t\tlightness = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we need to brighten/lighten color\r\n\t\t\tif ($type.isNumber(brightness)) {\r\n\t\t\t\tcolor = value.brighten(this.brightnesses[i]);\r\n\t\t\t}\r\n\t\t\telse if ($type.isNumber(lightness)) {\r\n\t\t\t\tcolor = value.lighten(this.lightnesses[i]);\r\n\t\t\t}\r\n\r\n\t\t\t// Get offset (it's OK if it's undefined)\r\n\t\t\tlet offset: number = this.offsets[i];\r\n\r\n\t\t\t// Apply step\r\n\t\t\tthis.gradient.addColor(color, opacity, offset);\r\n\t\t}\r\n\t\treturn this.gradient;\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis._offsets = source.offsets;\r\n\t\tthis._brightnesses = source.brightnesses;\r\n\t\tthis._lightnesses = source.lightnesses;\r\n\t\tthis._opacities = source.opacities;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class LinearGradientModifier extends GradientModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LinearGradientModifier\";\r\n\t\tthis.gradient = new LinearGradient();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.gradient = source.gradient.clone();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradientModifier\"] = LinearGradientModifier;\r\n","/**\r\n * Cone module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent, Percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Orientation } from \"../../defs/Orientation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cone]].\r\n */\r\nexport interface IConeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius?: Percent;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\ttopRadius?: Percent;\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Cone]].\r\n */\r\nexport interface IConeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Cone]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeAdapters extends IContainerAdapters, IConeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nexport class Cone extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeEvents;\r\n\r\n\t/**\r\n\t * Bottom ellement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bottom: Ellipse;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic top: Ellipse;\r\n\r\n\t/**\r\n\t * Body element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic body: Sprite;\r\n\r\n\t/**\r\n\t * Gradient for the fill of the body.\r\n\t */\r\n\tpublic bodyFillModifier: LinearGradientModifier;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Cone\";\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.topRadius = percent(100);\r\n\r\n\t\tthis.top = this.createChild(Ellipse);\r\n\t\tthis.top.shouldClone = false;\r\n\r\n\t\tthis.bottom = this.createChild(Ellipse);\r\n\t\tthis.bottom.shouldClone = false;\r\n\r\n\t\tthis.body = this.createChild(Sprite);\r\n\t\tthis.body.shouldClone = false;\r\n\r\n\t\tthis.body.setElement(this.paper.add(\"path\"));\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.bodyFillModifier = new LinearGradientModifier();\r\n\t\tthis.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n\t\tthis.body.fillModifier = this.bodyFillModifier;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\t$object.copyProperties(this, this.top, visualProperties);\r\n\t\t$object.copyProperties(this, this.bottom, visualProperties);\r\n\t\t$object.copyProperties(this, this.body, visualProperties);\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet bottom: Ellipse = this.bottom;\r\n\t\tlet top: Ellipse = this.top;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet radiusBase: number;\r\n\t\tlet dx: number;\r\n\t\tlet dy: number;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tradiusBase = h / 2;\r\n\t\t\tbottom.y = h / 2;\r\n\t\t\ttop.y = h / 2;\r\n\t\t\ttop.x = w;\r\n\t\t\tdx = (90 - angle) / 90;\r\n\t\t\tdy = 0;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 90;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = 0;\r\n\t\t\tdy = (90 - angle) / 90;\r\n\r\n\t\t\tradiusBase = w / 2;\r\n\t\t\tbottom.y = h;\r\n\t\t\tbottom.x = w / 2;\r\n\t\t\ttop.x = w / 2;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 0;\r\n\t\t}\r\n\r\n\t\tlet radius: number = this.radius.value * radiusBase;\r\n\t\tlet topRadius: number = this.topRadius.value * radiusBase;\r\n\r\n\t\tbottom.radius = radius - radius * dx;\r\n\t\tbottom.radiusY = radius - radius * dy;\r\n\r\n\t\ttop.radius = topRadius - topRadius * dx;\r\n\t\ttop.radiusY = topRadius - topRadius * dy;\r\n\r\n\t\tlet path: string;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tpath = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n\t\t}\r\n\r\n\t\tthis.body.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Bottom radius\r\n\t */\r\n\tpublic set radius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom radius\r\n\t */\r\n\tpublic get radius(): Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Top radius\r\n\t */\r\n\tpublic set topRadius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"topRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top radius\r\n\t */\r\n\tpublic get topRadius(): Percent {\r\n\t\treturn this.getPropertyValue(\"topRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n","/**\r\n * Module for \"Lighten\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Lighten\" filter\r\n */\r\nexport interface LightenFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Lightness.\r\n\t */\r\n\tlightness: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\r\nexport class LightenFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LightenFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link LightenFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<LightenFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LightenFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.lightness = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Lightness of the target colors.\r\n\t *\r\n\t * If `lightness` is a positive number, the filter will make all colors\r\n\t * lighter.\r\n\t *\r\n\t * If `lightness` is negative, colors will be darkened.\r\n\t *\r\n\t * @param value  Lightness\r\n\t */\r\n\tpublic set lightness(value: number) {\r\n\t\tthis.properties[\"lightness\"] = value;\r\n\t\tlet v = value + 1;\r\n\t\tthis.feColorMatrix.attr({ \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness\r\n\t */\r\n\tpublic get lightness(): number {\r\n\t\treturn this.properties[\"lightness\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;\r\n","/**\r\n * Creates a 3D rectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Color, color, toColor } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Rectangle3D]].\r\n */\r\nexport interface Rectangle3DProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Rectangle3D]]\r\n */\r\nexport interface Rectangle3DEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Rectangle3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface Rectangle3DAdapters extends IContainerAdapters, Rectangle3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\r\nexport class Rectangle3D extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: Rectangle3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: Rectangle3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: Rectangle3DEvents;\r\n\r\n\t/**\r\n\t * Left side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideLeft: Sprite;\r\n\r\n\t/**\r\n\t * Right side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideRight: Sprite;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideTop: Sprite;\r\n\r\n\t/**\r\n\t * Bottom element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBottom: Sprite;\r\n\r\n\t/**\r\n\t * Back element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBack: Sprite;\r\n\r\n\t/**\r\n\t * Front element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideFront: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 30;\r\n\t\tthis.className = \"Rectangle3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tlet sideBack: Sprite = this.createChild(Sprite);\r\n\t\tsideBack.shouldClone = false;\r\n\t\tsideBack.setElement(this.paper.add(\"path\"));\r\n\t\tsideBack.isMeasured = false;\r\n\r\n\t\tthis.sideBack = sideBack;\r\n\t\tthis._disposers.push(this.sideBack);\r\n\r\n\t\tlet sideBottom: Sprite = this.createChild(Sprite);\r\n\t\tsideBottom.shouldClone = false;\r\n\t\tsideBottom.setElement(this.paper.add(\"path\"));\r\n\t\tsideBottom.isMeasured = false;\r\n\t\tthis.sideBottom = sideBottom;\r\n\t\tthis._disposers.push(this.sideBottom);\r\n\r\n\t\tlet sideLeft: Sprite = this.createChild(Sprite);\r\n\t\tsideLeft.shouldClone = false;\r\n\t\tsideLeft.setElement(this.paper.add(\"path\"));\r\n\t\tsideLeft.isMeasured = false;\r\n\t\tthis.sideLeft = sideLeft;\r\n\t\tthis._disposers.push(this.sideLeft);\r\n\r\n\t\tlet sideRight: Sprite = this.createChild(Sprite);\r\n\t\tsideRight.shouldClone = false;\r\n\t\tsideRight.setElement(this.paper.add(\"path\"));\r\n\t\tsideRight.isMeasured = false;\r\n\t\tthis.sideRight = sideRight;\r\n\t\tthis._disposers.push(this.sideRight);\r\n\r\n\t\tlet sideTop: Sprite = this.createChild(Sprite);\r\n\t\tsideTop.shouldClone = false;\r\n\t\tsideTop.setElement(this.paper.add(\"path\"));\r\n\t\tsideTop.isMeasured = false;\r\n\t\tthis.sideTop = sideTop;\r\n\t\tthis._disposers.push(this.sideTop);\r\n\r\n\t\tlet sideFront: Sprite = this.createChild(Sprite);\r\n\t\tsideFront.shouldClone = false;\r\n\t\tsideFront.setElement(this.paper.add(\"path\"));\r\n\t\tsideFront.isMeasured = false;\r\n\t\tthis.sideFront = sideFront;\r\n\t\tthis._disposers.push(this.sideFront);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet sin: number = $math.sin(angle);\r\n\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\tlet a: IPoint = { x: 0, y: 0 };\r\n\t\tlet b: IPoint = { x: w, y: 0 };\r\n\t\tlet c: IPoint = { x: w, y: h };\r\n\t\tlet d: IPoint = { x: 0, y: h };\r\n\r\n\t\tlet ah: IPoint = { x: depth * cos, y: -depth * sin };\r\n\t\tlet bh: IPoint = { x: depth * cos + w, y: -depth * sin };\r\n\t\tlet ch: IPoint = { x: depth * cos + w, y: -depth * sin + h };\r\n\t\tlet dh: IPoint = { x: depth * cos, y: -depth * sin + h };\r\n\r\n\t\tthis.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\r\n\t\tthis.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.2;\r\n\t\t\tthis.sideBack.filters.push(filter);\r\n\r\n\t\t\tlet filter2 = filter.clone()\r\n\t\t\tfilter2.lightness = -0.4;\r\n\t\t\tthis.sideLeft.filters.push(filter2);\r\n\r\n\t\t\tlet filter3 = filter.clone()\r\n\t\t\tfilter3.lightness = -0.2;\r\n\t\t\tthis.sideRight.filters.push(filter3);\r\n\r\n\t\t\tlet filter4 = filter.clone()\r\n\t\t\tfilter4.lightness = -0.1;\r\n\t\t\tthis.sideTop.filters.push(filter4);\r\n\r\n\t\t\tlet filter5 = filter.clone()\r\n\t\t\tfilter5.lightness = -0.5;\r\n\t\t\tthis.sideBottom.filters.push(filter5);\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tthis.sideBack.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideLeft.fill = color(colorStr).lighten(-0.4);\r\n\t\t\tthis.sideRight.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideTop.fill = color(colorStr).lighten(-0.1);\r\n\t\t\tthis.sideBottom.fill = color(colorStr).lighten(-0.5);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Rectangle3D.\r\n\t *\r\n\t * @param source Source Rectangle3D\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.sideBack.copyFrom(source.sideBack);\r\n\t\tthis.sideLeft.copyFrom(source.sideLeft);\r\n\t\tthis.sideRight.copyFrom(source.sideRight);\r\n\t\tthis.sideTop.copyFrom(source.sideTop);\r\n\t\tthis.sideBottom.copyFrom(source.sideBottom);\r\n\t}\r\n\r\n}\r\n","/**\r\n * 3D slice module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice, ISliceProperties, ISliceAdapters, ISliceEvents } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Color, color } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\n\r\n/**\r\n * Defines properties for [[Slice3D]].\r\n */\r\nexport interface ISlice3DProperties extends ISliceProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice3D]].\r\n */\r\nexport interface ISlice3DEvents extends ISliceEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlice3DAdapters extends ISliceAdapters, ISlice3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nexport class Slice3D extends Slice {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlice3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlice3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlice3DEvents;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic edge: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideA: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideB: Sprite;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create edge container\r\n\t\tlet edge = this.createChild(Sprite);\r\n\t\tthis.edge = edge;\r\n\t\tedge.shouldClone = false;\r\n\t\tedge.isMeasured = false;\r\n\t\tedge.toBack();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 20;\r\n\r\n\t\t// Create side A element\r\n\t\tlet sideA = this.createChild(Sprite);\r\n\t\tthis.sideA = sideA;\r\n\t\tsideA.shouldClone = false;\r\n\t\tsideA.isMeasured = false;\r\n\t\t//sideA.setElement(this.paper.add(\"path\"));\r\n\t\t//sideA.strokeOpacity = 0;\r\n\r\n\t\t// Crate side B element\r\n\t\tlet sideB = this.createChild(Sprite);\r\n\t\tthis.sideB = sideB;\r\n\t\tsideB.shouldClone = false;\r\n\t\tsideB.isMeasured = false;\r\n\t\t//sideB.setElement(this.paper.add(\"path\"));\r\n\t\t//sideB.strokeOpacity = 0;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.25;\r\n\t\t\tthis.edge.filters.push(filter);\r\n\t\t\tthis.sideA.filters.push(filter.clone());\r\n\t\t\tthis.sideB.filters.push(filter.clone());\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tlet edgeFill = color(colorStr).lighten(-0.25);\r\n\r\n\t\t\tthis.edge.fill = edgeFill;\r\n\t\t\tthis.sideA.fill = edgeFill;\r\n\t\t\tthis.sideB.fill = edgeFill;\r\n\r\n\t\t\tthis.edge.stroke = edgeFill;\r\n\t\t\tthis.sideA.stroke = edgeFill;\r\n\t\t\tthis.sideB.stroke = edgeFill;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.cornerRadius = 0;\r\n\t\tthis.innerCornerRadius = 0;\r\n\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n\t\t\tthis.sideB.show(0);\r\n\t\t\tthis.sideA.show(0);\r\n\t\t\tthis.edge.show(0);\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet innerRadius = this.pixelInnerRadius || 0;\r\n\t\t\tlet radiusY = this.radiusY || 0;\r\n\r\n\t\t\t//let cornerRadius = this.cornerRadius || 0;\r\n\t\t\t//let innerCornerRadius = this.innerCornerRadius;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\t// this is code duplicate with $path.arc. @todo to think how to avoid it\r\n\r\n\t\t\tlet endAngle = startAngle + arc;\r\n\t\t\t//let crSin = $math.sin($math.min(arc, 45) / 2);\r\n\r\n\t\t\t//innerCornerRadius = innerCornerRadius || cornerRadius;\r\n\r\n\t\t\tlet innerRadiusY = (radiusY / radius) * innerRadius;\r\n\t\t\t//let cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n\t\t\t//let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n\r\n\t\t\t//let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (innerRadius < innerCornerRadius) {\r\n\t\t\t//\tinnerRadius = innerCornerRadius;\r\n\t\t\t//}\r\n\r\n\t\t\t//if (innerRadiusY < innerCornerRadiusY) {\r\n\t\t\t//\tinnerRadiusY = innerCornerRadiusY;\r\n\t\t\t//}\r\n\r\n\t\t\t//let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (!$type.isNumber(crInnerAngle)) {\r\n\t\t\t//\tcrInnerAngle = 0;\r\n\t\t\t//}\r\n\t\t\t//if (!$type.isNumber(crInnerAngleY)) {\r\n\t\t\t//\tcrInnerAngleY = 0;\r\n\t\t\t//}\r\n\r\n\t\t\t//let middleAngle = startAngle + arc / 2;\r\n\t\t\t//let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n\r\n\t\t\tlet a0 = { x: $math.cos(startAngle) * (innerRadius), y: $math.sin(startAngle) * (innerRadiusY) };\r\n\t\t\tlet b0 = { x: $math.cos(startAngle) * (radius), y: $math.sin(startAngle) * (radiusY) };\r\n\t\t\tlet c0 = { x: $math.cos(endAngle) * (radius), y: $math.sin(endAngle) * (radiusY) };\r\n\t\t\tlet d0 = { x: $math.cos(endAngle) * (innerRadius), y: $math.sin(endAngle) * (innerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tlet h: number = this.depth;\r\n\t\t\tlet ah: IPoint = { x: a0.x, y: a0.y - h };\r\n\t\t\tlet bh: IPoint = { x: b0.x, y: b0.y - h };\r\n\t\t\tlet ch: IPoint = { x: c0.x, y: c0.y - h };\r\n\t\t\tlet dh: IPoint = { x: d0.x, y: d0.y - h };\r\n\r\n\t\t\tlet edgePath = \"\";\r\n\t\t\tlet count = Math.ceil(arc / 5);\r\n\t\t\tlet step = arc / count;\r\n\t\t\tlet mangle = startAngle;\r\n\r\n\t\t\tlet prevPoint = bh;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, radius, radiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, radius, radiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprevPoint = ah;\r\n\t\t\tmangle = startAngle;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.edge.path = edgePath;\r\n/*\r\n\t\t\ta0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\tb0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\tc0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\td0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tah = { x: a0.x, y: a0.y - h };\r\n\t\t\tbh = { x: b0.x, y: b0.y - h };\r\n\t\t\tch = { x: c0.x, y: c0.y - h };\r\n\t\t\tdh = { x: d0.x, y: d0.y - h };\r\n*/\r\n\t\t\tthis.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n\t\t\tthis.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n\r\n\t\t\tif (this.startAngle < 90) {\r\n\t\t\t\tthis.sideA.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideA.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.startAngle + this.arc > 90) {\r\n\t\t\t\tthis.sideB.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideB.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tthis.slice.dy = -h;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.sideA.hide(0);\r\n\t\t\tthis.sideB.hide(0);\r\n\t\t\tthis.edge.hide(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t * @param depth  Depth (px)\r\n\t */\r\n\tpublic set depth(depth: number) {\r\n\t\tthis.setPropertyValue(\"depth\", depth, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\tlet angle: number = this.getPropertyValue(\"angle\");\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = 0;\r\n\t\t}\r\n\t\treturn angle;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet radiusY: number = this.getPropertyValue(\"radiusY\");\r\n\t\tif (!$type.isNumber(radiusY)) {\r\n\t\t\tradiusY = this.radius - this.radius * this.angle / 90;\r\n\t\t}\r\n\t\treturn radiusY;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.edge.copyFrom(source.edge);\r\n\t\tthis.sideA.copyFrom(source.sideA);\r\n\t\tthis.sideB.copyFrom(source.sideB);\r\n\t}\r\n\r\n}\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify radial gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class RadialGradientModifier extends GradientModifier {\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: RadialGradient;\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadialGradientModifier\";\r\n\t\tthis.gradient = new RadialGradient();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.gradient = source.gradient.clone();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradientModifier\"] = RadialGradientModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n\r\nexport interface LinePatternProperties extends PatternProperties {\r\n\tgap: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Line pattern.\r\n */\r\nexport class LinePattern extends Pattern {\r\n\r\n\t/**\r\n\t * SVG `<line>` element used for pattern.\r\n\t */\r\n\tprotected _line: AMElement;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LinePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"gap\"] = 0;\r\n\t\tthis._line = this.paper.add(\"path\");\r\n\t\tthis.addElement(this._line);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\tthis.properties[\"shapeRendering\"] = \"auto\";\r\n\t\t}\r\n\t\tif (this._line) {\r\n\t\t\tlet w = this.width;\r\n\t\t\tlet h = this.height;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tif (!this.gap) {\r\n\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n\r\n\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet step = this.gap + this.strokeWidth;\r\n\t\t\t\tlet count = this.height / step;\r\n\r\n\t\t\t\tfor (let i = -count / 2; i < count * 1.5; i++) {\r\n\t\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n\r\n\t\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._line.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Number of pixels between pattern lines.\r\n\t *\r\n\t * The pattern will automatically draw required number of lines to fill\r\n\t * pattern area maintaining `gap` distance between them.\r\n\t *\r\n\t * 0 (zero) means only single line will be drawn.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.7.7\r\n\t */\r\n\tpublic set gap(value: number) {\r\n\t\tthis.properties[\"gap\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return gap\r\n\t */\r\n\tpublic get gap(): number {\r\n\t\treturn this.properties[\"gap\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n","/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for circle pattern\r\n */\r\nexport interface CirclePatternProperties extends PatternProperties {\r\n\tradius: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Circular pattern\r\n */\r\nexport class CirclePattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<circle>` element used in pattern.\r\n\t */\r\n\tprotected _circle: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: CirclePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"radius\"] = 2;\r\n\t\tthis._circle = this.paper.add(\"circle\");\r\n\t\tthis.addElement(this._circle);\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this._circle) {\r\n\t\t\tthis._circle.attr({ \"r\": this.radius, \"cx\": this.width / 2, \"cy\":this.height / 2});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Circle radius in pixels.\r\n\t *\r\n\t * @param value Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.properties[\"radius\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.properties[\"radius\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;\r\n","/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis.addElement(this._rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\tthis.properties[\"rotationY\"] = this.height / 2;\t\t\r\n\t\tif (this._rect) {\r\n\t\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\":(this.width - this.rectWidth) / 2, \"y\":(this.height - this.rectHeight) / 2 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n","/**\r\n * Module for \"Colorize\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Colorize\" filter.\r\n */\r\nexport interface ColorizeFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n\t/**\r\n\t * Intensity. (0-1)\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tintensity: number;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nexport class ColorizeFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ColorizeFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link ColorizeFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<ColorizeFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorizeFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\t//this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)applies colors to the already existing filter by modifying filyer's\r\n\t * color matrix element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyFilter(): void {\r\n\r\n\t\tlet i: number = this.intensity;\r\n\t\tlet ii = 1 - i;\r\n\r\n\t\tlet r: number;\r\n\t\tlet g: number;\r\n\t\tlet b: number;\r\n\r\n\t\tconst color = this.color;\r\n\r\n\t\tif (color && color.rgb) {\r\n\t\t\tr = color.rgb.r / 255 * i;\r\n\t\t\tg = color.rgb.g / 255 * i;\r\n\t\t\tb = color.rgb.b / 255 * i;\r\n\r\n\t\t} else {\r\n\t\t\tr = 0;\r\n\t\t\tg = 0;\r\n\t\t\tb = 0;\r\n\t\t}\r\n\r\n\t\tthis.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * Target color to apply to the element.\r\n\t *\r\n\t * Depending on the `intensity`, all colors of the target element will steer\r\n\t * towards this color.\r\n\t *\r\n\t * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"color\"] = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"color\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Intensity of the color (0-1).\r\n\t *\r\n\t * The bigger the number the more of a `color` target's colors will become.\r\n\t *\r\n\t * 0 means the colors will remain as they are.\r\n\t * 1 means all colors will become the target `color`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Intensity (0-1)\r\n\t */\r\n\tpublic set intensity(value: number) {\r\n\t\tthis.properties.intensity = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Intensity (0-1)\r\n\t */\r\n\tpublic get intensity(): number {\r\n\t\treturn this.properties.intensity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n","/**\r\n * Module for \"Desaturate\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Desaturate\" filter\r\n */\r\nexport interface DesaturateFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Saturation. (0-1)\r\n\t */\r\n\tsaturation: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creats a \"Desaturate\" filter\r\n */\r\nexport class DesaturateFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: DesaturateFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link DesaturateFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<DesaturateFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DesaturateFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"saturate\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 120;\r\n\t\tthis.height = 120;\r\n\r\n\t\tthis.saturation = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Saturation.\r\n\t *\r\n\t * 0 - completely desaturated.\r\n\t * 1 - fully saturated (gray).\r\n\t *\r\n\t * @param value  Saturation (0-1)\r\n\t */\r\n\tpublic set saturation(value: number) {\r\n\t\tthis.properties[\"saturation\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": value.toString() });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Saturation (0-1)\r\n\t */\r\n\tpublic get saturation(): number {\r\n\t\treturn this.properties[\"saturation\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DesaturateFilter\"] = DesaturateFilter;\r\n","/**\r\n * Module for \"Blur\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Blur\" filter.\r\n */\r\nexport interface BlurFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Horizontal offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdx?: number;\r\n\r\n\t/**\r\n\t * Vertical offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdy?: number;\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t */\r\n\tblur: number;\r\n\r\n\t/**\r\n\t * Opacity. (0-1)\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Color.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tcolor?: Color;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Blur\" filter.\r\n */\r\nexport class BlurFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: BlurFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link BlurFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<BlurFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feGaussianBlur>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feGaussianBlur: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"BlurFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\r\n\t\tthis.feGaussianBlur = this.paper.add(\"feGaussianBlur\");\r\n\t\tthis.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n\t\tthis.filterPrimitives.push(this.feGaussianBlur);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 200;\r\n\t\tthis.height = 200;\r\n\t\tthis.blur = 1.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t *\r\n\t * The bigger the value, the blurrier the target element will become.\r\n\t *\r\n\t * @default 1.5\r\n\t * @param value Blur\r\n\t */\r\n\tpublic set blur(value: number) {\r\n\t\tthis.properties.blur = value;\r\n\t\tthis.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Blur\r\n\t */\r\n\tpublic get blur(): number {\r\n\t\treturn this.properties.blur;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"BlurFilter\"] = BlurFilter;\r\n","/**\r\n * Module for \"Focus\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Focus\" filter.\r\n */\r\nexport interface FocusFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t */\r\n\tstroke?: Color;\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t */\r\n\tstrokeWidth?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity. (0-1)\r\n\t */\r\n\tstrokeOpacity?: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\r\nexport class FocusFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FocusFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link FocusFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<FocusFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feFlood: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feMorphology>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feMorphology: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feComposite>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feComposite: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feBlend: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FocusFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feFlood = this.paper.add(\"feFlood\");\r\n\t\tthis.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n\t\tthis.filterPrimitives.push(this.feFlood);\r\n\r\n\t\tthis.feMorphology = this.paper.add(\"feMorphology\");\r\n\t\tthis.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n\t\tthis.filterPrimitives.push(this.feMorphology);\r\n\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\tthis.feComposite = this.paper.add(\"feComposite\");\r\n\t\tthis.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n\t\tthis.filterPrimitives.push(this.feComposite);\r\n\r\n\t\tthis.feBlend = this.paper.add(\"feBlend\");\r\n\t\tthis.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n\t\tthis.filterPrimitives.push(this.feBlend);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 130;\r\n\t\tthis.height = 130;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.feFlood.attr({ \"flood-color\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Outline thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.feMorphology.attr({ \"radius\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): $type.Optional<number> {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t *\r\n\t * @param value  Outline opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"opacity\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): $type.Optional<number> {\r\n\t\treturn this.properties[\"opacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * In addition it also disables built-in focus outline on element this\r\n\t * filter is applied to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.group.removeStyle(\"outline\");\r\n\t\t}\r\n\t\tvalue.group.addStyle({\r\n\t\t\t\"outline\": \"none\"\r\n\t\t});\r\n\t\tsuper.setSprite(value);\r\n\t}\r\n\r\n}\r\n","/**\r\n * This module contains PatternSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { Pattern } from \"../rendering/fills/Pattern\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class PatternSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Pattern[] = [];\r\n\r\n\t/**\r\n\t * Current step.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the PatternSet will start iterating patterns from\r\n\t * that particular index, not the first pattern in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in cycle. Once all patterns in the list are iterated,\r\n\t * iteration restarts from beginning and currentPass is incremented.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PatternSet\";\r\n\r\n\t\t// Set base color to be used for pattern elements\r\n\t\tconst interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set default patterns\r\n\t\tthis.list = [\r\n\t\t\tthis.getLinePattern(1000, 45, 1, 6),\r\n\t\t\tthis.getRectPattern(10, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, -45, 1, 6),\r\n\t\t\tthis.getCirclePattern(11, 2, true),\r\n\t\t\tthis.getLinePattern(6, 90, 1),\r\n\t\t\tthis.getRectPattern(12, 45, 6, true),\r\n\t\t\tthis.getLinePattern(6, 0, 1),\r\n\t\t\tthis.getRectPattern(7, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getCirclePattern(9, 3, false),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getRectPattern(10, 45, Math.sqrt(50)),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 1),\r\n\t\t\tthis.getRectPattern(10, 0, 9),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 1),\r\n\t\t\tthis.getLinePattern(1000, 0, 3, 1),\r\n\t\t\tthis.getRectPattern(10, 45, 10),\r\n\t\t\tthis.getLinePattern(1000, 90, 3, 1)\r\n\t\t];\r\n\r\n\t\tthis.baseColor = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getLinePattern(size: number, rotation: number, thickness: number, gap?: number, strokeDashArray?: string): LinePattern {\r\n\t\tlet pattern = new LinePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.stroke = this.baseColor;\r\n\t\tpattern.gap = gap;\r\n\t\tpattern.strokeDasharray = strokeDashArray;\r\n\t\tpattern.strokeWidth = thickness;\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getRectPattern(size: number, rotation: number, thickness: number, outline?:boolean): RectPattern {\r\n\t\tlet pattern = new RectPattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.rectWidth = thickness;\r\n\t\tpattern.rectHeight = thickness;\r\n\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\r\n\t\tif(rotation != 0){\r\n\t\t\tpattern.shapeRendering = \"auto\";\r\n\t\t}\r\n\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getCirclePattern(size: number, radius: number, outline:boolean): CirclePattern {\r\n\t\tlet pattern = new CirclePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.shapeRendering = \"auto\";\r\n\t\tpattern.radius = radius;\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * List of pre-defined patterns to be used in set.\r\n\t *\r\n\t * @param value Pattern list\r\n\t */\r\n\tpublic set list(value: Pattern[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern list\r\n\t */\r\n\tpublic get list(): Pattern[] {\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next pattern in list.\r\n\t *\r\n\t * @return Pattern\r\n\t */\r\n\tpublic next(): Pattern {\r\n\t\tconst pattern = this.getIndex(this.currentStep);\r\n\t\tthis._currentStep++;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param  i  Index\r\n\t * @return Pattern\r\n\t */\r\n\tpublic getIndex(i: number): Pattern {\r\n\t\tlet pattern;\r\n\t\twhile (this.list.length <= i) {\r\n\t\t\tthis.generatePatterns();\r\n\t\t}\r\n\t\tpattern = this.list[i];\r\n\t\treturn pattern.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new set of patterns.\r\n\t */\r\n\tprivate generatePatterns(): void {\r\n\t\tconst count = this.list.length / (this._currentPass + 1);\r\n\t\tthis._currentPass++;\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\tthis.list.push(this.list[i].clone());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// if (config) {\r\n\r\n\t\t// \t// Set up axis ranges\r\n\t\t// \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t// \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t// \t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t// \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;","/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/**\r\n * AmChartsLogo module.\r\n *\r\n * AmChartsLogo shows amCharts logo for non-commercial users of a library.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Polyspline } from \"./Polyspline\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { DesaturateFilter } from \"../rendering/filters/DesaturateFilter\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AmChartsLogo]].\r\n *\r\n * @see {@link Adapter}\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoAdapters extends IContainerAdapters, IAmChartsLogoProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IAmChartsLogoEvents} for a list of available events\r\n * @see {@link IAmChartsLogoAdapters} for a list of available Adapters\r\n * @ignore Exclude from docs\r\n */\r\nexport class AmChartsLogo extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAmChartsLogoProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAmChartsLogoAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAmChartsLogoEvents;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AmChartsLogo\";\r\n\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tlet d = 0.3;\r\n\t\tthis.opacity = 0.3;\r\n\t\tthis.defaultState.properties.opacity = 0.4;\r\n\t\tthis.url = \"https://www.amcharts.com/\";\r\n\t\tthis.urlTarget = \"_blank\";\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\t\tthis.readerTitle = \"Chart created using amCharts library\";\r\n\t\tthis.width = 220 * d;\r\n\t\tthis.height = 70 * d;\r\n\t\tthis.background.opacity = 0;\r\n\r\n\t\tlet aColor = color(\"#474758\");\r\n\t\tif (new InterfaceColorSet().getFor(\"background\").alternative.hex == \"#ffffff\") {\r\n\t\t\taColor = color(\"#ffffff\");\r\n\t\t}\r\n\r\n\t\tlet aGradient = new LinearGradient();\r\n\r\n\t\taGradient.addColor(aColor);\r\n\t\taGradient.addColor(aColor, 1, 0.75);\r\n\t\taGradient.addColor(color(\"#3cabff\"), 1, 0.755);\r\n\t\taGradient.rotation = -10;\r\n\r\n\t\tlet aStroke = aGradient;\r\n\r\n\t\tlet m = this.createChild(Polyspline)\r\n\t\tm.shouldClone = false;\r\n\t\tm.isMeasured = false;\r\n\t\tm.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\tm.strokeWidth = 6 * d;\r\n\t\tm.tensionX = 0.8;\r\n\t\tm.tensionY = 1;\r\n\r\n\t\tm.stroke = color(\"#3cabff\");\r\n\r\n\t\tlet a = this.createChild(Polyspline);\r\n\t\ta.shouldClone = false;\r\n\t\ta.isMeasured = false;\r\n\t\ta.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\ta.strokeWidth = 6 * d;\r\n\t\ta.tensionX = 0.75;\r\n\t\ta.tensionY = 1;\r\n\t\ta.stroke = aStroke;\r\n\r\n\t\tthis._disposers.push(a);\r\n\r\n\t\tlet desaturateFilter = new DesaturateFilter();\r\n\t\tthis.filters.push(desaturateFilter);\r\n\r\n\t\tlet desaturateFilterHover = new DesaturateFilter();\r\n\t\tdesaturateFilterHover.saturation = 1;\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.opacity = 1;\r\n\t\thoverState.filters.push(desaturateFilterHover);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { registry } from \"../Registry\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Container } from \"../Container\";\r\nimport { Component } from \"../Component\";\r\nimport { Paper } from \"../rendering/Paper\";\r\nimport { SVGContainer, svgContainers } from \"../rendering/SVGContainer\";\r\nimport { FocusFilter } from \"../rendering/filters/FocusFilter\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { AmChartsLogo } from \"../elements/AmChartsLogo\";\r\nimport { ITheme } from \"../../themes/ITheme\";\r\nimport { Tooltip } from \"../elements/Tooltip\";\r\nimport { Disposer, MultiDisposer } from \"../utils/Disposer\";\r\nimport { percent } from \"./Percent\";\r\nimport { options } from \"../Options\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport * as $dom from \"./DOM\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $log from \"./Log\";\r\n\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates all HTML and SVG containers needed for the chart instance, as well\r\n * as the new [[Sprite]] (as specified in `classType` parameter).\r\n *\r\n * @param htmlElement  A container to creat elements in\r\n * @param classType    A class definition of the new element to create\r\n * @return Newly-created Sprite object\r\n */\r\nfunction createChild<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\tlet htmlContainer = $dom.getElement(htmlElement);\r\n\r\n\t// If there's no container available yet, we create a fake one\r\n\tlet tmpContainer = false;\r\n\tif (!htmlContainer) {\r\n\t\thtmlContainer = document.createElement(\"div\");\r\n\t\thtmlContainer.style.width = \"200px\";\r\n\t\thtmlContainer.style.height = \"200px\";\r\n\t\thtmlContainer.style.top = \"0\";\r\n\t\thtmlContainer.style.left = \"0\";\r\n\t\thtmlContainer.style.visibility = \"hidden\";\r\n\t\thtmlContainer.style.position = \"absolute\";\r\n\t\tdocument.body.appendChild(htmlContainer);\r\n\t\ttmpContainer = true;\r\n\t}\r\n\r\n\tif (htmlContainer) {\r\n\r\n\t\thtmlContainer.innerHTML = \"\";\r\n\t\t//htmlContainer.style.overflow = \"hidden\";\r\n\r\n\t\tlet svgDiv = new SVGContainer(htmlContainer);\r\n\t\tlet paper = new Paper(svgDiv.SVGContainer, \"svg-\" + (svgContainers.length - 1));\r\n\r\n\t\t// the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n\t\t// svg area - this is often needed when working with small charts.\r\n\r\n\t\t// main container which holds content container and tooltips container\r\n\t\tlet container = new Container();\r\n\t\tcontainer.htmlContainer = htmlContainer;\r\n\t\tcontainer.svgContainer = svgDiv;\r\n\t\tcontainer.width = percent(100);\r\n\t\tcontainer.height = percent(100);\r\n\t\tcontainer.background.fillOpacity = 0;\r\n\t\tcontainer.paper = paper;\r\n\t\tpaper.append(container.group);\r\n\r\n\t\t// Set up moving to proper element container if it's not yet ready at call time\r\n\t\tif (tmpContainer) {\r\n\t\t\t$dom.ready(() => {\r\n\t\t\t\tcontainer.moveHtmlContainer(htmlElement);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// this is set from parent container, but this one doesn't have, so do it manually.\r\n\t\tcontainer.relativeWidth = 1;\r\n\t\tcontainer.relativeHeight = 1;\r\n\r\n\t\tsvgDiv.container = container;\r\n\r\n\t\t// creating classType instance\r\n\t\tlet sprite = container.createChild(classType);\r\n\t\tsprite.topParent = container;\r\n\t\tlet uid = sprite.uid;\r\n\r\n\t\tregistry.invalidSprites[uid] = [];\r\n\t\tregistry.invalidDatas[uid] = [];\r\n\t\tregistry.invalidPositions[uid] = [];\r\n\t\tregistry.invalidLayouts[uid] = [];\r\n\r\n\t\tcontainer.baseId = uid;\r\n\r\n\t\tsprite.isBaseSprite = true;\r\n\t\tsprite.focusFilter = new FocusFilter();\r\n\t\tregistry.baseSprites.push(sprite);\r\n\t\tregistry.baseSpritesByUid[uid] = sprite;\r\n\r\n\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width || 0, 0), height: Math.max(svgDiv.height || 0, 0) };\r\n\r\n\t\t// this solves issues with display:none, as all children are measured as 0x0\r\n\t\tcontainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\tif (event.previousWidth == 0 || event.previousHeight == 0) {\r\n\t\t\t\tcontainer.deepInvalidate();\r\n\t\t\t}\r\n\t\t\tif (sprite.maskRectangle) {\r\n\t\t\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width || 0, 0), height: Math.max(svgDiv.height || 0, 0) };\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet loopTimer: number | null = null;\r\n\r\n\t\t// Checks to see whether the chart was properly disposed or not\r\n\t\tconst loop = () => {\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\tif ($dom.getRoot(sprite.dom) == null) {\r\n\t\t\t\t\tif (options.autoDispose) {\r\n\t\t\t\t\t\tcontainer.htmlContainer = undefined;\r\n\t\t\t\t\t\tsvgDiv.htmlElement = undefined;\r\n\t\t\t\t\t\tsprite.dispose();\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$log.warn(\"Chart was not disposed\", sprite.uid);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tloopTimer = null;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloopTimer = window.setTimeout(loop, 1000);\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tloopTimer = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tloop();\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tif (loopTimer !== null) {\r\n\t\t\t\tclearTimeout(loopTimer);\r\n\t\t\t}\r\n\t\t\t$array.remove(registry.baseSprites, sprite);\r\n\t\t\tregistry.baseSpritesByUid[sprite.uid] = undefined;\r\n\t\t}));\r\n\r\n\t\t// TODO figure out a better way of doing this\r\n\t\tsprite.addDisposer(container);\r\n\r\n\t\t// tooltip container\r\n\t\tlet tooltipContainer: Container = container.createChild(Container);\r\n\t\ttooltipContainer.topParent = container;\r\n\t\ttooltipContainer.width = percent(100);\r\n\t\ttooltipContainer.height = percent(100);\r\n\t\ttooltipContainer.isMeasured = false;\r\n\t\tcontainer.tooltipContainer = tooltipContainer;\r\n\r\n\t\tsprite.tooltip = new Tooltip();\r\n\t\tsprite.tooltip.hide(0);\r\n\t\tsprite.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\r\n\t\ttooltipContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\t$type.getValue(sprite.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\t\t}, undefined, false)\r\n\r\n\t\t//@todo: maybe we don't need to create one by default but only on request?\r\n\r\n\t\tlet preloader = new Preloader();\r\n\t\tpreloader.events.on(\"inited\", () => {\r\n\t\t\tpreloader.__disabled = true;\r\n\t\t}, undefined, false);\r\n\t\tcontainer.preloader = preloader;\r\n\r\n\t\t//if (!options.commercialLicense) {\r\n\t\tif (sprite instanceof Container && !sprite.hasLicense()) {\r\n\t\t\tlet logo = tooltipContainer.createChild(AmChartsLogo);\r\n\t\t\ttooltipContainer.events.on(\"maxsizechanged\", (ev) => {\r\n\t\t\t\tif ((tooltipContainer.maxWidth <= 100) || (tooltipContainer.maxHeight <= 50)) {\r\n\t\t\t\t\tlogo.hide();\r\n\t\t\t\t}\r\n\t\t\t\telse if (logo.isHidden || logo.isHiding) {\r\n\t\t\t\t\tlogo.show();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tsprite.logo = logo;\r\n\t\t\tlogo.align = \"left\";\r\n\t\t\tlogo.valign = \"bottom\";\r\n\t\t}\r\n\r\n\t\t$utils.used(sprite.numberFormatter); // need to create one.\r\n\r\n\t\t// Set this as an autonomouse instance\r\n\t\t// Controls like Preloader, Export will use this.\r\n\t\tcontainer.isStandaloneInstance = true;\r\n\r\n\t\tif (options.onlyShowOnViewport) {\r\n\t\t\tif (!$dom.isElementInViewport(htmlContainer, options.viewportTarget)) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\tsprite.tooltipContainer.__disabled = true;\r\n\r\n\t\t\t\tlet disposers = [\r\n\t\t\t\t\t$dom.addEventListener(window, \"DOMContentLoaded\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"load\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"resize\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"scroll\", function() { viewPortHandler(sprite); })\r\n\t\t\t\t];\r\n\r\n\t\t\t\tif (options.viewportTarget) {\r\n\t\t\t\t\tconst targets = $type.isArray(options.viewportTarget) ? options.viewportTarget : options.viewportTarget ? [options.viewportTarget] : [];\r\n\t\t\t\t\tfor (let i = 0; i < targets.length; i++) {\r\n\t\t\t\t\t\tconst target = targets[i];\r\n\t\t\t\t\t\tdisposers.push($dom.addEventListener(target, \"resize\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t\t\tdisposers.push($dom.addEventListener(target, \"scroll\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet disposer = new MultiDisposer(disposers);\r\n\r\n\t\t\t\tsprite.addDisposer(disposer);\r\n\t\t\t\tsprite.vpDisposer = disposer;\r\n\t\t\t}\r\n\t\t\telse if (options.queue) {\r\n\t\t\t\taddToQueue(sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (options.queue) {\r\n\t\t\taddToQueue(sprite);\r\n\t\t}\r\n\r\n\t\treturn sprite;\r\n\t}\r\n\telse {\r\n\t\tsystem.log(\"html container not found\");\r\n\t\tthrow new Error(\"html container not found\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Disposes all of the currently active charts.\r\n */\r\nexport function disposeAllCharts(): void {\r\n\twhile (registry.baseSprites.length !== 0) {\r\n\t\tregistry.baseSprites.pop().dispose();\r\n\t}\r\n}\r\n\r\nexport function addToQueue(sprite: Sprite) {\r\n\tif (registry.queue.indexOf(sprite) == -1) {\r\n\t\tsprite.__disabled = true;\r\n\t\tsprite.tooltipContainer.__disabled = true;\r\n\t\tsprite.events.disableType(\"appeared\");\r\n\r\n\t\tif (registry.queue.length == 0) {\r\n\t\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\t\tqueueHandler(sprite);\r\n\t\t\t})\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tremoveFromQueue(sprite);\r\n\t\t}))\r\n\r\n\t\tregistry.queue.push(sprite);\r\n\t}\r\n}\r\n\r\nexport function removeFromQueue(sprite: Sprite) {\r\n\tlet index = registry.queue.indexOf(sprite);\r\n\tif (index >= 0) {\r\n\t\tregistry.queue.splice(registry.queue.indexOf(sprite), 1);\r\n\t\tlet nextSprite = registry.queue[index];\r\n\t\tif (nextSprite) {\r\n\t\t\tqueueHandler(nextSprite);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks whether the chart was not initialized fully due to setting\r\n * of `onlyShowOnViewport`. If it hasn't and is now in the viewport\r\n * the chart will be initialized.\r\n *\r\n * @since 4.9.12\r\n * @param  sprite  Top-level chart object\r\n */\r\nexport function viewPortHandler(sprite: Sprite) {\r\n\tif (sprite.__disabled && $dom.isElementInViewport(sprite.htmlContainer, options.viewportTarget)) {\r\n\r\n\t\tif (sprite.vpDisposer) {\r\n\t\t\tsprite.vpDisposer.dispose();\r\n\t\t}\r\n\r\n\t\taddToQueue(sprite);\r\n\t}\r\n}\r\n\r\nexport function queueHandler(sprite: Sprite) {\r\n\tif (sprite && sprite.tooltipContainer) {\r\n\t\tsprite.__disabled = false;\r\n\t\tsprite.tooltipContainer.__disabled = false;\r\n\t\tsprite.events.enableType(\"appeared\");\r\n\t\tsprite.dispatch(\"removedfromqueue\");\r\n\r\n\t\tif (sprite.showOnInit) {\r\n\t\t\tsprite.events.on(\"appeared\", () => {\r\n\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (sprite.vpDisposer) {\r\n\t\t\tsprite.vpDisposer.dispose();\r\n\t\t}\r\n\t\tif (sprite instanceof Container) {\r\n\t\t\tsprite.invalidateLabels();\r\n\t\t}\r\n\r\n\t\tif (sprite.tooltipContainer) {\r\n\t\t\tsprite.tooltipContainer.invalidateLayout();\r\n\t\t}\r\n\t\tif (sprite instanceof Component) {\r\n\t\t\tsprite.invalidateData();\r\n\t\t\tsprite.reinit();\r\n\r\n\t\t\tsprite.events.once(\"datavalidated\", () => {\r\n\t\t\t\tif (sprite.showOnInit) {\r\n\t\t\t\t\tsprite.appear();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsprite.reinit();\r\n\t\t\tsprite.events.once(\"inited\", () => {\r\n\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t})\r\n\t\t\tif (sprite.showOnInit) {\r\n\t\t\t\tsprite.appear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param htmlElement  Reference or id of the target container element\r\n * @param classType    Class type of the target chart type\r\n * @return Chart instance\r\n */\r\nexport function create<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\r\n\t// This is a nasty hack for the benefit of vanilla JS users, who do not\r\n\t// enjoy benefits of type-check anyway.\r\n\t// We're allowing passing in a name of the class rather than type reference\r\n\t// itself.\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType)) {\r\n\t\tif ($type.hasValue(registry.registeredClasses[classType])) {\r\n\t\t\tclassType = registry.registeredClasses[classType];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclassType = registry.registeredClasses[\"Container\"];\r\n\t\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, classType);\r\n\r\n\t// Error?\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart am4core.createFromConfig({ ... }, \"chartdiv\", am4charts.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart am4core.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param config       Config object in property/value pairs\r\n * @param htmlElement  Container reference or ID\r\n * @param objectType   Chart type\r\n * @return A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config: { [index: string]: any }, htmlElement?: string | HTMLElement, classType?: { new(): Sprite; } | string): Sprite {\r\n\r\n\t// Extract chart type from config if necessary\r\n\tif (!$type.hasValue(classType)) {\r\n\t\tclassType = config.type;\r\n\t\tdelete config.type;\r\n\t}\r\n\r\n\t// Extract element from config if necessary\r\n\tif (!$type.hasValue(htmlElement)) {\r\n\t\thtmlElement = config.container;\r\n\t\tdelete config.container;\r\n\t}\r\n\r\n\t// Check if we need to extract actual type reference\r\n\tlet finalType;\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType) && $type.hasValue(registry.registeredClasses[classType])) {\r\n\t\tfinalType = registry.registeredClasses[classType];\r\n\t}\r\n\telse if (typeof classType !== \"function\") {\r\n\t\tfinalType = Container;\r\n\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t}\r\n\telse {\r\n\t\tfinalType = classType;\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, finalType);\r\n\r\n\t// Set config\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\telse {\r\n\t\tchart.config = config;\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * Useful in creating real queues form mult-chart creation.\r\n *\r\n * Accepts a reference to a function which crates and returns actual chart\r\n * object.\r\n *\r\n * It returns a `Promise` which you can use to catch chart instance once it's\r\n * created.\r\n *\r\n * ```TypeScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   let chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   let chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * am4core.createDeferred(function(div) {\r\n *   // Create first chart\r\n *   var chart = am4core.create(div, am4charts.XYChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv1\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n *\r\n * am4core.createDeferred(function(div) {\r\n *   // Create second chart\r\n *   var chart = am4core.create(div, am4charts.PieChart);\r\n *   // ...\r\n *   return chart;\r\n * }, \"chartdiv2\").then(chart) {\r\n *   // `chart` variable holds an instance of the chart\r\n *   console.log(\"Chart ready\", chart);\r\n * }\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n * @since 4.10.0\r\n * @param  callback  Callback function that creates chart\r\n * @param  scope     Scope to call callback in\r\n * @param  ...rest   Parameters to pass into callback\r\n * @return           Promise with chart instance\r\n */\r\nexport function createDeferred(callback: (...args: Array<any>) => Sprite, scope?: any, ...rest: Array<any>): Promise<Sprite> {\r\n\treturn new Promise<Sprite>((resolve, reject) => {\r\n\t\tregistry.deferred.push({\r\n\t\t\tscope: scope,\r\n\t\t\tcallback: callback,\r\n\t\t\targs: rest,\r\n\t\t\tresolve: resolve\r\n\t\t});\r\n\t\tif (registry.deferred.length == 1) {\r\n\t\t\tprocessNextDeferred();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction processNextDeferred(): void {\r\n\tlet next = registry.deferred[0];\r\n\tif (next) {\r\n\t\tlet sprite = next.callback.call(next.scope, ...next.args);\r\n\t\tsprite.events.on(\"ready\", () => {\r\n\t\t\tnext.resolve(sprite);\r\n\t\t\tregistry.deferred.shift();\r\n\t\t\tif (options.deferredDelay) {\r\n\t\t\t\tsetTimeout(processNextDeferred, options.deferredDelay);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprocessNextDeferred();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function useTheme(value: ITheme): void {\r\n\tif (registry.themes.indexOf(value) === -1) {\r\n\t\tregistry.themes.push(value);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function unuseTheme(value: ITheme): void {\r\n\t$array.remove(registry.themes, value);\r\n}\r\n\r\n/**\r\n * Removes all \"active\" themes. Any charts created subsequently will not have\r\n * any theme applied to them.\r\n */\r\nexport function unuseAllThemes(): void {\r\n\tregistry.themes = [];\r\n}\r\n\r\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @since 4.5.16\r\n * @param  license  License key\r\n */\r\nexport function addLicense(license: string): void {\r\n\toptions.licenses.push(license);\r\n}\r\n"],"names":["_super","_this","className","element","paper","add","applyTheme","__extends","Ellipse","draw","this","attr","radius","radiusY","Object","innerHeight","value","height","invalidate","innerWidth","width","Circle","registry","Image","href","$type","widthRatio","heightRatio","attrNS","$dom","getPropertyValue","setPropertyValue","x","y","pixelWidth","pixelHeight","Sprite","setPercentProperty","strokeOpacity","slice","createChild","isMeasured","_disposers","push","Slice","path","$path","startAngle","arc","pixelInnerRadius","cornerRadius","innerCornerRadius","shiftRadius","realFill","RadialGradient","updateGradient","realStroke","gradient","cx","cy","definedBBox","innerRect","$math","outerRect","$utils","innerRadius","dx","ix","dy","iy","middleAngle","p","Percent","Container","percent","interfaceColors","InterfaceColorSet","sliceContainer","shouldClone","backgroundSlice","fill","getFor","fillOpacity","progressSlice","label","Label","horizontalCenter","verticalCenter","align","valign","textAlign","background","opacity","contentAlign","contentValign","delay","states","create","properties","visible","hide","__disabled","Preloader","validateLayout","text","Math","round","_started","undefined","animation","isFinished","events","once","interactionsEnabled","Date","getTime","show","padding","showSystemTooltip","cursorOverStyle","MouseCursorStyle","bgc","stroke","strokeWidth","downColor","bhs","getKey","bds","icon","CloseButton","validate","w","h","invalidateLayout","applyInternalDefaults","readerTitle","language","translate","Button","tooltipY","layout","setStateOnChildren","leftLabel","isActive","button","circle","p100","marginLeft","marginRight","togglable","as","switchButton","on","rightLabel","role","focusable","SwitchButton","_leftLabel","removeDispose","parent","_rightLabel","_switchButton","source","copyFrom","thumb","endGrip","startGrip","Slider","_start","position","_isBusy","__start","Scrollbar","selectable","brighten","TextLink","topSide","bottomSide","leftSide","rightSide","Trapezoid","ts","bs","ls","rs","x0","y0","x1","y1","x2","y2","x3","y3","mt","mr","mb","ml","horizontalNeck","hn","max","min","verticalNeck","vn","waveLength","waveHeight","tension","WavedCircle","pixelRadius","points","getPoints","$smoothing","smooth","reverse","circleLength","PI","halfWaveHeight","halfWaveLength","count","i","angle1","angle2","pop","pixelPerfect","ZoomOutButton","playIcon","Triangle","direction","stopIcon","RoundedRectangle","activeState","transitionDuration","defaultState","PlayButton","ColorModifier","BaseObject","lightnesses","brightnesses","opacities","offsets","GradientModifier","_lightnesses","_brightnesses","_opacities","_offsets","clear","length","lightness","brightness","color","lighten","offset","addColor","LinearGradient","LinearGradientModifier","clone","angle","topRadius","top","bottom","body","setElement","bodyFillModifier","fillModifier","Cone","$object","visualProperties","radiusBase","orientation","rotation","feColorMatrix","filterPrimitives","LightenFilter","v","Filter","depth","sideBack","sideBottom","sideLeft","sideRight","sideTop","sideFront","Rectangle3D","sin","cos","a","b","c","d","ah","bh","ch","dh","colorStr","setFill","toColor","Color","hex","stops","getIndex","filter","filters","filter2","filter3","filter4","filter5","edge","toBack","sideA","sideB","Slice3D","edgeFill","endAngle","innerRadiusY","a0","b0","c0","d0","edgePath","ceil","step","mangle","prevPoint","pp","toFront","RadialGradientModifier","_line","addElement","LinePattern","gap","Pattern","_circle","shapeRendering","CirclePattern","rectHeight","rectWidth","_rect","RectPattern","intensity","ColorizeFilter","r","g","ii","rgb","applyFilter","saturation","DesaturateFilter","toString","feGaussianBlur","blur","BlurFilter","scale","feFlood","feMorphology","feComposite","feBlend","FocusFilter","_sprite","group","removeStyle","addStyle","setSprite","list","getLinePattern","getRectPattern","getCirclePattern","sqrt","baseColor","PatternSet","size","thickness","strokeDashArray","pattern","strokeDasharray","outline","_list","reset","currentStep","_currentStep","generatePatterns","_currentPass","_startIndex","config","processConfig","_disposed","Plugin","shift","dispose","url","urlTarget","aColor","alternative","aGradient","aStroke","m","Polyspline","segments","tensionX","tensionY","desaturateFilter","desaturateFilterHover","hoverState","htmlElement","classType","htmlContainer","tmpContainer","document","createElement","style","left","visibility","appendChild","innerHTML","svgDiv_1","SVGContainer","Paper","svgContainers","container_1","svgContainer","append","moveHtmlContainer","relativeWidth","relativeHeight","container","sprite_1","topParent","uid","baseId","isBaseSprite","focusFilter","maskRectangle","event","previousWidth","previousHeight","deepInvalidate","loopTimer_1","loop_1","isDisposed","dom","options","$log","window","setTimeout","addDisposer","Disposer","clearTimeout","$array","tooltipContainer_1","tooltipContainer","tooltip","Tooltip","setBounds","maxWidth","maxHeight","preloader_1","preloader","hasLicense","logo_1","AmChartsLogo","ev","isHidden","isHiding","logo","numberFormatter","isStandaloneInstance","addToQueue","disposers","viewPortHandler","targets","target","disposer","MultiDisposer","vpDisposer","system","Error","disposeAllCharts","sprite","disableType","queueHandler","removeFromQueue","index","nextSprite","enableType","dispatch","showOnInit","invalidateLabels","Component","invalidateData","reinit","appear","classError","chart","raiseCriticalError","createFromConfig","finalType","type","createDeferred","callback","scope","_i","rest","Promise","resolve","reject","args","processNextDeferred","next","sprite_2","call","useTheme","unuseTheme","unuseAllThemes","addLicense","license"],"sourceRoot":""}