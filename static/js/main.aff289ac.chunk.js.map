{"version":3,"sources":["pages/MainPage.js","redux/actions/getHistory.js","constants/ActionType.js","components/MobileNav.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["InfoPage","lazy","MainPage","className","fallback","Switch","Route","exact","path","Component","GetHistoryInfo","state","isLoading","errMess","data","action","type","payload","next","MobileNav","id","href","store","createStore","combineReducers","HistoryInfo","applyMiddleware","logger","thunk","App","BrowserRouter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAGMA,EAAWC,gBAAK,kBAAM,wDAsBbC,E,iLAlBP,OACQ,0BAAMC,UAAU,QACZ,kBAAC,WAAD,CAAUC,SACN,0GAIA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAACR,EAAD,c,GAXTS,a,gDCHVC,EAAiB,WAIf,IAJgBC,EAIjB,uDAJyB,CACnCC,WAAW,EACXC,QAAS,KACTC,KAAM,IACPC,EAAW,uCACV,OAAQA,EAAOC,MACX,ICEsB,iBDDlB,MAAO,CAACJ,WAAW,EAAMC,QAAS,KAAMC,KAAM,IAClD,ICCuB,kBDAnB,OAAO,eAAIH,EAAX,CAAkBC,WAAW,EAAOC,QAASE,EAAOE,QAASH,KAAM,KACvE,ICAuB,kBDCnB,OAAO,eAAIH,EAAX,CAAkBC,WAAW,EAAOC,QAAS,KAAMK,KAAM,EAAGJ,KAAK,eAAKC,EAAOE,WACjF,QACI,OAAON,IEMJQ,MAnBf,WACI,OACI,yBAAKhB,UAAU,cACX,4BAAQA,UAAU,+BAA8B,uBAAGA,UAAU,qBAC7D,yBAAKA,UAAU,oBACX,yBAAKiB,GAAG,aAAajB,UAAU,OAC3B,wBAAIA,UAAU,YACV,4BAAI,uBAAGkB,KAAK,oBAAR,UACJ,4BAAI,uBAAGA,KAAK,wBAAR,cACJ,4BAAI,uBAAGA,KAAK,yBAAR,gBACJ,4BAAI,uBAAGA,KAAK,8BAAR,WACJ,4BAAI,uBAAGA,KAAK,4BAAR,gBAAgD,sCCLtEC,G,MCFYC,YACVC,YAAgB,CACZC,YAAaf,IAEjBgB,YAAgBC,KAChBD,YAAgBE,ODcTC,E,iLAbP,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAACQ,EAAA,EAAD,KACI,kBAAC,EAAD,a,GAPNrB,aEEEsB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2HxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.aff289ac.chunk.js","sourcesContent":["import React, {Component, lazy, Suspense} from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\nconst InfoPage = lazy(() => import(\"./InfoPage/InfoPage\"));\r\n\r\nclass MainPage extends Component {\r\n    render() {\r\n        return (\r\n                <main className=\"main\">\r\n                    <Suspense fallback={\r\n                        <div>\r\n                            Đã có lỗi xảy ra vui lòng kiểm tra lại\r\n                        </div>\r\n                    }>\r\n                        <Switch>\r\n                            <Route exact path=\"/\">\r\n                                <InfoPage></InfoPage>\r\n                            </Route>\r\n                        </Switch>\r\n                    </Suspense>\r\n                </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage;","import {HISTORY_FAILED, HISTORY_LOADING, HISTORY_SUCCESS} from '../../constants/ActionType'\r\n\r\nexport const GetHistoryInfo = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    data: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case HISTORY_FAILED:\r\n            return {isLoading: true, errMess: null, data: []};\r\n        case HISTORY_LOADING:\r\n            return {...state, isLoading: false, errMess: action.payload, data: []};\r\n        case HISTORY_SUCCESS:\r\n            return {...state, isLoading: false, errMess: null, next: 0, data: {...action.payload}};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\r\nexport const ADD_PRODUCT = 'ADD_PRODUCT';\r\nexport const UPDATE_PRODUCT = 'UPDATE_PRODUCT';\r\nexport const DELETE_PRODUCT = 'DELETE_PRODUCT';\r\nexport const EDIT_PRODUCT = 'EDIT_PRODUCT';\r\n\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\n\r\nexport const HISTORY_FAILED = 'HISTORY_FAILED';\r\nexport const HISTORY_LOADING = 'HISTORY_LOADING';\r\nexport const HISTORY_SUCCESS = 'HISTORY_SUCCESS';\r\n","import React from 'react';\r\n\r\nfunction MobileNav() {\r\n    return (\r\n        <div className=\"mobile-nav\">\r\n            <button className=\"btn-mobile mobile-nav-close\"><i className=\"icon icon-close\"></i></button>\r\n            <div className=\"mobile-nav-inner\">\r\n                <nav id=\"mobile-nav\" className=\"nav\">\r\n                    <ul className=\"clearfix\">\r\n                        <li><a href=\"index.html#about\">About</a></li>\r\n                        <li><a href=\"index.html#education\">Education</a></li>\r\n                        <li><a href=\"index.html#experience\">Experiences</a></li>\r\n                        <li><a href=\"index.html#accomplishments\">Awards</a></li>\r\n                        <li><a href=\"index.html#miscellaneous\">Miscellaneous<span></span></a></li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MobileNav;\r\n","import React, {Component} from 'react'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport Main from './pages/MainPage'\r\nimport {Provider} from 'react-redux'\r\nimport {ConfigureStore} from './redux/configureStore'\r\nimport MobileNav from \"./components/MobileNav\";\r\nimport './App.css';\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <MobileNav></MobileNav>\r\n                <Provider store={store}>\r\n                    <BrowserRouter>\r\n                        <Main/>\r\n                    </BrowserRouter>\r\n                </Provider>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { GetHistoryInfo } from './actions/getHistory'\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            HistoryInfo: GetHistoryInfo,\r\n        }),\r\n        applyMiddleware(logger),\r\n        applyMiddleware(thunk),\r\n    );\r\n\r\n    return store;\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}