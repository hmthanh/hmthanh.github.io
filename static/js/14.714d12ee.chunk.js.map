{"version":3,"sources":["../../../src/.internal/core/elements/Ellipse.ts","../../../src/.internal/core/elements/Image.ts","../../../src/.internal/core/elements/Slice.ts","../../../src/.internal/core/elements/Preloader.ts","../../../src/.internal/core/elements/CloseButton.ts","../../../src/.internal/core/elements/SwitchButton.ts","../../../src/.internal/core/elements/Slider.ts","../../../src/.internal/core/elements/TextLink.ts","../../../src/.internal/core/elements/Trapezoid.ts","../../../src/.internal/core/elements/WavedCircle.ts","../../../src/.internal/core/elements/ZoomOutButton.ts","../../../src/.internal/core/elements/PlayButton.ts","../../../src/.internal/core/rendering/fills/ColorModifier.ts","../../../src/.internal/core/rendering/fills/GradientModifier.ts","../../../src/.internal/core/rendering/fills/LinearGradientModifier.ts","../../../src/.internal/core/elements/3d/Cone.ts","../../../src/.internal/core/rendering/filters/LightenFilter.ts","../../../src/.internal/core/elements/3d/Rectangle3D.ts","../../../src/.internal/core/elements/3d/Slice3D.ts","../../../src/.internal/core/rendering/fills/RadialGradientModifier.ts","../../../src/.internal/core/rendering/fills/LinePattern.ts","../../../src/.internal/core/rendering/fills/CirclePattern.ts","../../../src/.internal/core/rendering/fills/RectPattern.ts","../../../src/.internal/core/rendering/filters/ColorizeFilter.ts","../../../src/.internal/core/rendering/filters/DesaturateFilter.ts","../../../src/.internal/core/rendering/filters/BlurFilter.ts","../../../src/.internal/core/rendering/filters/FocusFilter.ts","../../../src/.internal/core/utils/PatternSet.ts","../../../src/.internal/core/utils/Plugin.ts","../../../src/.internal/core/elements/AmChartsLogo.ts","../../../src/.internal/core/utils/Instance.ts","../../../src/core.ts"],"names":["className","element","paper","add","applyTheme","draw","this","attr","radius","radiusY","innerHeight","value","height","invalidate","innerWidth","width","Circle","registeredClasses","href","widthRatio","heightRatio","attrNS","getPropertyValue","setPropertyValue","x","y","pixelWidth","pixelHeight","Sprite","setPercentProperty","strokeOpacity","slice","createChild","isMeasured","_disposers","push","path","startAngle","arc","pixelInnerRadius","cornerRadius","innerCornerRadius","shiftRadius","realFill","RadialGradient","updateGradient","realStroke","gradient","cx","cy","definedBBox","innerRect","outerRect","innerRadius","dx","ix","dy","iy","middleAngle","getTooltipX","p","Percent","getTooltipY","Container","interfaceColors","InterfaceColorSet","sliceContainer","shouldClone","backgroundSlice","fill","getFor","fillOpacity","progressSlice","label","Label","horizontalCenter","verticalCenter","align","valign","background","opacity","contentAlign","contentValign","delay","states","create","properties","visible","hide","__disabled","validateLayout","text","Math","round","_started","undefined","events","once","animation","isFinished","interactionsEnabled","Date","getTime","show","padding","showSystemTooltip","cursorOverStyle","Mouse","pointer","bgc","stroke","strokeWidth","downColor","bhs","getKey","bds","icon","validate","w","h","invalidateLayout","applyInternalDefaults","readerTitle","language","translate","Button","tooltipY","layout","leftLabel","isActive","button","circle","p100","marginLeft","marginRight","togglable","as","switchButton","on","rightLabel","role","focusable","_leftLabel","removeDispose","parent","_rightLabel","_switchButton","copyFrom","source","thumb","endGrip","startGrip","_start","position","_isBusy","__start","Scrollbar","selectable","brighten","topSide","bottomSide","leftSide","rightSide","ts","bs","ls","rs","x0","y0","x1","y1","x2","y2","x3","y3","mt","mr","mb","ml","horizontalNeck","hn","max","min","verticalNeck","vn","waveLength","waveHeight","tension","pixelRadius","points","getPoints","smooth","reverse","circleLength","PI","halfWaveHeight","halfWaveLength","count","i","angle1","angle2","pop","pixelPerfect","playIcon","Triangle","direction","stopIcon","RoundedRectangle","activeState","transitionDuration","defaultState","modify","Base","lightnesses","brightnesses","opacities","offsets","_lightnesses","_brightnesses","_opacities","_offsets","clear","length","lightness","brightness","color","lighten","offset","addColor","LinearGradient","clone","angle","topRadius","top","bottom","body","setElement","bodyFillModifier","fillModifier","radiusBase","orientation","rotation","feColorMatrix","filterPrimitives","v","Filter","depth","sideBack","sideBottom","sideLeft","sideRight","sideTop","sideFront","sin","cos","a","b","c","d","ah","bh","ch","dh","setFill","colorStr","Color","hex","stops","getIndex","filter","filters","filter2","filter3","filter4","filter5","edge","toBack","sideA","sideB","edgeFill","endAngle","innerRadiusY","a0","b0","c0","d0","edgePath","ceil","step","mangle","prevPoint","pp","toFront","_line","addElement","gap","Pattern","_circle","shapeRendering","rectHeight","rectWidth","_rect","intensity","applyFilter","r","g","ii","rgb","saturation","toString","feGaussianBlur","blur","scale","feFlood","feMorphology","feComposite","feBlend","setSprite","_sprite","group","removeStyle","addStyle","_list","_currentStep","_startIndex","_currentPass","baseColor","list","getLinePattern","getRectPattern","getCirclePattern","sqrt","size","thickness","strokeDashArray","pattern","strokeDasharray","outline","reset","next","currentStep","generatePatterns","processConfig","config","_disposed","init","isDisposed","dispose","shift","url","urlTarget","aColor","alternative","aGradient","aStroke","m","Polyspline","segments","tensionX","tensionY","desaturateFilter","desaturateFilterHover","hoverState","htmlElement","classType","htmlContainer","innerHTML","SVGContainer","Paper","svgContainer","append","relativeWidth","relativeHeight","container","topParent","uid","invalidSprites","invalidDatas","invalidPositions","invalidLayouts","baseId","isBaseSprite","focusFilter","baseSprites","baseSpritesByUid","maskRectangle","event","previousWidth","previousHeight","deepInvalidate","dom","window","setTimeout","addDisposer","Disposer","clearTimeout","tooltipContainer","tooltip","Tooltip","setBounds","maxWidth","maxHeight","preloader","hasLicense","ev","isHidden","isHiding","logo","numberFormatter","isStandaloneInstance","onlyShowOnViewport","viewportTarget","queue","addToQueue","disposers","viewPortHandler","disposer","vpDisposer","log","Error","disposeAllCharts","sprite","indexOf","disableType","queueHandler","removeFromQueue","index","splice","nextSprite","enableType","showOnInit","Component","invalidateData","reinit","appear","classError","chart","raiseCriticalError","createFromConfig","finalType","type","useTheme","themes","unuseTheme","unuseAllThemes","addLicense","license","licenses"],"mappings":"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","file":"static/js/14.714d12ee.chunk.js","sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Ellipse]].\r\n */\r\nexport interface IEllipseProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Ellipse]].\r\n */\r\nexport interface IEllipseEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IEllipseAdapters extends ICircleAdapters, IEllipseProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nexport class Ellipse extends Circle {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IEllipseProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IEllipseAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IEllipseEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Ellipse\";\r\n\r\n\t\tthis.element = this.paper.add(\"ellipse\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the ellipsis.\r\n\t */\r\n\tprotected draw() {\r\n\t\tsuper.draw();\r\n\t\tthis.element.attr({ \"rx\": this.radius });\r\n\t\tthis.element.attr({ \"ry\": this.radiusY });\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius.\r\n\t *\r\n\t * It's a relative size to the `radius`.\r\n\t *\r\n\t * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n\t * horizontal radius.\r\n\t *\r\n\t * @param value  Vertical radius\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.height = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\treturn this.innerHeight / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal radius.\r\n\t *\r\n\t * @param value  Horizontal radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.width = value * 2;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.innerWidth / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n","/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Image]].\r\n */\r\nexport interface IImageProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * A URI of the image.\r\n\t */\r\n\thref?: string;\r\n\r\n\t/**\r\n\t * Sets image `width` in relation to its `height`.\r\n\t */\r\n\twidthRatio?: number;\r\n\r\n\t/**\r\n\t * Sets image `height` in relation to its `width`.\r\n\t */\r\n\theightRatio?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Image]].\r\n */\r\nexport interface IImageEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Image]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IImageAdapters extends ISpriteAdapters, IImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nexport class Image extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IImageEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Image\";\r\n\t\tthis.element = this.paper.add(\"image\");\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.width = 50;\r\n\t\tthis.height = 50;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws an `<image>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.href) {\r\n\r\n\t\t\tlet width = this.innerWidth;\r\n\t\t\tlet height = this.innerHeight;\r\n\r\n\t\t\tif ($type.isNumber(this.widthRatio)) {\r\n\t\t\t\twidth = height * this.widthRatio;\r\n\t\t\t\tthis.width = width;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this.heightRatio)) {\r\n\t\t\t\theight = width * this.heightRatio;\r\n\t\t\t\tthis.height = height;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.element.attr({\r\n\t\t\t\t\"width\": width,\r\n\t\t\t\t\"height\": height\r\n\t\t\t});\r\n\t\t\tthis.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An image URI.\r\n\t *\r\n\t * @param value  Image URI\r\n\t */\r\n\tpublic set href(value: string) {\r\n\t\tthis.setPropertyValue(\"href\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image URI\r\n\t */\r\n\tpublic get href(): string {\r\n\t\treturn this.getPropertyValue(\"href\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `width` relatively to its `height`.\r\n\t *\r\n\t * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set widthRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"widthRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get widthRatio(): number {\r\n\t\treturn this.getPropertyValue(\"widthRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets image `height` relatively to its `width`.\r\n\t *\r\n\t * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n\t * `50`.\r\n\t *\r\n\t * @param value  Ratio\r\n\t */\r\n\tpublic set heightRatio(value: number) {\r\n\t\tthis.setPropertyValue(\"heightRatio\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ratio\r\n\t */\r\n\tpublic get heightRatio(): number {\r\n\t\treturn this.getPropertyValue(\"heightRatio\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\treturn {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.pixelWidth,\r\n\t\t\theight: this.pixelHeight\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n","/**\r\n * Slice module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slice]].\r\n */\r\nexport interface ISliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t */\r\n\tradiusY?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices, in px or %\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n\r\n\t/**\r\n\t * [shiftRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tshiftRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tinnerCornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice]].\r\n */\r\nexport interface ISliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliceAdapters extends IContainerAdapters, ISliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nexport class Slice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t *\r\n\t * Slice itself is a [[Container]] so that [[Slice3D]] could extend it and\r\n\t * add 3D elements to it.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"cornerRadius\", 0);\r\n\t\tthis.setPropertyValue(\"startAngle\", 0);\r\n\t\tthis.setPercentProperty(\"innerRadius\", 0);\r\n\t\tthis.setPercentProperty(\"radius\", 0);\r\n\t\tthis.setPropertyValue(\"arc\", 0);\r\n\t\tthis.setPropertyValue(\"shiftRadius\", 0);\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"layout\", \"none\");\r\n\r\n\t\t// Create a slice wedge element\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis._disposers.push(this.slice);\r\n\r\n\t\t//this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n\t\t//this.element.attr({ \"stroke-linecap\": \"round\" });\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet radiusY = this.radiusY;\r\n\t\tif(this.radius > 0 && radiusY == 0){\r\n\t\t\tradiusY = 0.01;\r\n\t\t}\r\n\t\tthis.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n\t\tthis.slice.invalidate();\r\n\t\tthis.shiftRadius = this.shiftRadius;\r\n\r\n\t\tif (this.realFill instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realFill);\r\n\t\t}\r\n\t\tif (this.realStroke instanceof RadialGradient) {\r\n\t\t\tthis.updateGradient(this.realStroke);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateGradient(gradient: RadialGradient) {\r\n\t\tgradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n\t\tgradient.element.attr({ \"r\": this.radius });\r\n\t\tgradient.cx = 0;\r\n\t\tgradient.cy = 0;\r\n\t\tgradient.element.attr({ radius: this.radius });\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\tlet innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n\t\t\tlet outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n\t\t\treturn $math.getCommonRectangle([innerRect, outerRect]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The angle at which left edge of the slice is drawn. (0-360)\r\n\t *\r\n\t * 0 is to the right of the center.\r\n\t *\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the slice in pixels.\r\n\t *\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\tlet radius: number = this.getPropertyValue(\"radius\");\r\n\t\tif (!$type.isNumber(radius)) {\r\n\t\t\tradius = 0;\r\n\t\t}\r\n\t\treturn radius;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet value: number = this.getPropertyValue(\"radiusY\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radius;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the slice for creating cut out (donut) slices.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px or %)\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or %)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius px\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's outer corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of slice's inner corners in pixels.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Radius (px)\r\n\t */\r\n\tpublic set innerCornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerCornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get innerCornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerCornerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how far (relatively to center) a slice should be moved.\r\n\t *\r\n\t * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n\t * 1 - slice shifted outside by whole of its radius.\r\n\t *\r\n\t * @param  value  Radius shift\r\n\t */\r\n\tpublic set shiftRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"shiftRadius\", value);\r\n\t\tthis.dx = value * this.radius * this.ix;\r\n\t\tthis.dy = value * this.radiusY * this.iy;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius shift\r\n\t */\r\n\tpublic get shiftRadius(): number {\r\n\t\treturn this.getPropertyValue(\"shiftRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [ix description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get ix(): number {\r\n\t\treturn $math.cos(this.middleAngle);\r\n\t}\r\n\r\n\t/**\r\n\t * [iy description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get iy(): number {\r\n\t\tif (this.radius > 0) {\r\n\t\t\treturn $math.sin(this.middleAngle);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.sin(this.middleAngle);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of the slice's middle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle\r\n\t */\r\n\tpublic get middleAngle(): number {\r\n\t\treturn this.startAngle + this.arc / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif($type.isNumber(value)){\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tlet p = 0.5;\r\n\t\tif(value instanceof Percent){\r\n\t\t\tp = value.value;\r\n\t\t}\r\n\t\tlet innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n\t\treturn this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n","/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Preloader]].\r\n */\r\nexport interface IPreloaderProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t */\r\n\tprogress?: number;\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tdelay?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Preloader]].\r\n */\r\nexport interface IPreloaderEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Preloader]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPreloaderAdapters extends IContainerAdapters, IPreloaderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nexport class Preloader extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPreloaderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPreloaderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPreloaderEvents;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that indicates load progress.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic progressSlice: Slice;\r\n\r\n\t/**\r\n\t * A [[Slice]] element that shows the full ring. (background for the\r\n\t * `progressSlice`)\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic backgroundSlice: Slice;\r\n\r\n\t/**\r\n\t * Label that displays progress in percent.\r\n\t *\r\n\t * This can be used to modify appearance of the preloader elements.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Logs the timestamp of when the loader was initiated. It will be used to\r\n\t * delay showing of the Preloader so for quick operations it does not even\r\n\t * appear on screen.\r\n\t */\r\n\tprotected _started: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Preloader\";\r\n\r\n\t\t// Set dimensions\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create main container\r\n\t\tlet sliceContainer: Container = this.createChild(Container);\r\n\t\tsliceContainer.shouldClone = false;\r\n\r\n\t\t// Add background (100%) slice\r\n\t\tlet backgroundSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tbackgroundSlice.shouldClone = false;\r\n\t\tbackgroundSlice.radius = 53;\r\n\t\tbackgroundSlice.arc = 360;\r\n\t\tbackgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n\t\tbackgroundSlice.fillOpacity = 0.8;\r\n\t\tbackgroundSlice.innerRadius = 42;\r\n\t\tbackgroundSlice.isMeasured = false;\r\n\t\tthis.backgroundSlice = backgroundSlice;\r\n\r\n\t\t// Add progress slice\r\n\t\tlet progressSlice: Slice = sliceContainer.createChild(Slice);\r\n\t\tprogressSlice.shouldClone = false;\r\n\t\tprogressSlice.radius = 50;\r\n\t\tprogressSlice.innerRadius = 45;\r\n\t\tprogressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tprogressSlice.fillOpacity = 0.2;\r\n\t\tprogressSlice.isMeasured = false;\r\n\t\tthis.progressSlice = progressSlice;\r\n\r\n\t\t// Add text label element\r\n\t\tlet label: Label = sliceContainer.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.fill = interfaceColors.getFor(\"text\");\r\n\t\tlabel.align = \"center\";\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.fillOpacity = 0.4;\r\n\t\tthis.label = label;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.background.opacity = 1;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.delay = 300;\r\n\r\n\t\t// Create hidden state\r\n\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\thiddenState.properties.opacity = 0;\r\n\r\n\t\t// Hide by default\r\n\t\tthis.visible = false;\r\n\t\tthis.hide(0);\r\n\t\tthis.__disabled = true;\r\n\r\n\t\t// Make it disposable\r\n\t\t// @todo Maybe it's enough to just dispose `sliceContainer`?\r\n\t\tthis._disposers.push(this.backgroundSlice);\r\n\t\tthis._disposers.push(this.progressSlice);\r\n\t\tthis._disposers.push(this.label);\r\n\t\tthis._disposers.push(sliceContainer);\r\n\t}\r\n\r\n\t/**\r\n\t * Current preload progress. (0-1)\r\n\t *\r\n\t * * 0 - 0%\r\n\t * * 0.5 - 50%\r\n\t * * 1 - 100%\r\n\t *\r\n\t * Setting this to a value less than 1, will automatically reveal the\r\n\t * preloader, while setting it to 1 (100%) will hide it.\r\n\t *\r\n\t * @param value Progress (0-1)\r\n\t */\r\n\tpublic set progress(value: number) {\r\n\t\tthis.__disabled = false;\r\n\r\n\t\tthis.validateLayout(); // show not in center without this\r\n\r\n\t\tthis.setPropertyValue(\"progress\", value);\r\n\r\n\t\t/*if (!this.visible && value == 1) {\r\n\t\t\treturn;\r\n\t\t}*/\r\n\r\n\t\tthis.progressSlice.arc = 360 * value;\r\n\r\n\t\tif (this.label) {\r\n\t\t\tthis.label.text = Math.round(value * 100) + \"%\";\r\n\t\t}\r\n\r\n\t\tif (value >= 1) {\r\n\r\n\t\t\t// Cancel the timeout\r\n\t\t\tif (this._started) {\r\n\t\t\t\tthis._started = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// TODO remove closure ?\r\n\t\t\tregistry.events.once(\"enterframe\", () => {\r\n\t\t\t\tlet animation = this.hide();\r\n\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.interactionsEnabled = false;\r\n\t\t\tthis.setPropertyValue(\"progress\", 0);\r\n\t\t}\r\n\t\telse if (value > 0) {\r\n\t\t\tif (this.delay) {\r\n\t\t\t\tif (!this._started) {\r\n\t\t\t\t\tthis._started = new Date().getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse if ((this._started + this.delay) <= new Date().getTime()) {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t\tthis.show();\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Progress (0-1)\r\n\t */\r\n\tpublic get progress(): number {\r\n\t\treturn this.getPropertyValue(\"progress\");\r\n\t}\r\n\r\n\t/**\r\n\t * Delay display of preloader by X milliseconds.\r\n\t *\r\n\t * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n\t * set to 1) before `delay` ms, the loader is never shown.\r\n\t *\r\n\t * This is used to avoid brief flashing of the preload for very quick loads.\r\n\t *\r\n\t * @default 1000\r\n\t * @param value  Delay (ms)\r\n\t */\r\n\tpublic set delay(value: number) {\r\n\t\tthis.setPropertyValue(\"delay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay (ms)\r\n\t */\r\n\tpublic get delay(): number {\r\n\t\treturn this.getPropertyValue(\"delay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Preloader\"] = Preloader;\r\n","/**\r\n * Zoom out button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[CloseButton]].\r\n */\r\nexport interface ICloseButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CloseButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICloseButtonAdapters extends IButtonAdapters, ICloseButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link ICloseButtonEvents} for a list of available events\r\n * @see {@link ICloseButtonAdapters} for a list of available Adapters\r\n */\r\nexport class CloseButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICloseButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICloseButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICloseButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CloseButton\";\r\n\r\n\t\tthis.padding(8, 8, 8, 8);\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tthis.width = 30;\r\n\t\tthis.height = 30;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(20, 20, 20, 20);\r\n\r\n\t\tlet bgc = interfaceColors.getFor(\"background\");\r\n\t\tbackground.fill = bgc;\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.strokeOpacity = 1;\r\n\t\tbackground.strokeWidth = 1;\r\n\r\n\t\tlet downColor = interfaceColors.getFor(\"primaryButtonActive\")\r\n\r\n\t\tlet bhs =background.states.getKey(\"hover\");\r\n\t\tbhs.properties.strokeWidth = 3;\r\n\t\tbhs.properties.fill = bgc;\r\n\r\n\t\tlet bds = background.states.getKey(\"down\");\t\t\t\t\r\n\t\tbds.properties.stroke = downColor;\r\n\t\tbds.properties.fill = bgc;\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\t\ticon.stroke = background.stroke;\r\n\r\n\t\tthis.icon = icon;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet w = this.pixelWidth / 3;\r\n\t\tlet h = this.pixelHeight / 3;\r\n\r\n\t\tlet path = $path.moveTo({ x: -w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: w / 2, y: h / 2 });\r\n\t\tpath += $path.moveTo({ x: w / 2, y: -h / 2 });\r\n\t\tpath += $path.lineTo({ x: -w / 2, y: h / 2 });\r\n\t\tthis.icon.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Close\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CloseButton\"] = CloseButton;\r\n","/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n","/**\r\n * Slider is a scrollbar with just one selection grip.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Slider]].\r\n */\r\nexport interface ISliderProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[Slider]].\r\n */\r\nexport interface ISliderEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slider]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISliderAdapters extends IScrollbarAdapters, ISliderProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a slider - a version of scrollbar with just one grip.\r\n *\r\n * @see {@link ISliderEvents} for a list of available events\r\n * @see {@link ISliderAdapters} for a list of available Adapters\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISliderProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISliderAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISliderEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Slider\";\r\n\r\n\t\tthis.thumb.opacity = 0;\r\n\t\tthis.thumb.interactionsEnabled = false;\r\n\t\tthis.endGrip.opacity = 0;\r\n\t\tthis.endGrip.interactionsEnabled = false;\r\n\r\n\t\tthis.startGrip.events.on(\"drag\", () => {\r\n\t\t\tthis.endGrip.x = this.startGrip.x;\r\n\t\t\tthis.endGrip.y = this.startGrip.y;\r\n\t\t})\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tprotected get __end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\tprotected set __end(value: number) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get end(): number {\r\n\t\treturn this._start;\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the end grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set end(position: number) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Relative position (0-1) of the start grip.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t */\r\n\tpublic set start(position: number) {\r\n\t\tif (!this._isBusy) {\r\n\t\t\tthis.__start = position;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\treturn this._start;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slider\"] = Slider;\r\n","/**\r\n * A module that defines Text element used to indicate links.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[TextLink]].\r\n */\r\nexport interface ITextLinkProperties extends ILabelProperties { }\r\n\r\n/**\r\n * Defines events for [[TextLink]].\r\n */\r\nexport interface ITextLinkEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TextLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITextLinkAdapters extends ILabelAdapters, ITextLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a text element with a link.\r\n *\r\n * @see {@link ITextLinkEvents} for a list of available events\r\n * @see {@link ITextLinkAdapters} for a list of available Adapters\r\n */\r\nexport class TextLink extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITextLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITextLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITextLinkEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TextLink\";\r\n\t\tthis.selectable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"primaryButton\").brighten(0.3);\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.fill = interfaceColors.getFor(\"primaryButtonHover\").brighten(0.3);\r\n\r\n\t\tlet downState = this.states.create(\"down\");\r\n\t\tdownState.properties.fill = interfaceColors.getFor(\"primaryButtonDown\").brighten(0.3);\r\n\r\n\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextLink\"] = TextLink;\r\n","/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\ttopSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tbottomSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tleftSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\trightSide?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\thorizontalNeck?: Percent;\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\tverticalNeck?: Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Trapezoid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITrapezoidAdapters extends ISpriteAdapters, ITrapezoidProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nexport class Trapezoid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITrapezoidProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITrapezoidAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITrapezoidEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Trapezoid\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.topSide = percent(100);\r\n\t\tthis.bottomSide = percent(100);\r\n\t\tthis.leftSide = percent(100);\r\n\t\tthis.rightSide = percent(100);\r\n\r\n\t\tthis.isMeasured = false; // todo: add measureElement\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet ts: number = $utils.relativeToValue(this.topSide, w);\r\n\t\tlet bs: number = $utils.relativeToValue(this.bottomSide, w);\r\n\t\tlet ls: number = $utils.relativeToValue(this.leftSide, h);\r\n\t\tlet rs: number = $utils.relativeToValue(this.rightSide, h);\r\n\r\n\t\t// 1----2\r\n\t\t// |    |\r\n\t\t// 4----3\r\n\r\n\t\tlet x0: number = (w - ts) / 2;\r\n\t\tlet y0: number = (h - ls) / 2;\r\n\r\n\t\tlet x1: number = w - (w - ts) / 2;\r\n\t\tlet y1: number = (h - rs) / 2;\r\n\r\n\t\tlet x2: number = w - (w - bs) / 2;\r\n\t\tlet y2: number = h - (h - rs) / 2;\r\n\r\n\t\tlet x3: number = (w - bs) / 2;\r\n\t\tlet y3: number = h - (h - ls) / 2;\r\n\r\n\t\tlet mt: string = \"\";\r\n\t\tlet mr: string = \"\";\r\n\t\tlet mb: string = \"\";\r\n\t\tlet ml: string = \"\";\r\n\r\n\t\tif ($type.hasValue(this.horizontalNeck)) {\r\n\t\t\tlet hn: number = this.horizontalNeck.value;\r\n\t\t\tmt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n\t\t\tmb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.verticalNeck)) {\r\n\t\t\tlet vn: number = this.verticalNeck.value;\r\n\t\t\tmr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n\t\t\tml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n\t\t}\r\n\r\n\r\n\t\tlet path: string = $path.moveTo({ x: x0, y: y0 })\r\n\t\t\t+ mt\r\n\t\t\t+ $path.lineTo({ x: x1, y: y1 })\r\n\t\t\t+ mr\r\n\t\t\t+ $path.lineTo({ x: x2, y: y2 })\r\n\t\t\t+ mb\r\n\t\t\t+ $path.lineTo({ x: x3, y: y3 })\r\n\t\t\t+ ml\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set topSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get topSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set bottomSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get bottomSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set leftSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get leftSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"leftSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set rightSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get rightSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"rightSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Horizontal neck position\r\n\t */\r\n\tpublic set horizontalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"horizontalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal neck position\r\n\t */\r\n\tpublic get horizontalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"horizontalNeck\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Vertical neck position\r\n\t */\r\n\tpublic set verticalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"verticalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical neck position\r\n\t */\r\n\tpublic get verticalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"verticalNeck\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n","/**\r\n * Functionality for drawing waved circles.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle, ICircleProperties, ICircleAdapters, ICircleEvents } from \"./Circle\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleProperties extends ICircleProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedCircle]].\r\n */\r\nexport interface IWavedCircleEvents extends ICircleEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedCircle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedCircleAdapters extends ICircleAdapters, IWavedCircleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nexport class WavedCircle extends Circle implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedCircleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedCircleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedCircleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedCircle\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\r\n\t\tthis.fill = undefined;\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.tension = 0.8;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tlet path: string = \"\";\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\r\n\t\tif (radius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(radius);\r\n\t\t\tpath = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\t\tif (innerRadius > 0) {\r\n\t\t\tlet points: IPoint[] = this.getPoints(innerRadius);\r\n\t\t\tpoints.reverse();\r\n\t\t\tpath += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n\t\t}\r\n\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns points that circle consists of.\r\n\t *\r\n\t * @param radius  Radius (px)\r\n\t * @return Points\r\n\t */\r\n\tprotected getPoints(radius: number): IPoint[] {\r\n\t\tlet circleLength: number = radius * Math.PI * 2;\r\n\t\tlet halfWaveHeight: number = this.waveHeight / 2;\r\n\r\n\t\tlet waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n\t\tlet halfWaveLength: number = waveLength / 2;\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet count = circleLength / waveLength;\r\n\t\tfor (let i = 0; i <= count; i++) {\r\n\t\t\tlet angle1: number = (i * waveLength) / circleLength * 360;\r\n\t\t\tlet angle2: number = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n\r\n\t\t\tpoints.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n\t\t\tpoints.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n\t\t}\r\n\t\tpoints.pop();\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated inner radius of the circle in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n","/**\r\n * Zoom out button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomOutButton]].\r\n */\r\nexport interface IZoomOutButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomOutButton]].\r\n */\r\nexport interface IZoomOutButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomOutButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomOutButtonAdapters extends IButtonAdapters, IZoomOutButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IZoomOutButtonEvents} for a list of available events\r\n * @see {@link IZoomOutButtonAdapters} for a list of available Adapters\r\n */\r\nexport class ZoomOutButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomOutButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomOutButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomOutButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ZoomOutButton\";\r\n\r\n\t\tthis.padding(9, 9, 9, 9);\r\n\t\t//this.dx = - 5;\r\n\t\t//this.dy = 5;\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(20, 20, 20, 20);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 11, y: 0 });\r\n\t\ticon.path = path;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(8, 3, 8, 3);\r\n\t\ticon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tthis.icon = icon;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Zoom Out\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomOutButton\"] = ZoomOutButton;\r\n","/**\r\n * Play button functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonProperties extends IButtonProperties { }\r\n\r\n/**\r\n * Defines events for [[PlayButton]].\r\n */\r\nexport interface IPlayButtonEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PlayButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPlayButtonAdapters extends IButtonAdapters, IPlayButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nexport class PlayButton extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPlayButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPlayButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPlayButtonEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PlayButton\";\r\n\r\n\t\tthis.padding(12, 12, 12, 12);\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet background: RoundedRectangle = this.background;\r\n\t\tbackground.cornerRadius(25, 25, 25, 25);\r\n\t\tbackground.fill = interfaceColors.getFor(\"primaryButton\");\r\n\t\tbackground.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n\t\tbackground.strokeOpacity = 0;\r\n\r\n\t\tbackground.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\t\tbackground.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\r\n\t\t// Create a play icon\r\n\t\tlet playIcon: Triangle = new Triangle();\r\n\t\tplayIcon.direction = \"right\";\r\n\t\tplayIcon.width = 9;\r\n\t\tplayIcon.height = 11;\r\n\t\tplayIcon.marginLeft = 1;\r\n\t\tplayIcon.marginRight = 1;\r\n\t\tplayIcon.horizontalCenter = \"middle\";\r\n\t\tplayIcon.verticalCenter = \"middle\";\r\n\r\n\t\tplayIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tplayIcon.fill = playIcon.stroke;\r\n\t\tthis.icon = playIcon;\r\n\r\n\t\t// Create a play icon\r\n\t\tlet stopIcon: RoundedRectangle = new RoundedRectangle();\r\n\t\tstopIcon.width = 11;\r\n\t\tstopIcon.height = 11;\r\n\t\tstopIcon.horizontalCenter = \"middle\";\r\n\t\tstopIcon.verticalCenter = \"middle\";\r\n\t\tstopIcon.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tstopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n\t\tstopIcon.fill = playIcon.stroke;\r\n\r\n\t\tthis.togglable = true;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.transitionDuration = 0;\r\n\t\tactiveState.properties.icon = stopIcon;\r\n\r\n\t\tthis.defaultState.transitionDuration = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Play\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for color modifiers.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class ColorModifier extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies color value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Original color\r\n\t * @return Modified\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorModifier\"] = ColorModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class GradientModifier extends ColorModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t */\r\n\tprotected _lightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t */\r\n\tprotected _brightnesses!: number[];\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t */\r\n\tprotected _opacities!: number[];\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t */\r\n\tprotected _offsets!: number[];\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.lightnesses = [];\r\n\t\tthis.brightnesses = [];\r\n\t\tthis.opacities = [];\r\n\t\tthis.offsets = [];\r\n\t\tthis.className = \"GradientModifier\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * An array of lightness values for each step.\r\n\t *\r\n\t * @param value  Lightness values\r\n\t */\r\n\tpublic set lightnesses(value: number[]) {\r\n\t\tthis._lightnesses = value;\r\n\t\tthis._brightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness values\r\n\t */\r\n\tpublic get lightnesses(): number[] {\r\n\t\treturn this._lightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of brightness values for each step.\r\n\t *\r\n\t * @param value  Brightness values\r\n\t */\r\n\tpublic set brightnesses(value: number[]) {\r\n\t\tthis._brightnesses = value;\r\n\t\tthis._lightnesses = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Brightness values\r\n\t */\r\n\tpublic get brightnesses(): number[] {\r\n\t\treturn this._brightnesses;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of opacity values for each step.\r\n\t *\r\n\t * @param value  Opacity values\r\n\t */\r\n\tpublic set opacities(value: number[]) {\r\n\t\tthis._opacities = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity values\r\n\t */\r\n\tpublic get opacities(): number[] {\r\n\t\treturn this._opacities;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of relative position (0-1) for each step.\r\n\t *\r\n\t * If not set, all steps will be of equal relative length.\r\n\t *\r\n\t * @param value  Offsets\r\n\t */\r\n\tpublic set offsets(value: number[]) {\r\n\t\tthis._offsets = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Offsets\r\n\t */\r\n\tpublic get offsets(): number[] {\r\n\t\treturn this._offsets;\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies the color based on step setting.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Source color\r\n\t * @return A gradient that matches set modification rules\r\n\t */\r\n\tpublic modify(value: Color): Color | LinearGradient | RadialGradient {\r\n\r\n\t\t// Clear current gradient\r\n\t\tthis.gradient.clear();\r\n\r\n\t\t// Get step count\r\n\t\tlet count: number = 0;\r\n\t\tif (this.opacities) {\r\n\t\t\tcount = $math.max(count, this.opacities.length);\r\n\t\t}\r\n\t\tif (this.lightnesses) {\r\n\t\t\tcount = $math.max(count, this.lightnesses.length);\r\n\t\t}\r\n\t\tif (this.brightnesses) {\r\n\t\t\tcount = $math.max(count, this.brightnesses.length);\r\n\t\t}\r\n\r\n\t\t// Init step values\r\n\t\tlet opacity: number = 1,\r\n\t\t\tlightness: $type.Optional<number>,\r\n\t\t\tbrightness: $type.Optional<number>;\r\n\r\n\t\t// Apply steps\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\r\n\t\t\t// Take base color\r\n\t\t\tlet color = value;\r\n\r\n\t\t\t// Check if there are any parameters for this step\r\n\t\t\tif (this.opacities && $type.isNumber(this.opacities[i])) {\r\n\t\t\t\topacity = this.opacities[i];\r\n\t\t\t}\r\n\t\t\tif (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n\t\t\t\tlightness = this.lightnesses[i];\r\n\t\t\t\tbrightness = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n\t\t\t\tbrightness = this.brightnesses[i];\r\n\t\t\t\tlightness = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Check if we need to brighten/lighten color\r\n\t\t\tif ($type.isNumber(brightness)) {\r\n\t\t\t\tcolor = value.brighten(this.brightnesses[i]);\r\n\t\t\t}\r\n\t\t\telse if ($type.isNumber(lightness)) {\r\n\t\t\t\tcolor = value.lighten(this.lightnesses[i]);\r\n\t\t\t}\r\n\r\n\t\t\t// Get offset (it's OK if it's undefined)\r\n\t\t\tlet offset: number = this.offsets[i];\r\n\r\n\t\t\t// Apply step\r\n\t\t\tthis.gradient.addColor(color, opacity, offset);\r\n\t\t}\r\n\t\treturn this.gradient;\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis._offsets = source.offsets;\r\n\t\tthis._brightnesses = source.brightnesses;\r\n\t\tthis._lightnesses = source.lightnesses;\r\n\t\tthis._opacities = source.opacities;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class LinearGradientModifier extends GradientModifier {\r\n\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LinearGradientModifier\";\r\n\t\tthis.gradient = new LinearGradient();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.gradient = source.gradient.clone();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradientModifier\"] = LinearGradientModifier;\r\n","/**\r\n * Cone module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent, Percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Orientation } from \"../../defs/Orientation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cone]].\r\n */\r\nexport interface IConeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius?: Percent;\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\ttopRadius?: Percent;\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Cone]].\r\n */\r\nexport interface IConeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Cone]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeAdapters extends IContainerAdapters, IConeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nexport class Cone extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeEvents;\r\n\r\n\t/**\r\n\t * Bottom ellement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bottom: Ellipse;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic top: Ellipse;\r\n\r\n\t/**\r\n\t * Body element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic body: Sprite;\r\n\r\n\t/**\r\n\t * Gradient for the fill of the body.\r\n\t */\r\n\tpublic bodyFillModifier: LinearGradientModifier;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Cone\";\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.topRadius = percent(100);\r\n\r\n\t\tthis.top = this.createChild(Ellipse);\r\n\t\tthis.top.shouldClone = false;\r\n\r\n\t\tthis.bottom = this.createChild(Ellipse);\r\n\t\tthis.bottom.shouldClone = false;\r\n\r\n\t\tthis.body = this.createChild(Sprite);\r\n\t\tthis.body.shouldClone = false;\r\n\r\n\t\tthis.body.setElement(this.paper.add(\"path\"));\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.bodyFillModifier = new LinearGradientModifier();\r\n\t\tthis.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n\t\tthis.body.fillModifier = this.bodyFillModifier;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\t$object.copyProperties(this, this.top, visualProperties);\r\n\t\t$object.copyProperties(this, this.bottom, visualProperties);\r\n\t\t$object.copyProperties(this, this.body, visualProperties);\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet bottom: Ellipse = this.bottom;\r\n\t\tlet top: Ellipse = this.top;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet radiusBase: number;\r\n\t\tlet dx: number;\r\n\t\tlet dy: number;\r\n\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tradiusBase = h / 2;\r\n\t\t\tbottom.y = h / 2;\r\n\t\t\ttop.y = h / 2;\r\n\t\t\ttop.x = w;\r\n\t\t\tdx = (90 - angle) / 90;\r\n\t\t\tdy = 0;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 90;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdx = 0;\r\n\t\t\tdy = (90 - angle) / 90;\r\n\r\n\t\t\tradiusBase = w / 2;\r\n\t\t\tbottom.y = h;\r\n\t\t\tbottom.x = w / 2;\r\n\t\t\ttop.x = w / 2;\r\n\t\t\tthis.bodyFillModifier.gradient.rotation = 0;\r\n\t\t}\r\n\r\n\t\tlet radius: number = this.radius.value * radiusBase;\r\n\t\tlet topRadius: number = this.topRadius.value * radiusBase;\r\n\r\n\t\tbottom.radius = radius - radius * dx;\r\n\t\tbottom.radiusY = radius - radius * dy;\r\n\r\n\t\ttop.radius = topRadius - topRadius * dx;\r\n\t\ttop.radiusY = topRadius - topRadius * dy;\r\n\r\n\t\tlet path: string;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tpath = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n\t\t}\r\n\r\n\t\tthis.body.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's bottom (base).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Bottom radius\r\n\t */\r\n\tpublic set radius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bottom radius\r\n\t */\r\n\tpublic get radius(): Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative radius of the cone's top (tip).\r\n\t *\r\n\t * It is relevant to the inner width or height of the element.\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Top radius\r\n\t */\r\n\tpublic set topRadius(value: Percent) {\r\n\t\tthis.setPropertyValue(\"topRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top radius\r\n\t */\r\n\tpublic get topRadius(): Percent {\r\n\t\treturn this.getPropertyValue(\"topRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the cone\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n","/**\r\n * Module for \"Lighten\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Lighten\" filter\r\n */\r\nexport interface LightenFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Lightness.\r\n\t */\r\n\tlightness: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\r\nexport class LightenFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LightenFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link LightenFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<LightenFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LightenFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.lightness = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Lightness of the target colors.\r\n\t *\r\n\t * If `lightness` is a positive number, the filter will make all colors\r\n\t * lighter.\r\n\t *\r\n\t * If `lightness` is negative, colors will be darkened.\r\n\t *\r\n\t * @param value  Lightness\r\n\t */\r\n\tpublic set lightness(value: number) {\r\n\t\tthis.properties[\"lightness\"] = value;\r\n\t\tlet v = value + 1;\r\n\t\tthis.feColorMatrix.attr({ \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Lightness\r\n\t */\r\n\tpublic get lightness(): number {\r\n\t\treturn this.properties[\"lightness\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;\r\n","/**\r\n * Creates a 3D rectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../Container\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport { Color, color, toColor } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Rectangle3D]].\r\n */\r\nexport interface Rectangle3DProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Rectangle3D]]\r\n */\r\nexport interface Rectangle3DEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Rectangle3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface Rectangle3DAdapters extends IContainerAdapters, Rectangle3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\r\nexport class Rectangle3D extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: Rectangle3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: Rectangle3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: Rectangle3DEvents;\r\n\r\n\t/**\r\n\t * Left side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideLeft: Sprite;\r\n\r\n\t/**\r\n\t * Right side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideRight: Sprite;\r\n\r\n\t/**\r\n\t * Top element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideTop: Sprite;\r\n\r\n\t/**\r\n\t * Bottom element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBottom: Sprite;\r\n\r\n\t/**\r\n\t * Back element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideBack: Sprite;\r\n\r\n\t/**\r\n\t * Front element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideFront: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 30;\r\n\t\tthis.className = \"Rectangle3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tlet sideBack: Sprite = this.createChild(Sprite);\r\n\t\tsideBack.shouldClone = false;\r\n\t\tsideBack.setElement(this.paper.add(\"path\"));\r\n\t\tsideBack.isMeasured = false;\r\n\r\n\t\tthis.sideBack = sideBack;\r\n\t\tthis._disposers.push(this.sideBack);\r\n\r\n\t\tlet sideBottom: Sprite = this.createChild(Sprite);\r\n\t\tsideBottom.shouldClone = false;\r\n\t\tsideBottom.setElement(this.paper.add(\"path\"));\r\n\t\tsideBottom.isMeasured = false;\r\n\t\tthis.sideBottom = sideBottom;\r\n\t\tthis._disposers.push(this.sideBottom);\r\n\r\n\t\tlet sideLeft: Sprite = this.createChild(Sprite);\r\n\t\tsideLeft.shouldClone = false;\r\n\t\tsideLeft.setElement(this.paper.add(\"path\"));\r\n\t\tsideLeft.isMeasured = false;\r\n\t\tthis.sideLeft = sideLeft;\r\n\t\tthis._disposers.push(this.sideLeft);\r\n\r\n\t\tlet sideRight: Sprite = this.createChild(Sprite);\r\n\t\tsideRight.shouldClone = false;\r\n\t\tsideRight.setElement(this.paper.add(\"path\"));\r\n\t\tsideRight.isMeasured = false;\r\n\t\tthis.sideRight = sideRight;\r\n\t\tthis._disposers.push(this.sideRight);\r\n\r\n\t\tlet sideTop: Sprite = this.createChild(Sprite);\r\n\t\tsideTop.shouldClone = false;\r\n\t\tsideTop.setElement(this.paper.add(\"path\"));\r\n\t\tsideTop.isMeasured = false;\r\n\t\tthis.sideTop = sideTop;\r\n\t\tthis._disposers.push(this.sideTop);\r\n\r\n\t\tlet sideFront: Sprite = this.createChild(Sprite);\r\n\t\tsideFront.shouldClone = false;\r\n\t\tsideFront.setElement(this.paper.add(\"path\"));\r\n\t\tsideFront.isMeasured = false;\r\n\t\tthis.sideFront = sideFront;\r\n\t\tthis._disposers.push(this.sideFront);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tlet angle: number = this.angle;\r\n\t\tlet sin: number = $math.sin(angle);\r\n\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\tlet a: IPoint = { x: 0, y: 0 };\r\n\t\tlet b: IPoint = { x: w, y: 0 };\r\n\t\tlet c: IPoint = { x: w, y: h };\r\n\t\tlet d: IPoint = { x: 0, y: h };\r\n\r\n\t\tlet ah: IPoint = { x: depth * cos, y: -depth * sin };\r\n\t\tlet bh: IPoint = { x: depth * cos + w, y: -depth * sin };\r\n\t\tlet ch: IPoint = { x: depth * cos + w, y: -depth * sin + h };\r\n\t\tlet dh: IPoint = { x: depth * cos, y: -depth * sin + h };\r\n\r\n\t\tthis.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\r\n\t\tthis.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\r\n\t\tthis.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n\t\tthis.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (Z dimension) of the 3D rectangle in pixels.\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tif ($type.isString(value)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.2;\r\n\t\t\tthis.sideBack.filters.push(filter);\r\n\r\n\t\t\tlet filter2 = filter.clone()\r\n\t\t\tfilter2.lightness = -0.4;\r\n\t\t\tthis.sideLeft.filters.push(filter2);\r\n\r\n\t\t\tlet filter3 = filter.clone()\r\n\t\t\tfilter3.lightness = -0.2;\r\n\t\t\tthis.sideRight.filters.push(filter3);\r\n\r\n\t\t\tlet filter4 = filter.clone()\r\n\t\t\tfilter4.lightness = -0.1;\r\n\t\t\tthis.sideTop.filters.push(filter4);\r\n\r\n\t\t\tlet filter5 = filter.clone()\r\n\t\t\tfilter5.lightness = -0.5;\r\n\t\t\tthis.sideBottom.filters.push(filter5);\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tthis.sideBack.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideLeft.fill = color(colorStr).lighten(-0.4);\r\n\t\t\tthis.sideRight.fill = color(colorStr).lighten(-0.2);\r\n\t\t\tthis.sideTop.fill = color(colorStr).lighten(-0.1);\r\n\t\t\tthis.sideBottom.fill = color(colorStr).lighten(-0.5);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Rectangle3D.\r\n\t *\r\n\t * @param source Source Rectangle3D\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.sideBack.copyFrom(source.sideBack);\r\n\t\tthis.sideLeft.copyFrom(source.sideLeft);\r\n\t\tthis.sideRight.copyFrom(source.sideRight);\r\n\t\tthis.sideTop.copyFrom(source.sideTop);\r\n\t\tthis.sideBottom.copyFrom(source.sideBottom);\r\n\t}\r\n\r\n}\r\n","/**\r\n * 3D slice module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice, ISliceProperties, ISliceAdapters, ISliceEvents } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Color, color } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\n\r\n/**\r\n * Defines properties for [[Slice3D]].\r\n */\r\nexport interface ISlice3DProperties extends ISliceProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice3D]].\r\n */\r\nexport interface ISlice3DEvents extends ISliceEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlice3DAdapters extends ISliceAdapters, ISlice3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nexport class Slice3D extends Slice {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlice3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlice3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlice3DEvents;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic edge: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideA: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideB: Sprite;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create edge container\r\n\t\tlet edge = this.createChild(Sprite);\r\n\t\tthis.edge = edge;\r\n\t\tedge.shouldClone = false;\r\n\t\tedge.isMeasured = false;\r\n\t\tedge.toBack();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 20;\r\n\r\n\t\t// Create side A element\r\n\t\tlet sideA = this.createChild(Sprite);\r\n\t\tthis.sideA = sideA;\r\n\t\tsideA.shouldClone = false;\r\n\t\tsideA.isMeasured = false;\r\n\t\t//sideA.setElement(this.paper.add(\"path\"));\r\n\t\t//sideA.strokeOpacity = 0;\r\n\r\n\t\t// Crate side B element\r\n\t\tlet sideB = this.createChild(Sprite);\r\n\t\tthis.sideB = sideB;\r\n\t\tsideB.shouldClone = false;\r\n\t\tsideB.isMeasured = false;\r\n\t\t//sideB.setElement(this.paper.add(\"path\"));\r\n\t\t//sideB.strokeOpacity = 0;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.25;\r\n\t\t\tthis.edge.filters.push(filter);\r\n\t\t\tthis.sideA.filters.push(filter.clone());\r\n\t\t\tthis.sideB.filters.push(filter.clone());\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tlet edgeFill = color(colorStr).lighten(-0.25);\r\n\r\n\t\t\tthis.edge.fill = edgeFill;\r\n\t\t\tthis.sideA.fill = edgeFill;\r\n\t\t\tthis.sideB.fill = edgeFill;\r\n\r\n\t\t\tthis.edge.stroke = edgeFill;\r\n\t\t\tthis.sideA.stroke = edgeFill;\r\n\t\t\tthis.sideB.stroke = edgeFill;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.cornerRadius = 0;\r\n\t\tthis.innerCornerRadius = 0;\r\n\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n\t\t\tthis.sideB.show(0);\r\n\t\t\tthis.sideA.show(0);\r\n\t\t\tthis.edge.show(0);\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet innerRadius = this.pixelInnerRadius || 0;\r\n\t\t\tlet radiusY = this.radiusY || 0;\r\n\r\n\t\t\t//let cornerRadius = this.cornerRadius || 0;\r\n\t\t\t//let innerCornerRadius = this.innerCornerRadius;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\t// this is code duplicate with $path.arc. @todo to think how to avoid it\r\n\r\n\t\t\tlet endAngle = startAngle + arc;\r\n\t\t\t//let crSin = $math.sin($math.min(arc, 45) / 2);\r\n\r\n\t\t\t//innerCornerRadius = innerCornerRadius || cornerRadius;\r\n\r\n\t\t\tlet innerRadiusY = (radiusY / radius) * innerRadius;\r\n\t\t\t//let cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n\t\t\t//let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n\r\n\t\t\t//let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (innerRadius < innerCornerRadius) {\r\n\t\t\t//\tinnerRadius = innerCornerRadius;\r\n\t\t\t//}\r\n\r\n\t\t\t//if (innerRadiusY < innerCornerRadiusY) {\r\n\t\t\t//\tinnerRadiusY = innerCornerRadiusY;\r\n\t\t\t//}\r\n\r\n\t\t\t//let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (!$type.isNumber(crInnerAngle)) {\r\n\t\t\t//\tcrInnerAngle = 0;\r\n\t\t\t//}\r\n\t\t\t//if (!$type.isNumber(crInnerAngleY)) {\r\n\t\t\t//\tcrInnerAngleY = 0;\r\n\t\t\t//}\r\n\r\n\t\t\t//let middleAngle = startAngle + arc / 2;\r\n\t\t\t//let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n\r\n\t\t\tlet a0 = { x: $math.cos(startAngle) * (innerRadius), y: $math.sin(startAngle) * (innerRadiusY) };\r\n\t\t\tlet b0 = { x: $math.cos(startAngle) * (radius), y: $math.sin(startAngle) * (radiusY) };\r\n\t\t\tlet c0 = { x: $math.cos(endAngle) * (radius), y: $math.sin(endAngle) * (radiusY) };\r\n\t\t\tlet d0 = { x: $math.cos(endAngle) * (innerRadius), y: $math.sin(endAngle) * (innerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tlet h: number = this.depth;\r\n\t\t\tlet ah: IPoint = { x: a0.x, y: a0.y - h };\r\n\t\t\tlet bh: IPoint = { x: b0.x, y: b0.y - h };\r\n\t\t\tlet ch: IPoint = { x: c0.x, y: c0.y - h };\r\n\t\t\tlet dh: IPoint = { x: d0.x, y: d0.y - h };\r\n\r\n\t\t\tlet edgePath = \"\";\r\n\t\t\tlet count = Math.ceil(arc / 5);\r\n\t\t\tlet step = arc / count;\r\n\t\t\tlet mangle = startAngle;\r\n\r\n\t\t\tlet prevPoint = bh;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, radius, radiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, radius, radiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprevPoint = ah;\r\n\t\t\tmangle = startAngle;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.edge.path = edgePath;\r\n/*\r\n\t\t\ta0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\tb0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\tc0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\td0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tah = { x: a0.x, y: a0.y - h };\r\n\t\t\tbh = { x: b0.x, y: b0.y - h };\r\n\t\t\tch = { x: c0.x, y: c0.y - h };\r\n\t\t\tdh = { x: d0.x, y: d0.y - h };\r\n*/\r\n\t\t\tthis.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n\t\t\tthis.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n\r\n\t\t\tif (this.startAngle < 90) {\r\n\t\t\t\tthis.sideA.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideA.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.startAngle + this.arc > 90) {\r\n\t\t\t\tthis.sideB.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideB.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tthis.slice.dy = -h;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.sideA.hide(0);\r\n\t\t\tthis.sideB.hide(0);\r\n\t\t\tthis.edge.hide(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t * @param depth  Depth (px)\r\n\t */\r\n\tpublic set depth(depth: number) {\r\n\t\tthis.setPropertyValue(\"depth\", depth, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\tlet angle: number = this.getPropertyValue(\"angle\");\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = 0;\r\n\t\t}\r\n\t\treturn angle;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet radiusY: number = this.getPropertyValue(\"radiusY\");\r\n\t\tif (!$type.isNumber(radiusY)) {\r\n\t\t\tradiusY = this.radius - this.radius * this.angle / 90;\r\n\t\t}\r\n\t\treturn radiusY;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.edge.copyFrom(source.edge);\r\n\t\tthis.sideA.copyFrom(source.sideA);\r\n\t\tthis.sideB.copyFrom(source.sideB);\r\n\t}\r\n\r\n}\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class can be used to modify radial gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nexport class RadialGradientModifier extends GradientModifier {\r\n\t/**\r\n\t * A reference to the gradient instance that this modifier is used for.\r\n\t */\r\n\tpublic gradient: RadialGradient;\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadialGradientModifier\";\r\n\t\tthis.gradient = new RadialGradient();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.gradient = source.gradient.clone();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradientModifier\"] = RadialGradientModifier;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n\r\nexport interface LinePatternProperties extends PatternProperties {\r\n\tgap: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Line pattern.\r\n */\r\nexport class LinePattern extends Pattern {\r\n\r\n\t/**\r\n\t * SVG `<line>` element used for pattern.\r\n\t */\r\n\tprotected _line: AMElement;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LinePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"gap\"] = 0;\r\n\t\tthis._line = this.paper.add(\"path\");\r\n\t\tthis.addElement(this._line);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\tthis.properties[\"shapeRendering\"] = \"auto\";\r\n\t\t}\r\n\t\tif (this._line) {\r\n\t\t\tlet w = this.width;\r\n\t\t\tlet h = this.height;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tif (!this.gap) {\r\n\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n\r\n\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet step = this.gap + this.strokeWidth;\r\n\t\t\t\tlet count = this.height / step;\r\n\r\n\t\t\t\tfor (let i = -count / 2; i < count * 1.5; i++) {\r\n\t\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n\r\n\t\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._line.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Number of pixels between pattern lines.\r\n\t *\r\n\t * The pattern will automatically draw required number of lines to fill\r\n\t * pattern area maintaining `gap` distance between them.\r\n\t *\r\n\t * 0 (zero) means only single line will be drawn.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.7.7\r\n\t */\r\n\tpublic set gap(value: number) {\r\n\t\tthis.properties[\"gap\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return gap\r\n\t */\r\n\tpublic get gap(): number {\r\n\t\treturn this.properties[\"gap\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n","/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for circle pattern\r\n */\r\nexport interface CirclePatternProperties extends PatternProperties {\r\n\tradius: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Circular pattern\r\n */\r\nexport class CirclePattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<circle>` element used in pattern.\r\n\t */\r\n\tprotected _circle: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: CirclePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"radius\"] = 2;\r\n\t\tthis._circle = this.paper.add(\"circle\");\r\n\t\tthis.addElement(this._circle);\r\n\t\tthis.shapeRendering = \"auto\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the circle element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this._circle) {\r\n\t\t\tthis._circle.attr({ \"r\": this.radius, \"cx\": this.width / 2, \"cy\":this.height / 2});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Circle radius in pixels.\r\n\t *\r\n\t * @param value Radius (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.properties[\"radius\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.properties[\"radius\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CirclePattern\"] = CirclePattern;\r\n","/**\r\n * Rectangular pattern module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for rectangular pattern\r\n */\r\nexport interface RectPatternProperties extends PatternProperties {\r\n\trectWidth: number;\r\n\trectHeight: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Rectangular pattern\r\n */\r\nexport class RectPattern extends Pattern {\r\n\r\n\t/**\r\n\t * Reference to `<rect>` element used in pattern.\r\n\t */\r\n\tprotected _rect: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: RectPatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.rectHeight = 1;\r\n\t\tthis.rectWidth = 1;\r\n\t\tthis._rect = this.paper.add(\"rect\");\r\n\t\tthis.addElement(this._rect);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the rectangular element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\tthis.properties[\"rotationY\"] = this.height / 2;\t\t\r\n\t\tif (this._rect) {\r\n\t\t\tthis._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight, \"x\":(this.width - this.rectWidth) / 2, \"y\":(this.height - this.rectHeight) / 2 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle width in pixels.\r\n\t *\r\n\t * @param value Width (px)\r\n\t */\r\n\tpublic set rectWidth(value: number) {\r\n\t\tthis.properties[\"rectWidth\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get rectWidth(): number {\r\n\t\treturn this.properties[\"rectWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Rectangle height in pixels.\r\n\t *\r\n\t * @param value Height (px)\r\n\t */\r\n\tpublic set rectHeight(value: number) {\r\n\t\tthis.properties[\"rectHeight\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get rectHeight(): number {\r\n\t\treturn this.properties[\"rectHeight\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n","/**\r\n * Module for \"Colorize\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Colorize\" filter.\r\n */\r\nexport interface ColorizeFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n\t/**\r\n\t * Intensity. (0-1)\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tintensity: number;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nexport class ColorizeFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ColorizeFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link ColorizeFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<ColorizeFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorizeFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\t//this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)applies colors to the already existing filter by modifying filyer's\r\n\t * color matrix element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyFilter(): void {\r\n\r\n\t\tlet i: number = this.intensity;\r\n\t\tlet ii = 1 - i;\r\n\r\n\t\tlet r: number;\r\n\t\tlet g: number;\r\n\t\tlet b: number;\r\n\r\n\t\tconst color = this.color;\r\n\r\n\t\tif (color && color.rgb) {\r\n\t\t\tr = color.rgb.r / 255 * i;\r\n\t\t\tg = color.rgb.g / 255 * i;\r\n\t\t\tb = color.rgb.b / 255 * i;\r\n\r\n\t\t} else {\r\n\t\t\tr = 0;\r\n\t\t\tg = 0;\r\n\t\t\tb = 0;\r\n\t\t}\r\n\r\n\t\tthis.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * Target color to apply to the element.\r\n\t *\r\n\t * Depending on the `intensity`, all colors of the target element will steer\r\n\t * towards this color.\r\n\t *\r\n\t * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"color\"] = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"color\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Intensity of the color (0-1).\r\n\t *\r\n\t * The bigger the number the more of a `color` target's colors will become.\r\n\t *\r\n\t * 0 means the colors will remain as they are.\r\n\t * 1 means all colors will become the target `color`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Intensity (0-1)\r\n\t */\r\n\tpublic set intensity(value: number) {\r\n\t\tthis.properties.intensity = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Intensity (0-1)\r\n\t */\r\n\tpublic get intensity(): number {\r\n\t\treturn this.properties.intensity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n","/**\r\n * Module for \"Desaturate\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Desaturate\" filter\r\n */\r\nexport interface DesaturateFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Saturation. (0-1)\r\n\t */\r\n\tsaturation: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creats a \"Desaturate\" filter\r\n */\r\nexport class DesaturateFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: DesaturateFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link DesaturateFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<DesaturateFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DesaturateFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"saturate\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 120;\r\n\t\tthis.height = 120;\r\n\r\n\t\tthis.saturation = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Saturation.\r\n\t *\r\n\t * 0 - completely desaturated.\r\n\t * 1 - fully saturated (gray).\r\n\t *\r\n\t * @param value  Saturation (0-1)\r\n\t */\r\n\tpublic set saturation(value: number) {\r\n\t\tthis.properties[\"saturation\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": value.toString() });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Saturation (0-1)\r\n\t */\r\n\tpublic get saturation(): number {\r\n\t\treturn this.properties[\"saturation\"];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DesaturateFilter\"] = DesaturateFilter;\r\n","/**\r\n * Module for \"Blur\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Blur\" filter.\r\n */\r\nexport interface BlurFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Horizontal offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdx?: number;\r\n\r\n\t/**\r\n\t * Vertical offset in pixels.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tdy?: number;\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t */\r\n\tblur: number;\r\n\r\n\t/**\r\n\t * Opacity. (0-1)\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Color.\r\n\t *\r\n\t * @ignore Deprecated\r\n\t * @deprecated ?\r\n\t * @todo Remove?\r\n\t */\r\n\tcolor?: Color;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Blur\" filter.\r\n */\r\nexport class BlurFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: BlurFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link BlurFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<BlurFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feGaussianBlur>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feGaussianBlur: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"BlurFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\r\n\t\tthis.feGaussianBlur = this.paper.add(\"feGaussianBlur\");\r\n\t\tthis.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n\t\tthis.filterPrimitives.push(this.feGaussianBlur);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 200;\r\n\t\tthis.height = 200;\r\n\t\tthis.blur = 1.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Blur value.\r\n\t *\r\n\t * The bigger the value, the blurrier the target element will become.\r\n\t *\r\n\t * @default 1.5\r\n\t * @param value Blur\r\n\t */\r\n\tpublic set blur(value: number) {\r\n\t\tthis.properties.blur = value;\r\n\t\tthis.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Blur\r\n\t */\r\n\tpublic get blur(): number {\r\n\t\treturn this.properties.blur;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"BlurFilter\"] = BlurFilter;\r\n","/**\r\n * Module for \"Focus\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Focus\" filter.\r\n */\r\nexport interface FocusFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t */\r\n\topacity?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t */\r\n\tstroke?: Color;\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t */\r\n\tstrokeWidth?: number;\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity. (0-1)\r\n\t */\r\n\tstrokeOpacity?: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Focus\" filter.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n */\r\nexport class FocusFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: FocusFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link FocusFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<FocusFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feFlood: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feMorphology>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feMorphology: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feComposite>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feComposite: AMElement;\r\n\r\n\t/**\r\n\t * Reference to the `<feFlood>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feBlend: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FocusFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feFlood = this.paper.add(\"feFlood\");\r\n\t\tthis.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n\t\tthis.filterPrimitives.push(this.feFlood);\r\n\r\n\t\tthis.feMorphology = this.paper.add(\"feMorphology\");\r\n\t\tthis.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n\t\tthis.filterPrimitives.push(this.feMorphology);\r\n\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\tthis.feComposite = this.paper.add(\"feComposite\");\r\n\t\tthis.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n\t\tthis.filterPrimitives.push(this.feComposite);\r\n\r\n\t\tthis.feBlend = this.paper.add(\"feBlend\");\r\n\t\tthis.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n\t\tthis.filterPrimitives.push(this.feBlend);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.width = 130;\r\n\t\tthis.height = 130;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set stroke(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"stroke\"] = value;\r\n\t\tthis.feFlood.attr({ \"flood-color\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get stroke(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"stroke\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Outline thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"strokeWidth\"] = value;\r\n\t\tthis.feMorphology.attr({ \"radius\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): $type.Optional<number> {\r\n\t\treturn this.properties[\"strokeWidth\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Opacity of the outline. (0-1)\r\n\t *\r\n\t * @param value  Outline opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: $type.Optional<number>) {\r\n\t\tthis.properties[\"opacity\"] = value;\r\n\t\tthis.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outline opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): $type.Optional<number> {\r\n\t\treturn this.properties[\"opacity\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets filter's target element.\r\n\t *\r\n\t * In addition it also disables built-in focus outline on element this\r\n\t * filter is applied to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Element filter is being attached to\r\n\t */\r\n\tprotected setSprite(value: Sprite): void {\r\n\t\tif (this._sprite && this._sprite != value) {\r\n\t\t\tthis._sprite.group.removeStyle(\"outline\");\r\n\t\t}\r\n\t\tvalue.group.addStyle({\r\n\t\t\t\"outline\": \"none\"\r\n\t\t});\r\n\t\tsuper.setSprite(value);\r\n\t}\r\n\r\n}\r\n","/**\r\n * This module contains PatternSet object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { Pattern } from \"../rendering/fills/Pattern\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class PatternSet extends BaseObject {\r\n\r\n\t/**\r\n\t * Holds the list of the colors in this set. (preset or auto-generated)\r\n\t */\r\n\tprotected _list: Pattern[] = [];\r\n\r\n\t/**\r\n\t * Current step.\r\n\t */\r\n\tprotected _currentStep: number = 0;\r\n\r\n\t/**\r\n\t * If set to non-zero value, the PatternSet will start iterating patterns from\r\n\t * that particular index, not the first pattern in the list.\r\n\t */\r\n\tprotected _startIndex: number = 0;\r\n\r\n\t/**\r\n\t * Current pass in cycle. Once all patterns in the list are iterated,\r\n\t * iteration restarts from beginning and currentPass is incremented.\r\n\t */\r\n\tprotected _currentPass: number = 0;\r\n\r\n\t/**\r\n\t * A base color. If there are no colors pre-set in the color list, ColorSet\r\n\t * will use this color as a base when generating new ones, applying\r\n\t * `stepOptions` and `passOptions` to this base color.\r\n\t */\r\n\tpublic baseColor: Color = new Color({\r\n\t\tr: 103,\r\n\t\tg: 183,\r\n\t\tb: 220\r\n\t});\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PatternSet\";\r\n\r\n\t\t// Set base color to be used for pattern elements\r\n\t\tconst interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set default patterns\r\n\t\tthis.list = [\r\n\t\t\tthis.getLinePattern(1000, 45, 1, 6),\r\n\t\t\tthis.getRectPattern(10, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, -45, 1, 6),\r\n\t\t\tthis.getCirclePattern(11, 2, true),\r\n\t\t\tthis.getLinePattern(6, 90, 1),\r\n\t\t\tthis.getRectPattern(12, 45, 6, true),\r\n\t\t\tthis.getLinePattern(6, 0, 1),\r\n\t\t\tthis.getRectPattern(7, 0, 4),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getCirclePattern(9, 3, false),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n\t\t\tthis.getRectPattern(10, 45, Math.sqrt(50)),\r\n\t\t\tthis.getLinePattern(1000, -45, 2, 1),\r\n\t\t\tthis.getRectPattern(10, 0, 9),\r\n\t\t\tthis.getLinePattern(1000, 45, 2, 1),\r\n\t\t\tthis.getLinePattern(1000, 0, 3, 1),\r\n\t\t\tthis.getRectPattern(10, 45, 10),\r\n\t\t\tthis.getLinePattern(1000, 90, 3, 1)\r\n\t\t];\r\n\r\n\t\tthis.baseColor = interfaceColors.getFor(\"stroke\");\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getLinePattern(size: number, rotation: number, thickness: number, gap?: number, strokeDashArray?: string): LinePattern {\r\n\t\tlet pattern = new LinePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.stroke = this.baseColor;\r\n\t\tpattern.gap = gap;\r\n\t\tpattern.strokeDasharray = strokeDashArray;\r\n\t\tpattern.strokeWidth = thickness;\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getRectPattern(size: number, rotation: number, thickness: number, outline?:boolean): RectPattern {\r\n\t\tlet pattern = new RectPattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.rectWidth = thickness;\r\n\t\tpattern.rectHeight = thickness;\r\n\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\r\n\t\tif(rotation != 0){\r\n\t\t\tpattern.shapeRendering = \"auto\";\r\n\t\t}\r\n\r\n\t\tpattern.rotation = rotation;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\tpublic getCirclePattern(size: number, radius: number, outline:boolean): CirclePattern {\r\n\t\tlet pattern = new CirclePattern();\r\n\t\tpattern.width = size;\r\n\t\tpattern.height = size;\r\n\t\tpattern.shapeRendering = \"auto\";\r\n\t\tpattern.radius = radius;\r\n\t\tif(outline){\r\n\t\t\tpattern.stroke = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 1;\r\n\t\t\tpattern.fillOpacity = 0;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpattern.fill = this.baseColor;\r\n\t\t\tpattern.strokeWidth = 0;\r\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * List of pre-defined patterns to be used in set.\r\n\t *\r\n\t * @param value Pattern list\r\n\t */\r\n\tpublic set list(value: Pattern[]) {\r\n\t\tthis._list = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern list\r\n\t */\r\n\tpublic get list(): Pattern[] {\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next pattern in list.\r\n\t *\r\n\t * @return Pattern\r\n\t */\r\n\tpublic next(): Pattern {\r\n\t\tconst pattern = this.getIndex(this.currentStep);\r\n\t\tthis._currentStep++;\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color at specific index in the list.\r\n\t *\r\n\t * @param  i  Index\r\n\t * @return Pattern\r\n\t */\r\n\tpublic getIndex(i: number): Pattern {\r\n\t\tlet pattern;\r\n\t\twhile (this.list.length <= i) {\r\n\t\t\tthis.generatePatterns();\r\n\t\t}\r\n\t\tpattern = this.list[i];\r\n\t\treturn pattern.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new set of patterns.\r\n\t */\r\n\tprivate generatePatterns(): void {\r\n\t\tconst count = this.list.length / (this._currentPass + 1);\r\n\t\tthis._currentPass++;\r\n\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\tthis.list.push(this.list[i].clone());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t *\r\n\t * Calling `next()` after this will return the very first color in the color\r\n\t * list, even if it was already returned before.\r\n\t */\r\n\tpublic reset(): void {\r\n\t\tthis._currentStep = this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current color iteration. You can use this property to skip some\r\n\t * colors from iteration. E.g. setting it to `10` will skip first ten\r\n\t * colors.\r\n\t *\r\n\t * Please note that the number is zero-based.\r\n\t *\r\n\t * @param value  Step\r\n\t */\r\n\tpublic set currentStep(value: number) {\r\n\t\tthis._currentStep = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get currentStep(): number {\r\n\t\treturn this._currentStep;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to non-zero value, the ColorSet will start iterating colors from\r\n\t * that particular index, not the first color in the list.\r\n\t *\r\n\t * @default 0\r\n\t * @param  value  Index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = value;\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// if (config) {\r\n\r\n\t\t// \t// Set up axis ranges\r\n\t\t// \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n\t\t// \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n\t\t// \t\t\tif (!(config.list[i] instanceof Color)) {\r\n\t\t// \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n\t\t// \t\t\t}\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;","/**\r\n * A plugin base class.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Optional } from \"./Type\";\r\nimport { IDisposer } from \"./Disposer\";\r\nimport { Sprite } from \"../Sprite\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport interface IPlugin extends IDisposer {\r\n\ttarget: Optional<Sprite>;\r\n\tinit(): void;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class that provides core functionality for plugins.\r\n *\r\n * The easiest way to start off with a new plugin is to extend this class.\r\n *\r\n * It will provide all the mandatory functionality, such as disposers.\r\n *\r\n * @since 4.2.2\r\n */\r\nexport class Plugin implements IPlugin {\r\n\r\n\r\n\t/**\r\n\t * A target object plugin is for.\r\n\t */\r\n\tpublic target: Optional<Sprite>;\r\n\r\n\t/**\r\n\t * Is this object disposed?\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tpublic init(): void {\r\n\t\t// Does nothing\r\n\t\t// Override it\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this element is already disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and related stuff.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/**\r\n * AmChartsLogo module.\r\n *\r\n * AmChartsLogo shows amCharts logo for non-commercial users of a library.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Polyspline } from \"./Polyspline\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { DesaturateFilter } from \"../rendering/filters/DesaturateFilter\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[AmChartsLogo]].\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AmChartsLogo]].\r\n *\r\n * @see {@link Adapter}\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IAmChartsLogoAdapters extends IContainerAdapters, IAmChartsLogoProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IAmChartsLogoEvents} for a list of available events\r\n * @see {@link IAmChartsLogoAdapters} for a list of available Adapters\r\n * @ignore Exclude from docs\r\n */\r\nexport class AmChartsLogo extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAmChartsLogoProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAmChartsLogoAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAmChartsLogoEvents;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AmChartsLogo\";\r\n\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tlet d = 0.3;\r\n\t\tthis.opacity = 0.3;\r\n\t\tthis.defaultState.properties.opacity = 0.4;\r\n\t\tthis.url = \"https://www.amcharts.com/\";\r\n\t\tthis.urlTarget = \"_blank\";\r\n\r\n\t\tthis.showSystemTooltip = true;\r\n\t\tthis.readerTitle = \"Chart created using amCharts library\";\r\n\t\tthis.width = 220 * d;\r\n\t\tthis.height = 70 * d;\r\n\t\tthis.background.opacity = 0;\r\n\r\n\t\tlet aColor = color(\"#474758\");\r\n\t\tif (new InterfaceColorSet().getFor(\"background\").alternative.hex == \"#ffffff\") {\r\n\t\t\taColor = color(\"#ffffff\");\r\n\t\t}\r\n\r\n\t\tlet aGradient = new LinearGradient();\r\n\r\n\t\taGradient.addColor(aColor);\r\n\t\taGradient.addColor(aColor, 1, 0.75);\r\n\t\taGradient.addColor(color(\"#3cabff\"), 1, 0.755);\r\n\t\taGradient.rotation = -10;\r\n\r\n\t\tlet aStroke = aGradient;\r\n\r\n\t\tlet m = this.createChild(Polyspline)\r\n\t\tm.shouldClone = false;\r\n\t\tm.isMeasured = false;\r\n\t\tm.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\tm.strokeWidth = 6 * d;\r\n\t\tm.tensionX = 0.8;\r\n\t\tm.tensionY = 1;\r\n\r\n\t\tm.stroke = color(\"#3cabff\");\r\n\r\n\t\tlet a = this.createChild(Polyspline);\r\n\t\ta.shouldClone = false;\r\n\t\ta.isMeasured = false;\r\n\t\ta.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]]\r\n\t\ta.strokeWidth = 6 * d;\r\n\t\ta.tensionX = 0.75;\r\n\t\ta.tensionY = 1;\r\n\t\ta.stroke = aStroke;\r\n\r\n\t\tthis._disposers.push(a);\r\n\r\n\t\tlet desaturateFilter = new DesaturateFilter();\r\n\t\tthis.filters.push(desaturateFilter);\r\n\r\n\t\tlet desaturateFilterHover = new DesaturateFilter();\r\n\t\tdesaturateFilterHover.saturation = 1;\r\n\r\n\t\tlet hoverState = this.states.create(\"hover\");\r\n\t\thoverState.properties.opacity = 1;\r\n\t\thoverState.filters.push(desaturateFilterHover);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { registry } from \"../Registry\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Container } from \"../Container\";\r\nimport { Component } from \"../Component\";\r\nimport { Paper } from \"../rendering/Paper\";\r\nimport { SVGContainer, svgContainers } from \"../rendering/SVGContainer\";\r\nimport { FocusFilter } from \"../rendering/filters/FocusFilter\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { AmChartsLogo } from \"../elements/AmChartsLogo\";\r\nimport { ITheme } from \"../../themes/ITheme\";\r\nimport { Tooltip } from \"../elements/Tooltip\";\r\nimport { Disposer, MultiDisposer } from \"../utils/Disposer\";\r\nimport { percent } from \"./Percent\";\r\nimport { options } from \"../Options\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport * as $dom from \"./DOM\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $log from \"./Log\";\r\n\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates all HTML and SVG containers needed for the chart instance, as well\r\n * as the new [[Sprite]] (as specified in `classType` parameter).\r\n *\r\n * @param htmlElement  A container to creat elements in\r\n * @param classType    A class definition of the new element to create\r\n * @return Newly-created Sprite object\r\n */\r\nfunction createChild<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\tlet htmlContainer = $dom.getElement(htmlElement);\r\n\r\n\tif (htmlContainer) {\r\n\r\n\t\thtmlContainer.innerHTML = \"\";\r\n\t\t//htmlContainer.style.overflow = \"hidden\";\r\n\r\n\t\tlet svgDiv = new SVGContainer(htmlContainer);\r\n\t\tlet paper = new Paper(svgDiv.SVGContainer, \"svg-\" + (svgContainers.length - 1));\r\n\r\n\t\t// the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n\t\t// svg area - this is often needed when working with small charts.\r\n\r\n\t\t// main container which holds content container and tooltips container\r\n\t\tlet container = new Container();\r\n\t\tcontainer.htmlContainer = htmlContainer;\r\n\t\tcontainer.svgContainer = svgDiv;\r\n\t\tcontainer.width = percent(100);\r\n\t\tcontainer.height = percent(100);\r\n\t\tcontainer.background.fillOpacity = 0;\r\n\t\tcontainer.paper = paper;\r\n\t\tpaper.append(container.group);\r\n\r\n\t\t// this is set from parent container, but this one doesn't have, so do it manually.\r\n\t\tcontainer.relativeWidth = 1;\r\n\t\tcontainer.relativeHeight = 1;\r\n\r\n\t\tsvgDiv.container = container;\r\n\r\n\t\t// creating classType instance\r\n\t\tlet sprite = container.createChild(classType);\r\n\t\tsprite.topParent = container;\r\n\t\tlet uid = sprite.uid;\r\n\r\n\t\tregistry.invalidSprites[uid] = [];\r\n\t\tregistry.invalidDatas[uid] = [];\r\n\t\tregistry.invalidPositions[uid] = [];\r\n\t\tregistry.invalidLayouts[uid] = [];\r\n\r\n\t\tcontainer.baseId = uid;\r\n\r\n\t\tsprite.isBaseSprite = true;\r\n\t\tsprite.focusFilter = new FocusFilter();\r\n\t\tregistry.baseSprites.push(sprite);\r\n\t\tregistry.baseSpritesByUid[uid] = sprite;\r\n\r\n\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width, 0), height: Math.max(svgDiv.height, 0) };\r\n\r\n\t\t// this solves issues with display:none, as all children are measured as 0x0\r\n\t\tcontainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\tif (event.previousWidth == 0 || event.previousHeight == 0) {\r\n\t\t\t\tcontainer.deepInvalidate();\r\n\t\t\t}\r\n\t\t\tif (sprite.maskRectangle) {\r\n\t\t\t\tsprite.maskRectangle = { x: 0, y: 0, width: Math.max(svgDiv.width, 0), height: Math.max(svgDiv.height, 0) };\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet loopTimer: number | null = null;\r\n\r\n\t\t// Checks to see whether the chart was properly disposed or not\r\n\t\tconst loop = () => {\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\tif ($dom.getRoot(sprite.dom) == null) {\r\n\t\t\t\t\t$log.warn(\"Chart was not disposed\", sprite.uid);\r\n\t\t\t\t\tloopTimer = null;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloopTimer = window.setTimeout(loop, 1000);\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tloopTimer = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tloop();\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tif (loopTimer !== null) {\r\n\t\t\t\tclearTimeout(loopTimer);\r\n\t\t\t}\r\n\t\t\t$array.remove(registry.baseSprites, sprite);\r\n\t\t\tregistry.baseSpritesByUid[sprite.uid] = undefined;\r\n\t\t}));\r\n\r\n\t\t// TODO figure out a better way of doing this\r\n\t\tsprite.addDisposer(container);\r\n\r\n\t\t// tooltip container\r\n\t\tlet tooltipContainer: Container = container.createChild(Container);\r\n\t\ttooltipContainer.topParent = container;\r\n\t\ttooltipContainer.width = percent(100);\r\n\t\ttooltipContainer.height = percent(100);\r\n\t\ttooltipContainer.isMeasured = false;\r\n\t\tcontainer.tooltipContainer = tooltipContainer;\r\n\r\n\t\tsprite.tooltip = new Tooltip();\r\n\t\tsprite.tooltip.hide(0);\r\n\t\tsprite.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\r\n\t\ttooltipContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\t$type.getValue(sprite.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer.maxWidth, height: tooltipContainer.maxHeight });\r\n\t\t}, undefined, false)\r\n\r\n\t\t//@todo: maybe we don't need to create one by default but only on request?\r\n\r\n\t\tlet preloader = new Preloader();\r\n\t\tpreloader.events.on(\"inited\", () => {\r\n\t\t\tpreloader.__disabled = true;\r\n\t\t}, undefined, false);\r\n\t\tcontainer.preloader = preloader;\r\n\r\n\t\t//if (!options.commercialLicense) {\r\n\t\tif (sprite instanceof Container && !sprite.hasLicense()) {\r\n\t\t\tlet logo = tooltipContainer.createChild(AmChartsLogo);\r\n\t\t\ttooltipContainer.events.on(\"maxsizechanged\", (ev) => {\r\n\t\t\t\tif ((tooltipContainer.maxWidth <= 100) || (tooltipContainer.maxHeight <= 50)) {\r\n\t\t\t\t\tlogo.hide();\r\n\t\t\t\t}\r\n\t\t\t\telse if (logo.isHidden || logo.isHiding) {\r\n\t\t\t\t\tlogo.show();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tsprite.logo = logo;\r\n\t\t\tlogo.align = \"left\";\r\n\t\t\tlogo.valign = \"bottom\";\r\n\t\t}\r\n\r\n\t\t$utils.used(sprite.numberFormatter); // need to create one.\r\n\r\n\t\t// Set this as an autonomouse instance\r\n\t\t// Controls like Preloader, Export will use this.\r\n\t\tcontainer.isStandaloneInstance = true;\r\n\r\n\t\tif (options.onlyShowOnViewport) {\r\n\t\t\tif (!$dom.isElementInViewport(htmlContainer, options.viewportTarget)) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\tsprite.tooltipContainer.__disabled = true;\r\n\r\n\t\t\t\tlet disposers = [\r\n\t\t\t\t\t$dom.addEventListener(window, \"DOMContentLoaded\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"load\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"resize\", function() { viewPortHandler(sprite); }),\r\n\t\t\t\t\t$dom.addEventListener(window, \"scroll\", function() { viewPortHandler(sprite); })\r\n\t\t\t\t];\r\n\r\n\t\t\t\tif (options.viewportTarget) {\r\n\t\t\t\t\tdisposers.push($dom.addEventListener(options.viewportTarget, \"resize\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t\tdisposers.push($dom.addEventListener(options.viewportTarget, \"scroll\", function() { viewPortHandler(sprite); }));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet disposer = new MultiDisposer(disposers);\r\n\r\n\t\t\t\tsprite.addDisposer(disposer);\r\n\t\t\t\tsprite.vpDisposer = disposer;\r\n\t\t\t}\r\n\t\t\telse if (options.queue) {\r\n\t\t\t\taddToQueue(sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (options.queue) {\r\n\t\t\taddToQueue(sprite);\r\n\t\t}\r\n\r\n\t\treturn sprite;\r\n\t}\r\n\telse {\r\n\t\tsystem.log(\"html container not found\");\r\n\t\tthrow new Error(\"html container not found\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Disposes all of the currently active charts.\r\n */\r\nexport function disposeAllCharts(): void {\r\n\twhile (registry.baseSprites.length !== 0) {\r\n\t\tregistry.baseSprites.pop().dispose();\r\n\t}\r\n}\r\n\r\nexport function addToQueue(sprite: Sprite) {\r\n\tif (registry.queue.indexOf(sprite) == -1) {\r\n\t\tsprite.__disabled = true;\r\n\t\tsprite.tooltipContainer.__disabled = true;\r\n\t\tsprite.events.disableType(\"appeared\");\r\n\r\n\t\tif (registry.queue.length == 0) {\r\n\t\t\tqueueHandler(sprite);\r\n\t\t}\r\n\r\n\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\tremoveFromQueue(sprite);\r\n\t\t}))\r\n\r\n\t\tregistry.queue.push(sprite);\r\n\t}\r\n}\r\n\r\nexport function removeFromQueue(sprite: Sprite) {\r\n\tlet index = registry.queue.indexOf(sprite);\r\n\tif (index >= 0) {\r\n\t\tregistry.queue.splice(registry.queue.indexOf(sprite), 1);\r\n\t\tlet nextSprite = registry.queue[index];\r\n\t\tif (nextSprite) {\r\n\t\t\tqueueHandler(nextSprite);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function viewPortHandler(sprite: Sprite) {\r\n\tif (sprite.__disabled && $dom.isElementInViewport(sprite.htmlContainer, options.viewportTarget)) {\r\n\r\n\t\tif (sprite.vpDisposer) {\r\n\t\t\tsprite.vpDisposer.dispose();\r\n\t\t}\r\n\r\n\t\taddToQueue(sprite);\r\n\t}\r\n}\r\n\r\nexport function queueHandler(sprite: Sprite) {\r\n\tsprite.__disabled = false;\r\n\tsprite.tooltipContainer.__disabled = false;\r\n\tsprite.events.enableType(\"appeared\");\r\n\r\n\tif (sprite.showOnInit) {\r\n\t\tsprite.events.on(\"appeared\", () => {\r\n\t\t\tremoveFromQueue(sprite);\r\n\t\t})\r\n\t}\r\n\r\n\tif (sprite.vpDisposer) {\r\n\t\tsprite.vpDisposer.dispose();\r\n\t}\r\n\r\n\tif (sprite instanceof Component) {\r\n\t\tsprite.invalidateData();\r\n\t\tsprite.reinit();\r\n\r\n\t\tsprite.events.once(\"datavalidated\", () => {\r\n\t\t\tif (sprite.showOnInit) {\r\n\t\t\t\tsprite.appear();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tremoveFromQueue(sprite);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\telse {\r\n\t\tif (sprite.showOnInit) {\r\n\t\t\tsprite.appear();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tremoveFromQueue(sprite);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param htmlElement  Reference or id of the target container element\r\n * @param classType    Class type of the target chart type\r\n * @return Chart instance\r\n */\r\nexport function create<T extends Sprite>(htmlElement: $type.Optional<HTMLElement | string>, classType: { new(): T; }): T {\r\n\r\n\t// This is a nasty hack for the benefit of vanilla JS users, who do not\r\n\t// enjoy benefits of type-check anyway.\r\n\t// We're allowing passing in a name of the class rather than type reference\r\n\t// itself.\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType)) {\r\n\t\tif ($type.hasValue(registry.registeredClasses[classType])) {\r\n\t\t\tclassType = registry.registeredClasses[classType];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclassType = registry.registeredClasses[\"Container\"];\r\n\t\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, classType);\r\n\r\n\t// Error?\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart am4core.createFromConfig({ ... }, \"chartdiv\", am4charts.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart am4core.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param config       Config object in property/value pairs\r\n * @param htmlElement  Container reference or ID\r\n * @param objectType   Chart type\r\n * @return A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config: { [index: string]: any }, htmlElement?: string | HTMLElement, classType?: { new(): Sprite; } | string): Sprite {\r\n\r\n\t// Extract chart type from config if necessary\r\n\tif (!$type.hasValue(classType)) {\r\n\t\tclassType = config.type;\r\n\t\tdelete config.type;\r\n\t}\r\n\r\n\t// Extract element from config if necessary\r\n\tif (!$type.hasValue(htmlElement)) {\r\n\t\thtmlElement = config.container;\r\n\t\tdelete config.container;\r\n\t}\r\n\r\n\t// Check if we need to extract actual type reference\r\n\tlet finalType;\r\n\tlet classError: $type.Optional<Error>;\r\n\tif ($type.isString(classType) && $type.hasValue(registry.registeredClasses[classType])) {\r\n\t\tfinalType = registry.registeredClasses[classType];\r\n\t}\r\n\telse if (typeof classType !== \"function\") {\r\n\t\tfinalType = Container;\r\n\t\tclassError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n\t}\r\n\telse {\r\n\t\tfinalType = classType;\r\n\t}\r\n\r\n\t// Create the chart\r\n\tlet chart = createChild(htmlElement, finalType);\r\n\r\n\t// Set config\r\n\tif (classError) {\r\n\t\tchart.raiseCriticalError(classError);\r\n\t}\r\n\telse {\r\n\t\tchart.config = config;\r\n\t}\r\n\r\n\treturn chart;\r\n\r\n}\r\n\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function useTheme(value: ITheme): void {\r\n\tif (registry.themes.indexOf(value) === -1) {\r\n\t\tregistry.themes.push(value);\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n *\r\n * @param value  A reference to a theme\r\n */\r\nexport function unuseTheme(value: ITheme): void {\r\n\t$array.remove(registry.themes, value);\r\n}\r\n\r\n/**\r\n * Removes all \"active\" themes. Any charts created subsequently will not have\r\n * any theme applied to them.\r\n */\r\nexport function unuseAllThemes(): void {\r\n\tregistry.themes = [];\r\n}\r\n\r\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @since 4.5.16\r\n * @param  license  License key\r\n */\r\nexport function addLicense(license: string): void {\r\n\toptions.licenses.push(license);\r\n}\r\n","/**\n * This module houses all core/framework functionality and is required for\n * all charting components to work\n */\n\n/**\n * Elements: core\n */\nexport { System, system } from \"./.internal/core/System\";\nexport { BaseObject, IBaseObjectEvents, BaseObjectEvents } from \"./.internal/core/Base\";\nexport { CalculatedValue, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters, Component } from \"./.internal/core/Component\";\nexport { ContainerLayout, IContainerProperties, IContainerEvents, IContainerAdapters, Container, FontWeight, TextDecoration } from \"./.internal/core/Container\";\nexport { IValues, IDataItemEvents, IDataItemAdapters, DataItem } from \"./.internal/core/DataItem\";\nexport { ISpriteProperties, ISpriteAnimationOptions, ISpriteAdapters, Sprite } from \"./.internal/core/Sprite\";\nexport { SpriteEventDispatcher, SpritePointEvent, SpriteMouseTouchEvent, SpriteShiftEvent, ISpriteEvents } from \"./.internal/core/SpriteEvents\";\nexport { SpriteState } from \"./.internal/core/SpriteState\";\nexport { registry, Registry, IRegistryEvents, is } from \"./.internal/core/Registry\";\nexport { options, Options } from \"./.internal/core/Options\";\n\n/**\n * Elements: data\n */\nexport { ICSVOptions, CSVParser } from \"./.internal/core/data/CSVParser\";\nexport { IDataLoaderAdapters, DataLoader, dataLoader } from \"./.internal/core/data/DataLoader\";\nexport { IDataParserOptions, DataParser } from \"./.internal/core/data/DataParser\";\nexport { IDataSourceEvents, IDataSourceAdapters, DataSource } from \"./.internal/core/data/DataSource\";\nexport { IJSONOptions, JSONParser } from \"./.internal/core/data/JSONParser\";\n\n/**\n * Elements: defs\n */\nexport { Roles, AriaLive } from \"./.internal/core/defs/Accessibility\";\nexport { Align } from \"./.internal/core/defs/Align\";\nexport { HorizontalCenter } from \"./.internal/core/defs/HorizontalCenter\";\nexport { IGeoPoint } from \"./.internal/core/defs/IGeoPoint\";\nexport { IMorphable } from \"./.internal/core/defs/IMorphable\";\nexport { IPoint, IOrientationPoint } from \"./.internal/core/defs/IPoint\";\nexport { IRectangle } from \"./.internal/core/defs/IRectangle\";\nexport { IRange } from \"./.internal/core/defs/IRange\";\nexport { IStyleProperty } from \"./.internal/core/defs/IStyleProperty\";\nexport { ITimeInterval } from \"./.internal/core/defs/ITimeInterval\";\nexport { IWavedShape } from \"./.internal/core/defs/IWavedShape\";\nexport { Orientation } from \"./.internal/core/defs/Orientation\";\nexport { ShapeRendering } from \"./.internal/core/defs/ShapeRendering\";\nexport { SVGDefaults } from \"./.internal/core/defs/SVGDefaults\";\nexport { TextAlign } from \"./.internal/core/defs/TextAlign\";\nexport { TextValign } from \"./.internal/core/defs/TextValign\";\nexport { TimeUnit } from \"./.internal/core/defs/TimeUnit\";\nexport { VerticalAlign } from \"./.internal/core/defs/VerticalAlign\";\nexport { VerticalCenter } from \"./.internal/core/defs/VerticalCenter\";\n\n/**\n * Elements: elements\n */\nexport { IButtonProperties, IButtonEvents, IButtonAdapters, Button } from \"./.internal/core/elements/Button\";\nexport { ICircleProperties, ICircleEvents, ICircleAdapters, Circle } from \"./.internal/core/elements/Circle\";\nexport { IEllipseProperties, IEllipseEvents, IEllipseAdapters, Ellipse } from \"./.internal/core/elements/Ellipse\";\nexport { IImageProperties, IImageEvents, IImageAdapters, Image } from \"./.internal/core/elements/Image\";\nexport { ITextLineInfo, ILabelProperties, ILabelEvents, ILabelAdapters, Label } from \"./.internal/core/elements/Label\";\nexport { ILineProperties, ILineEvents, ILineAdapters, Line } from \"./.internal/core/elements/Line\";\nexport { IPopupAdapters, Popup } from \"./.internal/core/elements/Popup\";\nexport { IModalAdapters, Modal } from \"./.internal/core/elements/Modal\";\nexport { IPointedRectangleProperties, IPointedRectangleEvents, IPointedRectangleAdapters, PointedRectangle } from \"./.internal/core/elements/PointedRectangle\";\nexport { IPointedShapeProperties, IPointedShapeEvents, IPointedShapeAdapters, PointedShape } from \"./.internal/core/elements/PointedShape\";\nexport { IPolyarcProperties, IPolyarcEvents, IPolyarcAdapters, Polyarc } from \"./.internal/core/elements/Polyarc\";\nexport { IPolygonProperties, IPolygonEvents, IPolygonAdapters, Polygon } from \"./.internal/core/elements/Polygon\";\nexport { IPolylineProperties, IPolylineEvents, IPolylineAdapters, Polyline } from \"./.internal/core/elements/Polyline\";\nexport { IPolysplineProperties, IPolysplineEvents, IPolysplineAdapters, Polyspline } from \"./.internal/core/elements/Polyspline\";\nexport { IPreloaderProperties, IPreloaderEvents, IPreloaderAdapters, Preloader } from \"./.internal/core/elements/Preloader\";\nexport { IRectangleProperties, IRectangleEvents, IRectangleAdapters, Rectangle } from \"./.internal/core/elements/Rectangle\";\nexport { IResizeButtonProperties, IResizeButtonEvents, IResizeButtonAdapters, ResizeButton } from \"./.internal/core/elements/ResizeButton\";\nexport { CloseButton, ICloseButtonAdapters, ICloseButtonEvents, ICloseButtonProperties } from \"./.internal/core/elements/CloseButton\";\nexport { ISwitchButtonAdapters, ISwitchButtonEvents, ISwitchButtonProperties, SwitchButton } from \"./.internal/core/elements/SwitchButton\";\nexport { IRoundedRectangleProperties, IRoundedRectangleEvents, IRoundedRectangleAdapters, RoundedRectangle } from \"./.internal/core/elements/RoundedRectangle\";\nexport { IScrollbarProperties, IScrollbarEvents, IScrollbarAdapters, Scrollbar } from \"./.internal/core/elements/Scrollbar\";\nexport { ISliderProperties, ISliderEvents, ISliderAdapters, Slider } from \"./.internal/core/elements/Slider\";\nexport { ISliceProperties, ISliceEvents, ISliceAdapters, Slice } from \"./.internal/core/elements/Slice\";\nexport { ITextLinkProperties, ITextLinkEvents, ITextLinkAdapters, TextLink } from \"./.internal/core/elements/TextLink\";\nexport { PointerOrientation, ITooltipProperties, ITooltipEvents, ITooltipAdapters, Tooltip } from \"./.internal/core/elements/Tooltip\";\nexport { ITrapezoidProperties, ITrapezoidEvents, ITrapezoidAdapters, Trapezoid } from \"./.internal/core/elements/Trapezoid\";\nexport { ITriangleProperties, ITriangleEvents, ITriangleAdapters, Triangle } from \"./.internal/core/elements/Triangle\";\nexport { IWavedCircleProperties, IWavedCircleEvents, IWavedCircleAdapters, WavedCircle } from \"./.internal/core/elements/WavedCircle\";\nexport { IWavedLineProperties, IWavedLineEvents, IWavedLineAdapters, WavedLine } from \"./.internal/core/elements/WavedLine\";\nexport { IWavedRectangleProperties, IWavedRectangleEvents, IWavedRectangleAdapters, WavedRectangle } from \"./.internal/core/elements/WavedRectangle\";\nexport { IZoomOutButtonProperties, IZoomOutButtonEvents, IZoomOutButtonAdapters, ZoomOutButton } from \"./.internal/core/elements/ZoomOutButton\";\nexport { IPlayButtonProperties, IPlayButtonEvents, IPlayButtonAdapters, PlayButton } from \"./.internal/core/elements/PlayButton\";\n\n/**\n * Elements: 3d\n */\nexport { IConeProperties, IConeEvents, IConeAdapters, Cone } from \"./.internal/core/elements/3d/Cone\";\nexport { Rectangle3DProperties, Rectangle3DEvents, Rectangle3DAdapters, Rectangle3D } from \"./.internal/core/elements/3d/Rectangle3D\";\nexport { ISlice3DProperties, ISlice3DEvents, ISlice3DAdapters, Slice3D } from \"./.internal/core/elements/3d/Slice3D\";\n\n/**\n * Elements: export\n */\nexport { ExportOperation, imageFormats, IExportImageOptions, IExportSVGOptions, pageSizes, IExportPDFOptions, IExportCSVOptions, IExportJSONOptions, IExportExcelOptions, IExportPrintOptions, IExportRemovedObject, IExportOptions, ExportOptions, IExportEvents, Keys, IExportAdapters, Export } from \"./.internal/core/export/Export\";\nexport { IExportMenuItem, IExportMenuEvents, IExportMenuAdapters, ExportMenu } from \"./.internal/core/export/ExportMenu\";\n\n/**\n * Elements: formatters\n */\nexport { DateFormatInfo, DateFormatter } from \"./.internal/core/formatters/DateFormatter\";\nexport { DurationFormatter } from \"./.internal/core/formatters/DurationFormatter\";\nexport { NumberFormatter } from \"./.internal/core/formatters/NumberFormatter\";\nexport { ITextChunk, ITextFormatterAdapters, TextFormatter, getTextFormatter } from \"./.internal/core/formatters/TextFormatter\";\n\n/**\n * Elements: interaction\n */\nexport { InertiaTypes, Inertia } from \"./.internal/core/interaction/Inertia\";\nexport { IInteractionEvents, Interaction, getInteraction } from \"./.internal/core/interaction/Interaction\";\nexport { InteractionKeyboardObject } from \"./.internal/core/interaction/InteractionKeyboardObject\";\nexport { InteractionObject } from \"./.internal/core/interaction/InteractionObject\";\nexport { PointEvent, PointerEvent, ShiftEvent, AngleEvent, ScaleEvent, CenterEvent, MouseTouchEvent, SimulatedKeyboardEvent, IInteractionObjectEvents, InteractionObjectEventDispatcher } from \"./.internal/core/interaction/InteractionObjectEvents\";\nexport { IInertiaOptions, IHitOptions, ISwipeOptions, ICursorOptions, IKeyboardOptions } from \"./.internal/core/interaction/InteractionOptions\";\nexport { MouseCursorStyle } from \"./.internal/core/interaction/Mouse\";\nexport { IPointer, IBreadcrumb } from \"./.internal/core/interaction/Pointer\";\n\n/**\n * Elements: rendering\n */\nexport { SVGAttribute, ISVGAttribute, AMElement } from \"./.internal/core/rendering/AMElement\";\nexport { Group } from \"./.internal/core/rendering/Group\";\nexport { SVGElementNames, Paper } from \"./.internal/core/rendering/Paper\";\nexport { ISmoothing, Tension, Basis } from \"./.internal/core/rendering/Smoothing\";\nexport { SVGContainer } from \"./.internal/core/rendering/SVGContainer\";\n\n/**\n * Elements: fills\n */\nexport { ColorModifier } from \"./.internal/core/rendering/fills/ColorModifier\";\nexport { IGradientStop, LinearGradient } from \"./.internal/core/rendering/fills/LinearGradient\";\nexport { LinearGradientModifier } from \"./.internal/core/rendering/fills/LinearGradientModifier\";\nexport { RadialGradientModifier } from \"./.internal/core/rendering/fills/RadialGradientModifier\";\nexport { LinePattern } from \"./.internal/core/rendering/fills/LinePattern\";\nexport { CirclePattern } from \"./.internal/core/rendering/fills/CirclePattern\";\nexport { PatternUnits, PatternProperties, Pattern } from \"./.internal/core/rendering/fills/Pattern\";\nexport { RadialGradient } from \"./.internal/core/rendering/fills/RadialGradient\";\nexport { RectPatternProperties, RectPattern } from \"./.internal/core/rendering/fills/RectPattern\";\n\n/**\n * Elements: filters\n */\nexport { ColorizeFilterProperties, ColorizeFilter } from \"./.internal/core/rendering/filters/ColorizeFilter\";\nexport { DesaturateFilterProperties, DesaturateFilter } from \"./.internal/core/rendering/filters/DesaturateFilter\";\nexport { DropShadowFilterProperties, DropShadowFilter } from \"./.internal/core/rendering/filters/DropShadowFilter\";\nexport { BlurFilterProperties, BlurFilter } from \"./.internal/core/rendering/filters/BlurFilter\";\nexport { FilterProperties, Filter } from \"./.internal/core/rendering/filters/Filter\";\nexport { FocusFilterProperties, FocusFilter } from \"./.internal/core/rendering/filters/FocusFilter\";\nexport { LightenFilterProperties, LightenFilter } from \"./.internal/core/rendering/filters/LightenFilter\";\n\n/**\n * Elements: utils\n */\nexport { GlobalAdapter, globalAdapter, Adapter } from \"./.internal/core/utils/Adapter\";\nexport { IAnimationObject, IAnimatable, IAnimationOptions, IPercentAnimationOptions, IColorAnimationOptions, IAnimationEvents, Animation, animate } from \"./.internal/core/utils/Animation\";\nexport { SortResult } from \"./.internal/core/utils/Array\";\nexport { Listener, nextFrame, readFrame, writeFrame, whenIdle, triggerIdle } from \"./.internal/core/utils/AsyncPending\";\nexport { Cache, cache } from \"./.internal/core/utils/Cache\";\nexport { IClone } from \"./.internal/core/utils/Clone\";\nexport { Color, iRGB, iHSL, iHSV, color, isColor, castColor } from \"./.internal/core/utils/Color\";\nexport { IColorSetStepOptions, ColorSet } from \"./.internal/core/utils/ColorSet\";\nexport { PatternSet } from \"./.internal/core/utils/PatternSet\";\nexport { IColorPurpose, InterfaceColorSet } from \"./.internal/core/utils/InterfaceColorSet\";\nexport { Constructor } from \"./.internal/core/utils/Constructor\";\nexport { IDictionaryEvents, DictionaryLike, DictionaryDisposer, Dictionary, DictionaryTemplate } from \"./.internal/core/utils/Dictionary\";\nexport { IDisposer, Disposer, MultiDisposer, MutableValueDisposer, CounterDisposer } from \"./.internal/core/utils/Disposer\";\nexport { StyleRule, StyleClass, getElement, addClass, removeClass, blur, focus, outerHTML, isElement, copyAttributes, fixPixelPerfect, ready } from \"./.internal/core/utils/DOM\";\nexport { AMEvent, EventListener, EventDispatcher, TargetedEventDispatcher } from \"./.internal/core/utils/EventDispatcher\";\nexport { Iterator, Iterable, ListIterator, min, max, join } from \"./.internal/core/utils/Iterator\";\nexport { KeyboardKeys, Keyboard, keyboard } from \"./.internal/core/utils/Keyboard\";\nexport { ILanguageEvents, ILanguageAdapters, Language } from \"./.internal/core/utils/Language\";\nexport { IndexedIterable, IListEvents, ListGrouper, ListLike, ListDisposer, List, ListTemplate } from \"./.internal/core/utils/List\";\nexport { Morpher } from \"./.internal/core/utils/Morpher\";\nexport { INetLoadResult } from \"./.internal/core/utils/Net\";\nexport { Ordering, reverse, or } from \"./.internal/core/utils/Order\";\nexport { Percent, percent, isPercent } from \"./.internal/core/utils/Percent\";\nexport { Plugin, IPlugin } from \"./.internal/core/utils/Plugin\";\nexport { IResponsiveRule, IResponsiveEvents, IResponsiveAdapters, Responsive, ResponsiveBreakpoints, defaultRules } from \"./.internal/core/utils/Responsive\";\nexport { ISortedListEvents, OrderedList, SortedList, OrderedListTemplate, SortedListTemplate } from \"./.internal/core/utils/SortedList\";\nexport { PX, STRING, NUMBER, DATE, DURATION, PLACEHOLDER, PLACEHOLDER2 } from \"./.internal/core/utils/Strings\";\nexport { Public, Optional, isNaN, checkString, checkBoolean, checkNumber, checkObject, castString, castNumber, isString, isNumber, isObject, isArray } from \"./.internal/core/utils/Type\";\nexport { Validatable } from \"./.internal/core/utils/Validatable\";\n\n/**\n * Functions: rendering\n */\nimport * as path from \"./.internal/core/rendering/Path\";\nexport { path }\n\n\n/**\n * Functions: utils\n */\nimport * as colors from \"./.internal/core/utils/Colors\";\nexport { colors }\n\nimport * as ease from \"./.internal/core/utils/Ease\";\nexport { ease }\n\nimport * as math from \"./.internal/core/utils/Math\";\nexport { math }\n\nimport * as array from \"./.internal/core/utils/Array\";\nexport { array }\n\nimport * as number from \"./.internal/core/utils/Number\";\nexport { number }\n\nimport * as object from \"./.internal/core/utils/Object\";\nexport { object }\n\nimport * as string from \"./.internal/core/utils/String\";\nexport { string }\n\nimport * as time from \"./.internal/core/utils/Time\";\nexport { time }\n\nimport * as utils from \"./.internal/core/utils/Utils\";\nexport { utils }\n\nimport * as iter from \"./.internal/core/utils/Iterator\";\nexport { iter }\n\nimport * as type from \"./.internal/core/utils/Type\";\nexport { type }\n\nexport { ITheme } from \"./.internal/themes/ITheme\";\nexport { create, createFromConfig, disposeAllCharts } from \"./.internal/core/utils/Instance\";\nexport { useTheme, unuseTheme, unuseAllThemes, addLicense } from \"./.internal/core/utils/Instance\";\n"],"sourceRoot":""}