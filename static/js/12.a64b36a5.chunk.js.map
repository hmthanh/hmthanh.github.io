{"version":3,"sources":["../../../../../src/.internal/core/utils/Colors.ts","../../../../../src/.internal/themes/dark.ts","../../../../../src/.internal/core/utils/Color.ts"],"names":["namedColors","aliceblue","r","g","b","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","rgb","color","alpha","charAt","hexToRgb","match","rgbaToRgb","a","hex","replace","m","result","exec","parseInt","hexToRgbWithAlpha","undefined","matches","push","parseFloat","rgbToHex","pad2","toString","rgbToRGBA","c","length","interpolate","rgb1","rgb2","percent","Math","round","lighten","max","min","getLightnessStep","value","base","brighten","step","getBrightnessStep","saturate","saturation","hsl","rgbToHsl","s","hslToRgb","h","l","hue2rgb","p","q","t","d","rgbToHsv","v","hsvToRgb","i","floor","f","isLight","object","setFor","background","fillOpacity","thumb","this","_value","_lightColor","Color","_darkColor","rgba","darkColor","lightColor","Error","cacheId","cached","getCache","setCache","isColor","castColor","toColor"],"mappings":"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","file":"static/js/12.a64b36a5.chunk.js","sourcesContent":["/**\r\n * A collection of color-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\r\nlet namedColors = {\r\n\taliceblue: { r: 240, g: 248, b: 255 },\r\n\tantiquewhite: { r: 250, g: 235, b: 215 },\r\n\taqua: { r: 0, g: 255, b: 255 },\r\n\taquamarine: { r: 127, g: 255, b: 212 },\r\n\tazure: { r: 240, g: 255, b: 255 },\r\n\tbeige: { r: 245, g: 245, b: 220 },\r\n\tbisque: { r: 255, g: 228, b: 196 },\r\n\tblack: { r: 0, g: 0, b: 0 },\r\n\tblanchedalmond: { r: 255, g: 235, b: 205 },\r\n\tblue: { r: 0, g: 0, b: 255 },\r\n\tblueviolet: { r: 138, g: 43, b: 226 },\r\n\tbrown: { r: 165, g: 42, b: 42 },\r\n\tburlywood: { r: 222, g: 184, b: 135 },\r\n\tcadetblue: { r: 95, g: 158, b: 160 },\r\n\tchartreuse: { r: 127, g: 255, b: 0 },\r\n\tchocolate: { r: 210, g: 105, b: 30 },\r\n\tcoral: { r: 255, g: 127, b: 80 },\r\n\tcornflowerblue: { r: 100, g: 149, b: 237 },\r\n\tcornsilk: { r: 255, g: 248, b: 220 },\r\n\tcrimson: { r: 220, g: 20, b: 60 },\r\n\tcyan: { r: 0, g: 255, b: 255 },\r\n\tdarkblue: { r: 0, g: 0, b: 139 },\r\n\tdarkcyan: { r: 0, g: 139, b: 139 },\r\n\tdarkgoldenrod: { r: 184, g: 134, b: 11 },\r\n\tdarkgray: { r: 169, g: 169, b: 169 },\r\n\tdarkgrey: { r: 169, g: 169, b: 169 },\r\n\tdarkgreen: { r: 0, g: 100, b: 0 },\r\n\tdarkkhaki: { r: 189, g: 183, b: 107 },\r\n\tdarkmagenta: { r: 139, g: 0, b: 139 },\r\n\tdarkolivegreen: { r: 85, g: 107, b: 47 },\r\n\tdarkorange: { r: 255, g: 140, b: 0 },\r\n\tdarkorchid: { r: 153, g: 50, b: 204 },\r\n\tdarkred: { r: 139, g: 0, b: 0 },\r\n\tdarksalmon: { r: 233, g: 150, b: 122 },\r\n\tdarkseagreen: { r: 143, g: 188, b: 143 },\r\n\tdarkslateblue: { r: 72, g: 61, b: 139 },\r\n\tdarkslategray: { r: 47, g: 79, b: 79 },\r\n\tdarkslategrey: { r: 47, g: 79, b: 79 },\r\n\tdarkturquoise: { r: 0, g: 206, b: 209 },\r\n\tdarkviolet: { r: 148, g: 0, b: 211 },\r\n\tdeeppink: { r: 255, g: 20, b: 147 },\r\n\tdeepskyblue: { r: 0, g: 191, b: 255 },\r\n\tdimgray: { r: 105, g: 105, b: 105 },\r\n\tdimgrey: { r: 105, g: 105, b: 105 },\r\n\tdodgerblue: { r: 30, g: 144, b: 255 },\r\n\tfirebrick: { r: 178, g: 34, b: 34 },\r\n\tfloralwhite: { r: 255, g: 250, b: 240 },\r\n\tforestgreen: { r: 34, g: 139, b: 34 },\r\n\tfuchsia: { r: 255, g: 0, b: 255 },\r\n\tgainsboro: { r: 220, g: 220, b: 220 },\r\n\tghostwhite: { r: 248, g: 248, b: 255 },\r\n\tgold: { r: 255, g: 215, b: 0 },\r\n\tgoldenrod: { r: 218, g: 165, b: 32 },\r\n\tgray: { r: 128, g: 128, b: 128 },\r\n\tgrey: { r: 128, g: 128, b: 128 },\r\n\tgreen: { r: 0, g: 128, b: 0 },\r\n\tgreenyellow: { r: 173, g: 255, b: 47 },\r\n\thoneydew: { r: 240, g: 255, b: 240 },\r\n\thotpink: { r: 255, g: 105, b: 180 },\r\n\tindianred: { r: 205, g: 92, b: 92 },\r\n\tindigo: { r: 75, g: 0, b: 130 },\r\n\tivory: { r: 255, g: 255, b: 240 },\r\n\tkhaki: { r: 240, g: 230, b: 140 },\r\n\tlavender: { r: 230, g: 230, b: 250 },\r\n\tlavenderblush: { r: 255, g: 240, b: 245 },\r\n\tlawngreen: { r: 124, g: 252, b: 0 },\r\n\tlemonchiffon: { r: 255, g: 250, b: 205 },\r\n\tlightblue: { r: 173, g: 216, b: 230 },\r\n\tlightcoral: { r: 240, g: 128, b: 128 },\r\n\tlightcyan: { r: 224, g: 255, b: 255 },\r\n\tlightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n\tlightgray: { r: 211, g: 211, b: 211 },\r\n\tlightgrey: { r: 211, g: 211, b: 211 },\r\n\tlightgreen: { r: 144, g: 238, b: 144 },\r\n\tlightpink: { r: 255, g: 182, b: 193 },\r\n\tlightsalmon: { r: 255, g: 160, b: 122 },\r\n\tlightseagreen: { r: 32, g: 178, b: 170 },\r\n\tlightskyblue: { r: 135, g: 206, b: 250 },\r\n\tlightslategray: { r: 119, g: 136, b: 153 },\r\n\tlightslategrey: { r: 119, g: 136, b: 153 },\r\n\tlightsteelblue: { r: 176, g: 196, b: 222 },\r\n\tlightyellow: { r: 255, g: 255, b: 224 },\r\n\tlime: { r: 0, g: 255, b: 0 },\r\n\tlimegreen: { r: 50, g: 205, b: 50 },\r\n\tlinen: { r: 250, g: 240, b: 230 },\r\n\tmagenta: { r: 255, g: 0, b: 255 },\r\n\tmaroon: { r: 128, g: 0, b: 0 },\r\n\tmediumaquamarine: { r: 102, g: 205, b: 170 },\r\n\tmediumblue: { r: 0, g: 0, b: 205 },\r\n\tmediumorchid: { r: 186, g: 85, b: 211 },\r\n\tmediumpurple: { r: 147, g: 112, b: 219 },\r\n\tmediumseagreen: { r: 60, g: 179, b: 113 },\r\n\tmediumslateblue: { r: 123, g: 104, b: 238 },\r\n\tmediumspringgreen: { r: 0, g: 250, b: 154 },\r\n\tmediumturquoise: { r: 72, g: 209, b: 204 },\r\n\tmediumvioletred: { r: 199, g: 21, b: 133 },\r\n\tmidnightblue: { r: 25, g: 25, b: 112 },\r\n\tmintcream: { r: 245, g: 255, b: 250 },\r\n\tmistyrose: { r: 255, g: 228, b: 225 },\r\n\tmoccasin: { r: 255, g: 228, b: 181 },\r\n\tnavajowhite: { r: 255, g: 222, b: 173 },\r\n\tnavy: { r: 0, g: 0, b: 128 },\r\n\toldlace: { r: 253, g: 245, b: 230 },\r\n\tolive: { r: 128, g: 128, b: 0 },\r\n\tolivedrab: { r: 107, g: 142, b: 35 },\r\n\torange: { r: 255, g: 165, b: 0 },\r\n\torangered: { r: 255, g: 69, b: 0 },\r\n\torchid: { r: 218, g: 112, b: 214 },\r\n\tpalegoldenrod: { r: 238, g: 232, b: 170 },\r\n\tpalegreen: { r: 152, g: 251, b: 152 },\r\n\tpaleturquoise: { r: 175, g: 238, b: 238 },\r\n\tpalevioletred: { r: 219, g: 112, b: 147 },\r\n\tpapayawhip: { r: 255, g: 239, b: 213 },\r\n\tpeachpuff: { r: 255, g: 218, b: 185 },\r\n\tperu: { r: 205, g: 133, b: 63 },\r\n\tpink: { r: 255, g: 192, b: 203 },\r\n\tplum: { r: 221, g: 160, b: 221 },\r\n\tpowderblue: { r: 176, g: 224, b: 230 },\r\n\tpurple: { r: 128, g: 0, b: 128 },\r\n\trebeccapurple: { r: 102, g: 51, b: 153 },\r\n\tred: { r: 255, g: 0, b: 0 },\r\n\trosybrown: { r: 188, g: 143, b: 143 },\r\n\troyalblue: { r: 65, g: 105, b: 225 },\r\n\tsaddlebrown: { r: 139, g: 69, b: 19 },\r\n\tsalmon: { r: 250, g: 128, b: 114 },\r\n\tsandybrown: { r: 244, g: 164, b: 96 },\r\n\tseagreen: { r: 46, g: 139, b: 87 },\r\n\tseashell: { r: 255, g: 245, b: 238 },\r\n\tsienna: { r: 160, g: 82, b: 45 },\r\n\tsilver: { r: 192, g: 192, b: 192 },\r\n\tskyblue: { r: 135, g: 206, b: 235 },\r\n\tslateblue: { r: 106, g: 90, b: 205 },\r\n\tslategray: { r: 112, g: 128, b: 144 },\r\n\tslategrey: { r: 112, g: 128, b: 144 },\r\n\tsnow: { r: 255, g: 250, b: 250 },\r\n\tspringgreen: { r: 0, g: 255, b: 127 },\r\n\tsteelblue: { r: 70, g: 130, b: 180 },\r\n\ttan: { r: 210, g: 180, b: 140 },\r\n\tteal: { r: 0, g: 128, b: 128 },\r\n\tthistle: { r: 216, g: 191, b: 216 },\r\n\ttomato: { r: 255, g: 99, b: 71 },\r\n\tturquoise: { r: 64, g: 224, b: 208 },\r\n\tviolet: { r: 238, g: 130, b: 238 },\r\n\twheat: { r: 245, g: 222, b: 179 },\r\n\twhite: { r: 255, g: 255, b: 255 },\r\n\twhitesmoke: { r: 245, g: 245, b: 245 },\r\n\tyellow: { r: 255, g: 255, b: 0 },\r\n\tyellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n\r\n\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n\treturn (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\r\nexport function rgb(color: string, alpha?: number): iRGB {\r\n\r\n\t// Init return value\r\n\tlet rgb: $type.Optional<iRGB>;\r\n\r\n\t// Try resolving color format\r\n\r\n\t// Named color?\r\n\tif ((<any>namedColors)[color]) {\r\n\t\trgb = (<any>namedColors)[color];\r\n\t}\r\n\r\n\t// Hex code?\r\n\telse if (color.charAt(0) === \"#\") {\r\n\t\trgb = hexToRgb(color);\r\n\t}\r\n\r\n\t// rgb() format?\r\n\telse if (color.match(/^rgba?\\(/)) {\r\n\t\trgb = rgbaToRgb(color);\r\n\t}\r\n\r\n\t// Was not able to resolve?\r\n\tif (!rgb) {\r\n\t\trgb = { r: 0, g: 0, b: 0, a: 1 };\r\n\t}\r\n\r\n\t// Set alpha\r\n\tif ($type.hasValue(alpha)) {\r\n\t\trgb.a = alpha;\r\n\t}\r\n\r\n\treturn rgb;\r\n}\r\n\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgb(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n\t\treturn r + r + g + g + b + b;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16)\r\n\t} : hexToRgbWithAlpha(hex);\r\n}\r\n\r\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgbWithAlpha(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b, a) {\r\n\t\treturn r + r + g + g + b + b + a + a;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16),\r\n\t\ta: parseInt(result[4], 16) / 256\r\n\t} : undefined;\r\n}\r\n\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\r\nexport function rgbaToRgb(color: string): $type.Optional<iRGB> {\r\n\tcolor = color.replace(/[ ]/g, \"\");\r\n\r\n\t// Init\r\n\tlet matches: string[] | null = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\r\n\r\n\t// Try rgb() format\r\n\tif (matches) {\r\n\t\tmatches.push(\"1\");\r\n\r\n\t} else {\r\n\t\tmatches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: parseInt(matches[1]),\r\n\t\tg: parseInt(matches[2]),\r\n\t\tb: parseInt(matches[3]),\r\n\t\ta: parseFloat(matches[4])\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\r\nexport function rgbToHex(rgb: iRGB): string {\r\n\treturn \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb: iRGB): string {\r\n\tif ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n\t\treturn \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n\t}\r\n\telse {\r\n\t\treturn \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\r\nexport function pad2(c: string): string {\r\n\treturn c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\r\nexport function interpolate(rgb1: $type.Optional<iRGB>, rgb2: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tpercent = $math.fitToRange(percent, 0, 1);\r\n\r\n\tif (rgb1) {\r\n\t\tif (rgb2) {\r\n\t\t\treturn {\r\n\t\t\t\tr: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n\t\t\t\tg: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n\t\t\t\tb: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n\t\t\t\ta: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\t\t\treturn rgb1;\r\n\t\t}\r\n\r\n\t} else if (rgb2) {\r\n\t\treturn rgb2;\r\n\r\n\t} else {\r\n\t\treturn rgb1;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\r\nexport function lighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n\t\t\tg: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n\t\t\tb: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getLightnessStep(value: number, percent: number): number {\r\n\tlet base = percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\r\nexport function brighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\tlet base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n\t\t//let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n\t\tlet step = getLightnessStep(base, percent);\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n\t\t\tg: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n\t\t\tb: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getBrightnessStep(value: number, percent: number): number {\r\n\tlet base = 255; //percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\r\nexport function saturate(rgb: $type.Optional<iRGB>, saturation: number): $type.Optional<iRGB> {\r\n\tif (rgb == null || saturation == 1) {\r\n\t\treturn rgb;\r\n\t}\r\n\r\n\tlet hsl = rgbToHsl(rgb);\r\n\thsl.s = saturation;\r\n\treturn hslToRgb(hsl);\r\n}\r\n\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n\tlet r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n\tlet g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n\tlet b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n\tlet a = $type.toText(rgb.a || 1);\r\n\treturn\t      r + \" 0 0 0 0\" +\r\n\t\t\t\t\t\" 0 \" + g + \" 0 0 0\" +\r\n\t\t\t\t\t\" 0 0 \" + b + \" 0 0\" +\r\n\t\t\t\t\t\" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\r\nexport function hslToRgb(color: iHSL): iRGB {\r\n\tlet r, g, b;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet l = color.l;\r\n\r\n\tif (s == 0) {\r\n\t\tr = g = b = l; // achromatic\r\n\t} else {\r\n\t\tlet hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n\t\t\tif (t < 0) { t += 1; }\r\n\t\t\tif (t > 1) { t -= 1; }\r\n\t\t\tif (t < 1 / 6) { return p + (q - p) * 6 * t; }\r\n\t\t\tif (t < 1 / 2) { return q; }\r\n\t\t\tif (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\tlet q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\t\tlet p = 2 * l - q;\r\n\t\tr = hue2rgb(p, q, h + 1 / 3);\r\n\t\tg = hue2rgb(p, q, h);\r\n\t\tb = hue2rgb(p, q, h - 1 / 3);\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\r\nexport function rgbToHsl(color: iRGB): iHSL {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b);\r\n\tlet min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet l = (max + min) / 2;\r\n\r\n\tif (max === min) {\r\n\t\th = s = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tlet d = max - min;\r\n\r\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tl: l\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color: iRGB): iHSV {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet v = max;\r\n\r\n\tlet d = max - min;\r\n\ts = max == 0 ? 0 : d / max;\r\n\r\n\tif (max == min) {\r\n\t\th = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tv: v\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color: iHSV): iRGB {\r\n\tlet r = 0;\r\n\tlet g = 0;\r\n\tlet b = 0;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet v = color.v;\r\n\r\n\tlet i = Math.floor(h * 6);\r\n\tlet f = h * 6 - i;\r\n\tlet p = v * (1 - s);\r\n\tlet q = v * (1 - f * s);\r\n\tlet t = v * (1 - (1 - f) * s);\r\n\r\n\tswitch (i % 6) {\r\n\t\tcase 0:\r\n\t\t\tr = v;\r\n\t\t\tg = t;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tr = q;\r\n\t\t\tg = v;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tr = p;\r\n\t\t\tg = v;\r\n\t\t\tb = t;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tr = p;\r\n\t\t\tg = q;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\tr = t;\r\n\t\t\tg = p;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\tr = v;\r\n\t\t\tg = p;\r\n\t\t\tb = q;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\r\nexport function isLight(color: iRGB): boolean {\r\n\treturn ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * COLOR CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an interface for an object that represents an RGB color.\r\n */\r\nexport interface iRGB {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSL color.\r\n */\r\nexport interface iHSL {\r\n\th: number;\r\n\ts: number;\r\n\tl: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSV color.\r\n */\r\nexport interface iHSV {\r\n\th: number;\r\n\ts: number;\r\n\tv: number;\r\n\ta?: number;\r\n}\r\n","import { ITheme } from \"./ITheme\";\r\nimport { is } from \"../core/Registry\";\r\nimport { color } from \"../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { BaseObject } from \"../core/Base\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\nconst theme: ITheme = (object: BaseObject) => {\r\n\tif (is<InterfaceColorSet>(object, \"InterfaceColorSet\")) {\r\n\t\tobject.setFor(\"stroke\", color(\"#000000\"));\r\n\t\tobject.setFor(\"fill\", color(\"#2b2b2b\"));\r\n\r\n\t\tobject.setFor(\"primaryButton\", color(\"#6794dc\").lighten(-0.2));\r\n\t\tobject.setFor(\"primaryButtonHover\", color(\"#6771dc\").lighten(-0.2));\r\n\t\tobject.setFor(\"primaryButtonDown\", color(\"#68dc75\").lighten(-0.2));\r\n\t\tobject.setFor(\"primaryButtonActive\", color(\"#68dc75\").lighten(-0.2));\r\n\t\tobject.setFor(\"primaryButtonText\", color(\"#FFFFFF\"));\r\n\t\tobject.setFor(\"primaryButtonStroke\", color(\"#6794dc\"));\r\n\r\n\t\tobject.setFor(\"secondaryButton\", color(\"#3b3b3b\"));\r\n\t\tobject.setFor(\"secondaryButtonHover\", color(\"#3b3b3b\").lighten(0.1));\r\n\t\tobject.setFor(\"secondaryButtonDown\", color(\"#3b3b3b\").lighten(0.15));\r\n\t\tobject.setFor(\"secondaryButtonActive\", color(\"#3b3b3b\").lighten(0.15));\r\n\t\tobject.setFor(\"secondaryButtonText\", color(\"#bbbbbb\"));\r\n\t\tobject.setFor(\"secondaryButtonStroke\", color(\"#3b3b3b\").lighten(-0.2));\r\n\r\n\t\tobject.setFor(\"grid\", color(\"#bbbbbb\"));\r\n\t\tobject.setFor(\"background\", color(\"#000000\"));\r\n\t\tobject.setFor(\"alternativeBackground\", color(\"#ffffff\"));\r\n\t\tobject.setFor(\"text\", color(\"#ffffff\"));\r\n\t\tobject.setFor(\"alternativeText\", color(\"#000000\"));\r\n\t\tobject.setFor(\"disabledBackground\", color(\"#bbbbbb\"));\r\n\t}\r\n\r\n\r\n\tif (is<Scrollbar>(object, \"Scrollbar\")) {\r\n\t\tobject.background.fillOpacity = 0.4;\r\n\t\tobject.thumb.background.fillOpacity = 0.5;\r\n\t}\r\n\r\n};\r\n\r\nexport default theme;\r\n","/**\r\n * This module contains Color object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { iRGB, iHSV, iHSL } from \"./Colors\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n\r\n// Re-export\r\nexport { iRGB, iHSV, iHSL };\r\n\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class Color {\r\n\r\n\t/**\r\n\t * Light color (used when light contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _lightColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Dark color (used when dark contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _darkColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Holds RGB value of the color.\r\n\t */\r\n\tprotected _value: $type.Optional<iRGB>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param color Source color\r\n\t */\r\n\tconstructor(color: $type.Optional<iRGB>) {\r\n\t\tthis._value = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[iRGB]] representation of the color.\r\n\t *\r\n\t * @return RGB object\r\n\t */\r\n\tpublic get rgb(): $type.Optional<iRGB> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns color hex value string, e.g. \"#FF0000\".\r\n\t *\r\n\t * @return Hex color code\r\n\t */\r\n\tpublic get hex(): string {\r\n\t\treturn this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `rgba()` representation of the color, e.g.:\r\n\t * `rgba(255, 0, 0, 0.5)`.\r\n\t *\r\n\t * @return rgba color string\r\n\t */\r\n\tpublic get rgba(): string {\r\n\t\treturn this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Set alpha (transparency) of the color.\r\n\t *\r\n\t * @param value Alpha (0-1)\r\n\t */\r\n\tpublic set alpha(value: number) {\r\n\t\tif (this._value) {\r\n\t\t\tthis._value.a = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current transparency.\r\n\t *\r\n\t * @return Alpha (0-1)\r\n\t */\r\n\tpublic get alpha(): number {\r\n\t\tif (this._value != null && this._value.a != null) {\r\n\t\t\treturn this._value.a;\r\n\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"light\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set lightColor(color: Color) {\r\n\t\tthis._lightColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current light color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get lightColor(): Color {\r\n\t\tif (!this._lightColor) {\r\n\t\t\tthis._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n\t\t}\r\n\t\treturn this._lightColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"dark\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set darkColor(color: Color) {\r\n\t\tthis._darkColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current dark color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get darkColor(): Color {\r\n\t\tif (!this._darkColor) {\r\n\t\t\tthis._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n\t\t}\r\n\t\treturn this._darkColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Overrides `toString` method so that [[Color]] object can be used as\r\n\t * string.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return String represantion of color (usable in CSS)\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn this.alpha < 1 ? this.rgba : this.hex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent lighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease lightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic lighten(percent: number): Color {\r\n\t\treturn new Color($colors.lighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent brighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease brightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic brighten(percent: number): Color {\r\n\t\treturn new Color($colors.brighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] based on current color with specific saturation\r\n\t * applied.\r\n\t *\r\n\t * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n\t * saturated).\r\n\t *\r\n\t * @param saturation  Saturation (0-1)\r\n\t * @return New (saturated) color\r\n\t */\r\n\tpublic saturate(saturation: number): Color {\r\n\t\treturn new Color($colors.saturate(this.rgb, saturation));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a either light or dark color that contrasts specifically with\r\n\t * this color.\r\n\t *\r\n\t * Uses properties `darkColor` (default black) and `lightColor` (default\r\n\t * white).\r\n\t *\r\n\t * Useful when determining which color label should be on a colored\r\n\t * background, so that it stands out.\r\n\t *\r\n\t * @return Contrasting color\r\n\t */\r\n\tpublic get alternative(): Color {\r\n\t\tif (this.rgb != null) {\r\n\t\t\treturn $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Color does not exist\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\r\nexport function color(value?: string | iRGB | Color, alpha?: number): Color {\r\n\r\n\tif (!$type.hasValue(value)) {\r\n\t\treturn new Color(undefined);\r\n\t}\r\n\r\n\tif (typeof value == \"string\") {\r\n\t\tlet cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n\t\tlet cached = registry.getCache(cacheId);\r\n\t\tif (cached) {\r\n\t\t\treturn new Color({\r\n\t\t\t\tr: cached.r,\r\n\t\t\t\tg: cached.g,\r\n\t\t\t\tb: cached.b,\r\n\t\t\t\ta: cached.a\r\n\t\t\t});\r\n\t\t}\r\n\t\tlet rgb = $colors.rgb(value, alpha);\r\n\t\tregistry.setCache(cacheId, rgb);\r\n\t\treturn new Color(rgb);\r\n\t}\r\n\r\n\t// Check if it's already a Color object\r\n\tif (value instanceof Color) {\r\n\t\tif ($type.hasValue(alpha)) {\r\n\t\t\tvalue.alpha = alpha;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Not a string or Color instance, it's the iRGB object then\r\n\treturn new Color(value);\r\n}\r\n\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\r\nexport function isColor(value: any): boolean {\r\n\treturn value instanceof Color;\r\n}\r\n\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\r\nexport function castColor(value: any): Color {\r\n\treturn color(value);\r\n}\r\n\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\r\nexport function toColor(value: any): Color {\r\n\tif ($type.hasValue(value) && !isColor(value)) {\r\n\t\treturn castColor(value);\r\n\t}\r\n\treturn value;\r\n}\r\n"],"sourceRoot":""}