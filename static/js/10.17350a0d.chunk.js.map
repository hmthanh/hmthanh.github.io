{"version":3,"sources":["../node_modules/polylabel/index.js","../node_modules/tinyqueue/index.js","../../../src/.internal/charts/Legend.ts","../../../src/.internal/charts/axes/AxisBreak.ts","../../../src/.internal/charts/axes/Axis.ts","../../../src/.internal/charts/axes/AxisLine.ts","../../../src/.internal/charts/axes/AxisFill.ts","../../../src/.internal/charts/axes/Grid.ts","../../../src/.internal/charts/axes/AxisLabel.ts","../../../src/.internal/charts/elements/Tick.ts","../../../src/.internal/charts/axes/AxisTick.ts","../../../src/.internal/charts/axes/AxisRenderer.ts","../../../src/.internal/charts/axes/AxisBullet.ts","../../../src/.internal/charts/axes/AxisRendererY.ts","../../../src/.internal/charts/axes/ValueAxisBreak.ts","../../../src/.internal/charts/axes/ValueAxis.ts","../../../src/.internal/charts/axes/AxisRendererX.ts","../../../src/.internal/charts/elements/HeatLegend.ts","../../../src/.internal/core/elements/Grip.ts","../../../src/.internal/charts/Chart.ts","../../../src/.internal/charts/elements/Bullet.ts","../../../src/.internal/charts/series/Series.ts","../../../src/.internal/charts/types/SerialChart.ts","../node_modules/d3-geo/src/adder.js","../node_modules/d3-geo/src/math.js","../node_modules/d3-geo/src/noop.js","../node_modules/d3-geo/src/stream.js","../node_modules/d3-geo/src/area.js","../node_modules/d3-geo/src/cartesian.js","../node_modules/d3-geo/src/bounds.js","../../../src/.internal/charts/map/MapSeries.ts","../../../src/.internal/charts/map/MapObject.ts","../../../src/.internal/charts/map/MapImage.ts","../node_modules/d3-geo/src/constant.js","../node_modules/d3-geo/src/compose.js","../node_modules/d3-geo/src/rotation.js","../node_modules/d3-geo/src/circle.js","../../../src/.internal/charts/map/MapUtils.ts","../../../src/.internal/charts/map/MapPolygon.ts","../../../src/.internal/charts/map/MapPolygonSeries.ts","../node_modules/d3-geo/src/clip/buffer.js","../node_modules/d3-geo/src/pointEqual.js","../node_modules/d3-geo/src/clip/rejoin.js","../node_modules/d3-geo/src/polygonContains.js","../node_modules/d3-array/src/ascending.js","../node_modules/d3-array/src/bisect.js","../node_modules/d3-array/src/bisector.js","../node_modules/d3-array/src/cross.js","../node_modules/d3-array/src/array.js","../node_modules/d3-array/src/range.js","../node_modules/d3-array/src/ticks.js","../node_modules/d3-array/src/threshold/sturges.js","../node_modules/d3-array/src/merge.js","../node_modules/d3-array/src/zip.js","../node_modules/d3-geo/src/clip/index.js","../node_modules/d3-geo/src/clip/antimeridian.js","../node_modules/d3-geo/src/clip/circle.js","../node_modules/d3-geo/src/clip/rectangle.js","../node_modules/d3-geo/src/clip/line.js","../node_modules/d3-geo/src/identity.js","../node_modules/d3-geo/src/transform.js","../node_modules/d3-geo/src/path/bounds.js","../node_modules/d3-geo/src/projection/fit.js","../node_modules/d3-geo/src/projection/resample.js","../node_modules/d3-geo/src/projection/index.js","../node_modules/d3-geo/src/projection/equirectangular.js","../node_modules/d3-geo/src/path/area.js","../node_modules/d3-geo/src/path/centroid.js","../node_modules/d3-geo/src/path/context.js","../node_modules/d3-geo/src/path/measure.js","../node_modules/d3-geo/src/path/string.js","../node_modules/d3-geo/src/path/index.js","../node_modules/d3-geo/src/length.js","../node_modules/d3-geo/src/interpolate.js","../node_modules/d3-geo/src/distance.js","../../../src/.internal/charts/map/projections/Projection.ts","../../../src/.internal/charts/map/SmallMap.ts","../../../src/.internal/charts/map/Geo.ts","../../../src/.internal/charts/map/MapLineObject.ts","../../../src/.internal/charts/map/MapImageSeries.ts","../../../src/.internal/charts/map/MapLine.ts","../../../src/.internal/charts/map/MapLineSeries.ts","../../../src/.internal/charts/map/Graticule.ts","../node_modules/d3-geo/src/graticule.js","../../../src/.internal/charts/map/GraticuleSeries.ts","../../../src/.internal/charts/types/MapChart.ts","../../../src/.internal/charts/map/MapSpline.ts","../../../src/.internal/charts/map/MapArc.ts","../../../src/.internal/charts/map/MapSplineSeries.ts","../../../src/.internal/charts/map/MapArcSeries.ts","../../../src/.internal/charts/map/ZoomControl.ts","../node_modules/d3-geo/src/projection/mercator.js","../../../src/.internal/charts/map/projections/Mercator.ts","../node_modules/d3-geo-projection/src/math.js","../node_modules/d3-geo-projection/src/miller.js","../../../src/.internal/charts/map/projections/Miller.ts","../node_modules/d3-geo-projection/src/eckert6.js","../../../src/.internal/charts/map/projections/Eckert6.ts","../node_modules/d3-geo/src/projection/azimuthal.js","../node_modules/d3-geo/src/projection/orthographic.js","../../../src/.internal/charts/map/projections/Orthographic.ts","../node_modules/d3-geo/src/projection/stereographic.js","../../../src/.internal/charts/map/projections/Stereographic.ts","../node_modules/d3-geo/src/projection/conic.js","../node_modules/d3-geo/src/projection/conicEqualArea.js","../node_modules/d3-geo/src/projection/cylindricalEqualArea.js","../node_modules/d3-geo/src/projection/albers.js","../../../src/.internal/charts/map/projections/Albers.ts","../node_modules/d3-geo/src/projection/albersUsa.js","../../../src/.internal/charts/map/projections/AlbersUsa.ts","../node_modules/d3-geo/src/projection/naturalEarth1.js","../../../src/.internal/charts/map/projections/NaturalEarth1.ts","../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../../../src/.internal/charts/map/projections/AzimuthalEqualArea.ts","../node_modules/d3-geo/src/projection/equalEarth.js","../node_modules/d3-geo/src/centroid.js","../../../src/.internal/charts/map/projections/EqualEarth.ts","../node_modules/d3-geo/src/clip/extent.js","../node_modules/d3-geo/src/contains.js","../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","../node_modules/d3-geo/src/projection/conicConformal.js","../node_modules/d3-geo/src/projection/conicEquidistant.js","../node_modules/d3-geo/src/projection/gnomonic.js","../node_modules/d3-geo/src/projection/identity.js","../node_modules/d3-geo/src/projection/transverseMercator.js","../../../src/maps.ts"],"names":["Queue","require","polylabel","polygon","precision","debug","minX","minY","maxX","maxY","i","length","p","width","height","cellSize","Math","min","h","cellQueue","compareMax","x","y","push","Cell","bestCell","area","points","len","j","a","b","f","getCentroidCell","bboxCell","d","numProbes","cell","pop","console","log","round","max","this","inside","minDistSq","Infinity","k","ring","getSegDistSq","sqrt","pointToPolygonDist","SQRT2","px","py","dx","dy","t","module","exports","default","TinyQueue","data","compare","defaultCompare","_down","prototype","item","_up","top","peek","pos","parent","current","halfLength","left","right","best","childrenCreated","className","applyTheme","_label","component","labels","create","addSprite","_disposers","itemContainer","Disposer","removeValue","properties","color","value","setProperty","_valueLabel","valueLabels","_itemContainer","itemContainers","togglable","events","on","ev","toggleDataItem","target","dataItem","undefined","focusable","focusedItem","dataContext","uidAttr","readerControls","readerLabelledBy","sprite","DataItem","Sprite","isDisposed","visibilitychanged","readerChecked","visible","disableType","isActive","enableType","addDisposer","dataItems","remove","_marker","markers","createMarker","layout","setPropertyValue","Container","applyOnClones","padding","margin","clickable","role","cursorOverStyle","Mouse","pointer","background","fillOpacity","List","template","body","isKey","event","interfaceColors","InterfaceColorSet","marker","interactionsEnabled","setStateOnChildren","strokeOpacity","propertyFields","fill","valign","disabledColor","getFor","activeState","newValue","states","stroke","rectangle","createChild","RoundedRectangle","label","Label","text","truncate","fullWords","valueLabel","align","textAlign","position","handleScrollbar","applyInternalDefaults","readerTitle","language","translate","createDataItem","validateDataElement","container","legendDataItem","legendSettings","createLegendMarker","useDefaultMarker","updateLegendValue","invalid","validate","__disabled","itemValueText","valueText","setState","afterDraw","maxWidth","getPropertyValue","maxLabelWidth","each","measuredWidth","pixelMarginLeft","pixelMarginRight","maxValueLabelWidth","maxMarkerWidth","maxAdjustedLabelWidth","trueMaxWidth","scrollbar","scrollable","measuredHeight","pixelWidth","contentHeight","thumb","paddingRight","updateMasks","contentAlign","maxColumns","invalidate","Scrollbar","isMeasured","orientation","endGrip","startGrip","marginLeft","_mouseWheelDisposer","handleWheel","dispose","shift","ds","delta","end","start","pixelY","maskRectangle","isHiding","isHidden","colorOrig","hidden","show","svgContainer","readerAlert","locale","hide","handleDataItemPropertyChange","name","Component","registeredClasses","relevant","Responsive","widthXS","state","stateId","heightXS","isXS","disabled","_axis","breakSize","marginRight","marginTop","marginBottom","fillShape","WavedLine","zIndex","_fillShape","startLine","_startLine","endLine","_endLine","addBreakSprite","get","axis","set","renderer","gridContainer","createBreakSprites","breakTemplate","axisBreaks","copyFrom","invalidateSeries","positionToPoint","startPosition","endPosition","draw","updateBreakElement","AxisItemLocation","_grid","isRange","axisRanges","grid","clone","shouldClone","sprites","_tick","tick","ticks","virtualParent","_axisFill","axisFill","isTemplate","axisFills","_text","_mask","_contents","contents","mask","createFill","_axisBreak","axisBreak","appendChildren","appendDataItem","configOrder","hasProperty","prop","source","bullet","minPosition","maxPosition","setVisibility","noChangeValues","_bullet","_gridCount","_series","autoDispose","_axisItemCount","constructor","Axis","Error","hideTooltipWhileZooming","minWidth","minHeight","toggleZoomOutButton","title","_dataItemsIterator","createNewItems","tooltip","Tooltip","pointerLength","fitPointerToBounds","filters","clear","cornerRadius","strokeWidth","readerHidden","series","preventShow","fillRule","index","opacity","invalidateLayout","iterator","validateDataElements","ghostLabel","updateLabelElement","updateGridCount","gridCount","axisLength","minGridDistance","clearCache","validateLayout","axisFullLength","updateAxisLine","updateTooltip","updateBaseGridElement","_prevLength","dispatchImmediately","initRenderer","above","bulletsContainer","updateGridContainer","validateAxisRanges","axisRange","validateBreaks","_axisBreaks","processBreak","breakContainer","registerSeries","moveValue","createMask","_renderer","chart","positionToAngle","pointToPosition","point","positionToCoordinate","getAnyRangePath","getPositionRangePath","anyToPosition","anyToPoint","angle","hideTooltip","duration","_tooltipPosition","showTooltipAtPosition","local","_tooltip","toAxisPosition","tooltipContainer","tooltipLocation","getCellStartPosition","getCellEndPosition","tooltipPosition","tooltipLocation2","startPoint","endPoint","currentItemStartPoint","currentItemEndPoint","fullWidthTooltip","globalPoint","line","getTooltipText","pointTo","cursorTooltipEnabled","inversed","toGlobalPosition","pointerOrientation","boundingRectangle","setBounds","roundPosition","location","axisLocation","_axisRanges","processAxisRange","SortedList","createAxisBreak","adjustedStartValue","processSeriesDataItems","processSeriesDataItem","axisLetter","postProcessSeriesDataItems","postProcessSeriesDataItem","updateAxisBySeries","hideUnusedDataItems","dataItemsIterator","getSeriesDataItem","findNearest","getAngle","key","stackKey","range","getX","getPositionX","getY","getPositionY","dataChangeUpdate","seriesDataChangeUpdate","adjustDifference","difference","startValue","endValue","adjustedEndValue","intersection","isInBreak","fixAxisBreaks","update","firstAxisBreak","first","getPositionLabel","_chart","createSeriesRange","resetIterators","reset","processConfig","config","map","hasKey","getKey","setDisabled","changed","_title","maybeXS","element","paper","add","pixelPerfect","invalidateDataItems","fillPath","path","measure","setPath","attr","nonScalingStroke","cellStartLocation","cellEndLocation","minLabelPosition","maxLabelPosition","inited","invalidateAxisItems","baseGrid","disposers","setAxis","bind","processRenderer","positionItem","moveTo","position2","getHeight","pixelHeight","getWidth","coordinateToPosition","coordinate","coordinate2","updateGridElement","updateTickElement","updateBullet","updateFillElement","toggleVisibility","updatedStart","updatedEnd","_axisFills","createGrid","_ticks","createTick","_labels","createLabel","opposite","verticalCenter","inversedPosition","relativePositionSprite","innerHeight","Percent","rotation","toBack","toFront","bbx","bbw","bbh","pixelPaddingTop","pixelPaddingBottom","y1","y2","abs","w","tickLength","pixelX","basePoint","horizontalCenter","deltaX","x1","x2","wavedRectangle","WavedRectangle","setWavedSides","widthS","valueToPosition","values","setValue","_stepDecimalPlaces","_baseValue","_adjustedStart","_adjustedEnd","_extremesChanged","_deltaMinMax","calculateTotals","axisFieldName","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","step","_start","_end","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","getIndex","startIndex","endIndex","total","sum","excludeFromTotal","workingValue","setCalculatedValue","getMinMax","calculateZoom","validateAxisElements","positionToValue","differece","minMaxStep","adjustMinMax","stepDecimalPlaces","syncWithAxis","calculated","getCache","_step","minZoomed","logarithmic","LOG10E","pow","floor","maxZoomed","find","formatLabel","currentText","stepPower","decCount","adjustedMin","adjustedMax","adjustedStep","itemIndex","fillEndPosition","numberFormatter","format","baseValue","_adapterO","apply","valueToPoint","_difference","invalidateLabels","breakStartPosition","breakEndPosition","breakStartValue","breakEndValue","E","xToValue","yToValue","animateMinMax","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","minValue","maxValue","raiseCriticalError","_minReal","_maxReal","dif","fixMin","fixMax","exponent","power","extraMin","extraMax","strict","strictMinMax","animation","_minMaxAnimation","isFinished","_finalMax","_finalMin","validateDataItems","handleSelectionExtremesChange","strictMode","initialMin","initialMax","extra","ceil","stepDivisor","maxPrecision","minCount","maxCount","handleExtremesChange","selectionMin","selectionMax","allHidden","seriesSelectionMin","seriesSelectionMax","minMaxStep2","syncAxes","declination","setCache","zoom","getWorkingValue","stack","getValue","extraTooltipPrecision","valueStr","zoomToValues","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","showTooltipAt","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processingErrors","xAxis","bby","deltaY","maxHeight","pixelPaddingRight","pixelPaddingLeft","pixelMarginTop","pixelMarginBottom","innerWidth","heightXXS","markerContainer","markerCount","getMinFromRules","heatRules","heatRule","getMaxFromRules","valueAxis","reverseOrder","minColor","maxColor","seriesFill","Color","minOpacity","maxOpacity","minStrokeOpacity","maxStrokeOpacity","minStroke","maxStroke","gradient","LinearGradient","addColor","strokeGradient","rgb","setColorProperty","_valueAxis","dataField","dataFieldDefined","err","updateMinMax","low","high","cs","icon","autoHideDelay","_autoHideTimeout","setTimeout","Button","_legend","Chart","titles","chartAndLegendContainer","chartContainer","showOnInit","processTitle","updateReaderTitleReferences","defaultState","transitionDuration","fixLayout","legend","feedLegend","uid","setSVGAttribute","join","removeSVGAttribute","setLegend","type","removeChildren","_dragGrip","touch","paddingLeft","paddingTop","paddingBottom","widthXXS","tooltipX","tooltipY","copyToLegendMarker","_bullets","Dictionary","bullets","_ignoreMinMax","_showBullets","LegendSettings","_tmin","_tmax","_smin","_smax","dataItemsByAxis","skipFocusThreshold","_itemReaderTextChanged","calculatePercent","simplifiedProcessing","Series","minBulletDistance","mainContainer","_shouldBeReady","hiddenState","transitionEasing","autoSetClassName","setClassName","positionBullet","processBullet","itemsFocusable","removeBullet","oldValue","eachBullet","processValues","getFirstValue","getActualWorkingValue","getAbsoluteFirstValue","rangeChangeUpdate","working","_workingStartIndex","_workingEndIndex","prevValue","ksum","percent","children","updateTooltipBounds","topParent","rect","shouldCreateBullet","bulletTemplate","disabledField","currentDataItem","setKey","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","itemWidth","itemHeight","handleDataItemWorkingValueChange","dataRangeInvalid","invalidateProcessedData","rangesContainer","getAxisField","xPosition","yPosition","invalidateRawData","readerText","_itemReaderText","tooltipText","tooltipHTML","_legendDataItem","notRange","itemLabelText","labelText","e","modal","content","adapter","message","closable","open","verbose","applyFilters","filter","_heatRules","foundSprite","clonedFrom","anySprite","child","anyChild","ruleTarget","propertyField","rule","parts","split","listitem","maybeColorOrPercent","colors","ColorSet","_usesData","seriesContainer","patterns","createSeries","handleSeriesAdded","handleSeriesRemoved","dataUsers","dataUser","_dataUsers","handleSeriesAdded2","hiddenInLegend","addData","dataInvalid","reinit","_data","dataFields","appear","Adder","s","temp","valueOf","adder","bv","av","epsilon","pi","PI","halfPi","quarterPi","tau","degrees","radians","atan","atan2","cos","exp","sin","sign","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","streamObjectType","Feature","object","FeatureCollection","features","n","Sphere","sphere","Point","coordinates","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","lineStart","lineEnd","polygonStart","polygonEnd","lambda00","phi00","lambda0","cosPhi0","sinPhi0","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","u","v","spherical","cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","l","phi0","lambda1","phi1","lambda2","p0","ranges","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","linePoint","normal","inflection","phii","lambdai","antimeridian","rangeCompare","rangeContains","feature","merged","deltaMax","sort","NaN","_east","_west","_south","_north","updateExtremes","getFeature","bounds","west","south","north","east","ignoreBounds","showInViewport","checkInclude","includes","excludes","id","indexOf","invalidateData","processIncExc","handleObjectAdded","mapObject","_geodata","geodata","madeFromGeoData","splice","disposeData","_dataSources","getDataSource","removeDispose","loadData","setDataSourceEvents","getFeatures","_mapObjects","dispatch","_northDefined","_southDefined","_westDefined","_eastDefined","window","JSON","parse","asIs","field","showTooltip","res","showTooltipOn","has","handleTooltipMove","validatePosition","latitude","longitude","projection","d3Projection","d3Path","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","z","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","circleRadius","center","constant","circle","arguments","r","_","multiPolygonToGeo","multiPolygon","surface","hole","geoArea","multiPointToGeo","multiLineToGeo","multiLine","pointToGeo","multiGeoToPoint","geoPoints","geoToPoint","geoPoint","multiGeoLineToMultiLine","multiGeoLine","segment","multiGeoPolygonToMultipolygon","multiGeoPolygon","geoPolygon","getCircle","getBackground","stepLong","stepLat","ln","ll","lt","pathGenerator","calculateVisualCenter","biggestArea","biggestPolygon","_visualLongitude","_visualLatitude","measureElement","getTooltipX","convert","visualLongitude","visualLatitude","getTooltipY","_mapPolygon","mapPolygons","_polygon","_multiPolygon","_geoPolygon","_multiGeoPolygon","validateData","useGeodata","geoJSON","geodataNames","include","exclude","dataObject","mapPolygon","boxArea","_mapPolygons","polygonTemplate","getPolygonById","_dataItem","lines","rejoin","concat","result","Intersection","other","entry","o","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","p1","pointEqual","link","isSubject","array","winding","m","point0","sinPhi1","cosPhi1","point1","absDelta","arc","phiArc","ascendingBisect","ascending","lo","hi","mid","bisector","Array","slice","stop","arrays","pointVisible","clipLine","sink","ringBuffer","clipBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","merge","polygonContains","clipRejoin","pointLine","clean","ringSegments","validSegment","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","uu","t2","q","polar","q1","code","c0","v0","v00","point2","clipRectangle","x0","y0","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","activeStream","bufferStream","clipStream","a0","b0","b1","polygonInside","cleanInside","ax","ay","methods","transformer","TransformStream","fit","fitBounds","clipExtent","scale","geoStream","fitExtent","extent","fitSize","size","fitWidth","fitHeight","cosMinDistance","project","delta2","resampleLineTo","depth","d2","phi2","dx2","dy2","dz","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample","resampleNone","transformRadians","scaleTranslate","transform","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","clipAntimeridian","postclip","identity","recenter","transformRotate","clipAngle","clipCircle","equirectangularRaw","X0","Y0","Z0","X1","Y1","Z1","X2","Y2","Z2","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","lineTo","lengthRing","lengthSum","lengthStream","lengthPointFirst","lengthPoint","PathString","_string","_circle","projectionStream","contextStream","pathArea","pathMeasure","pathBounds","pathCentroid","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","distance","lengthLineEnd","cosDelta","_d3Projection","_d3Path","invalidateProjection","unproject","deltaLongitude","deltaLatitude","unrotate","intermediatePoint","pointA","pointB","multiDistance","positionToGeoPoint","intermediatePointA","intermediatePointB","pa","pb","totalDistance","currentDistance","positionA","positionB","positionAB","percentHeight","percentWidth","moveToPosition","updateMapSize","Rectangle","contains","newSeries","rectPoint","spritePoint","seriesPointToGeo","zoomToGeoPoint","zoomLevel","updateRectangle","scaleRatio","bbox","group","node","getBBox","normalizePoint","wrapAngleTo180","latitude180","normalizeMultiline","multiline","adjustRotation","mapLine","shortestDistance","_mapImage","mapImages","_geoPoint","multiPoint","multiGeoPoint","_parseDataFrom","mapImage","_mapImages","getImageById","_imageListeners","createLine","Polyline","images","handleImagesToConnect","isReady","imagesToConnect","image","img","disposer","convertedPoints","convertedSegmentPoints","slen","_arrow","lineObjects","handleGlobalScale","_lineObjects","handleLineObjectAdded","mapLineObject","arrow","triangle","Triangle","_mapLine","mapLines","_multiLine","_multiGeoLine","_geoLine","geoLine","_mapLines","lineTemplate","getLineById","graticuleX","graticuleY","graticule","X","Y","DX","DY","outline","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","longitudeStep","latitudeStep","singleSprite","lineStrings","lineString","zoomDuration","zoomEasing","minZoomLevel","maxZoomLevel","_prevZoomGeoPoint","maxPanOut","homeZoomLevel","zoomStep","centerMapOnZoomOut","backgroundSeries","handleAllInited","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","dragWhileResize","previousWidth","previousHeight","updateCenterGeoPoint","_mapAnimation","updateScaleRatio","_zoomGeoPointReal","chartContainerBg","dragStart","interactions","downPointers","dragStop","handleMapDown","hasFocused","_zoomControl","isFocused","getEventKey","pan","mouseWheelBehavior","interaction","handlePanDown","handlePanUp","panSprite","Circle","handlePanMove","panBehavior","svgPoint","htmlContainer","_downPointOrig","_downDeltaLongitude","_downDeltaLatitude","isResized","areTransformed","dln","dlt","dlg","downGeoLocal","geoLocal","goHome","updateZoomGeoPoint","seriesPoint","maxLeft","maxRight","maxTop","maxBottom","seriesMaxLeft","seriesMaxRight","seriesMaxTop","seriesMaxBottom","seriesWidth","seriesHeight","_centerGeoPoint","ww","hh","zoomGeoPoint","cssScale","svgPointToGeo","zoomIn","inertia","inertias","done","mouseOptions","sensitivity","zoomOut","wheelable","draggable","_backgroundSeries","foundGraticule","deltaLong","deltaLat","initialScale","invalidateDataUsers","_fitWidth","_fitHeight","hScale","vScale","geoPointToSVG","geoPointToSeries","mapPoint","zoomToMapObject","polygonPoint","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","zoomControl","plusButton","exportable","minusButton","rotateMap","createClassInstance","homeGeoPoint","centerGeoPoint","setPaper","hideOverflow","setTapToActivate","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","asFunction","Polyspline","tensionX","tensionY","Polyarc","slider","handleBackgroundClick","updateThumbSize","handleThumbDrag","readerLive","maxPower","LN2","minPower","updateThumb","stepCount","isDown","createBackground","mercatorRaw","mercatorProjection","reclip","SQRT1_2","millerRaw","eckert6Raw","azimuthalRaw","cx","cy","azimuthalInvert","sc","cc","orthographicRaw","stereographicRaw","conicProjection","parallels","conicEqualAreaRaw","cylindricalEqualAreaRaw","r0","r0y","conicEqualArea","lower48Point","alaskaPoint","hawaiiPoint","lower48","albers","alaska","hawaii","pointStream","albersUsa","streams","multiplex","naturalEarth1Raw","phi4","azimuthalEqualAreaRaw","cxcy","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","W0","W1","z0","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cz","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ao","bo","ab","ringRadians","pointRadians","azimuthalEquidistantRaw","tany","conicConformalRaw","fy","conicEquidistantRaw","g","gy","nx","gnomonicRaw","kx","ky","tx","ty","sx","sy","reflectX","reflectY","transverseMercatorRaw"],"mappings":"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","file":"static/js/10.17350a0d.chunk.js","sourcesContent":["'use strict';\n\nvar Queue = require('tinyqueue');\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(null, compareMax);\n\n    if (cellSize === 0) return [minX, minY];\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    return [bestCell.x, bestCell.y];\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n","'use strict';\n\nmodule.exports = TinyQueue;\nmodule.exports.default = TinyQueue;\n\nfunction TinyQueue(data, compare) {\n    if (!(this instanceof TinyQueue)) return new TinyQueue(data, compare);\n\n    this.data = data || [];\n    this.length = this.data.length;\n    this.compare = compare || defaultCompare;\n\n    if (this.length > 0) {\n        for (var i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nTinyQueue.prototype = {\n\n    push: function (item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    },\n\n    pop: function () {\n        if (this.length === 0) return undefined;\n\n        var top = this.data[0];\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = this.data[this.length];\n            this._down(0);\n        }\n        this.data.pop();\n\n        return top;\n    },\n\n    peek: function () {\n        return this.data[0];\n    },\n\n    _up: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var item = data[pos];\n\n        while (pos > 0) {\n            var parent = (pos - 1) >> 1;\n            var current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    },\n\n    _down: function (pos) {\n        var data = this.data;\n        var compare = this.compare;\n        var halfLength = this.length >> 1;\n        var item = data[pos];\n\n        while (pos < halfLength) {\n            var left = (pos << 1) + 1;\n            var right = left + 1;\n            var best = data[left];\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n};\n","/**\r\n * Legend-related functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../core/Component\";\r\nimport { DataItem, IDataItemEvents } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Optional } from \"../core/utils/Type\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport { Color } from \"../core/utils/Color\";\r\nimport { RadialGradient } from \"../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../core/rendering/fills/Pattern\";\r\nimport * as $utils from \"../core/utils/Utils\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport * as $math from \"../core/utils/Math\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../core/Sprite\";\r\nimport { Disposer, IDisposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LegendDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * A container data item's elements will be placed in.\r\n\t */\r\n\tprotected _itemContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the item label.\r\n\t */\r\n\tprotected _label: Label;\r\n\r\n\t/**\r\n\t * A [[Container]] for legend item marker.\r\n\t */\r\n\tprotected _marker: Container;\r\n\r\n\t/**\r\n\t * A [[Label]] element for the value label.\r\n\t */\r\n\tprotected _valueLabel: Label;\r\n\r\n\t/**\r\n\t * A data context for legend item.\r\n\t */\r\n\tpublic dataContext: any;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Legend;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic childrenCreated: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic colorOrig: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LegendDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element.\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis._label = label;\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * Main color of legend data item.\r\n\t *\r\n\t * This is set by the target element this legend item represents, like\r\n\t * a Series or a Slice.\r\n\t *\r\n\t * It can be used to derive a color in legend's sub-items, like label:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"legend\": {\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"text\": \"[{color}]{name}[/]\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n\t * @param value  Main color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Main color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * A legend item's [[Label]] element for \"value label\".\r\n\t *\r\n\t * @return Label\r\n\t */\r\n\tpublic get valueLabel(): Label {\r\n\t\tif (!this._valueLabel) {\r\n\t\t\tlet valueLabel = this.component.valueLabels.create();\r\n\t\t\tthis._valueLabel = valueLabel;\r\n\r\n\t\t\tthis.addSprite(valueLabel);\r\n\t\t\tthis._disposers.push(valueLabel);\r\n\t\t\tvalueLabel.parent = this.itemContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.valueLabels.removeValue(valueLabel);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._valueLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the main [[Container]] that holds legend item's elements:\r\n\t * marker and labels.\r\n\t *\r\n\t * @return Item container\r\n\t */\r\n\tpublic get itemContainer(): Container {\r\n\t\tif (!this._itemContainer) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet itemContainer = component.itemContainers.create();\r\n\t\t\titemContainer.parent = component;\r\n\t\t\tthis._itemContainer = itemContainer;\r\n\t\t\tthis.addSprite(itemContainer);\r\n\t\t\tthis._disposers.push(itemContainer);\r\n\r\n\t\t\t// Add click/tap event to toggle item\r\n\t\t\tif (itemContainer.togglable) {\r\n\t\t\t\titemContainer.events.on(\"toggled\", (ev) => {\r\n\t\t\t\t\tcomponent.toggleDataItem(<this>ev.target.dataItem);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add focus event so that we can track which object is currently in focus\r\n\t\t\t// for keyboard toggling\r\n\t\t\tif (itemContainer.focusable) {\r\n\t\t\t\titemContainer.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\t// We need this here in order to reset focused item when it is clicked\r\n\t\t\t\t\t// normally so that it is not toggled by ENTER afterwards\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = <this>ev.target.dataItem;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\titemContainer.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tcomponent.focusedItem = undefined;\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.itemContainers.removeValue(itemContainer);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.dataContext.uidAttr) {\r\n\t\t\t\titemContainer.readerControls = this.dataContext.uidAttr();\r\n\t\t\t\titemContainer.readerLabelledBy = this.dataContext.uidAttr();\r\n\t\t\t}\r\n\r\n\t\t\tlet sprite = <any>this.dataContext;\r\n\t\t\tif ((sprite instanceof DataItem || sprite instanceof Sprite) && !sprite.isDisposed()) {\r\n\t\t\t\tconst visibilitychanged = function(ev: AMEvent<Sprite | DataItem, ISpriteEvents & IDataItemEvents>[\"visibilitychanged\"]) {\r\n\t\t\t\t\titemContainer.readerChecked = ev.visible;\r\n\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\titemContainer.isActive = !ev.visible;\r\n\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsprite.addDisposer(new Disposer(() => {\r\n\t\t\t\t\tif (this.component) {\r\n\t\t\t\t\t\tthis.component.dataItems.remove(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\r\n\t\t\t\tif (sprite instanceof Sprite) {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"hidden\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = false;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = true;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"shown\", (ev) => {\r\n\t\t\t\t\t\t\titemContainer.readerChecked = true;\r\n\t\t\t\t\t\t\titemContainer.events.disableType(\"toggled\");\r\n\t\t\t\t\t\t\titemContainer.isActive = false;\r\n\t\t\t\t\t\t\titemContainer.events.enableType(\"toggled\");\r\n\t\t\t\t\t\t}, undefined, false)\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemContainer.addDisposer(\r\n\t\t\t\t\t\tsprite.events.on(\"visibilitychanged\", visibilitychanged, undefined, false)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._itemContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Container]] that holds legend item's marker element.\r\n\t *\r\n\t * @return Marker\r\n\t */\r\n\tpublic get marker(): Container {\r\n\t\tif (!this._marker) {\r\n\t\t\tlet marker = this.component.markers.create();\r\n\t\t\tthis._marker = marker;\r\n\t\t\tmarker.parent = this.itemContainer;\r\n\t\t\tthis.addSprite(marker);\r\n\t\t\tthis._disposers.push(marker);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif ($type.hasValue(this.component)) {\r\n\t\t\t\t\tthis.component.markers.removeValue(marker);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._marker;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nexport class LegendSettings {\r\n\r\n\t/**\r\n\t * [valueText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueText: string;\r\n\r\n\t/**\r\n\t * [labelText description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic labelText: string;\r\n\r\n\t/**\r\n\t * A text template for the value part of the legend item.\r\n\t */\r\n\tpublic itemValueText: string;\r\n\r\n\t/**\r\n\t * A text template for the label part of the legend item.\r\n\t */\r\n\tpublic itemLabelText: string;\r\n\r\n\t/**\r\n\t * Should marker be created for each legend item.\r\n\t */\r\n\tpublic createMarker: boolean = true;\r\n}\r\n\r\n/**\r\n * Represents types available for Legend position. Not all charts will pay attention to this, like MapChart. You'll need to use legend.align and legend.valign properties to position legend on MapChart.\r\n */\r\nexport type LegendPosition = \"left\" | \"right\" | \"top\" | \"bottom\" | \"absolute\";\r\n\r\n/**\r\n * Defines data fields for [[Legend]].\r\n */\r\nexport interface ILegendDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * A field name in the data item which holds name of the legend item.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A field name in data item which holds boolean value whether item should\r\n\t * be displayed in legend or not.\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Legend]].\r\n */\r\nexport interface ILegendProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Should legend use default marker?\r\n\t *\r\n\t * If set to `false`, the legend will try to mirror the look of the actual\r\n\t * item, like series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tuseDefaultMarker?: boolean;\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * @default \"bottom\"\r\n\t */\r\n\tposition?: LegendPosition;\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t */\r\n\tscrollable?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Legend]].\r\n */\r\nexport interface ILegendEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Legend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILegendAdapters extends IComponentAdapters, ILegendProperties { }\r\n\r\nexport interface ILegendItemEvents {\r\n\tpropertychanged: {\r\n\t\t/**\r\n\t\t * Property key.\r\n\t\t */\r\n\t\tproperty: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for Legend documentation\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n */\r\nexport class Legend extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of the data fields.\r\n\t */\r\n\tpublic _dataFields: ILegendDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILegendEvents;\r\n\r\n\t/**\r\n\t * Defines data item type.\r\n\t */\r\n\tpublic _dataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * List of legend Item containers. Legend item containers contain marker, title label and value label.\r\n\t */\r\n\tpublic itemContainers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item labels.\r\n\t */\r\n\tpublic labels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * List of legend item markers.\r\n\t */\r\n\tpublic markers: ListTemplate<Container>;\r\n\r\n\t/**\r\n\t * List of legend item value labels.\r\n\t */\r\n\tpublic valueLabels: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Currently focused legend item (for toggling via keyboard)\r\n\t */\r\n\tpublic focusedItem: Optional<this[\"_dataItem\"]>;\r\n\r\n\r\n\tpublic scrollbar: Scrollbar;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Legend\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", false);\r\n\t\tthis.setPropertyValue(\"scrollable\", false);\r\n\t\tthis.setPropertyValue(\"contentAlign\", \"center\");\r\n\r\n\t\t// Create a template container and list for legend items\r\n\t\tlet itemContainer: Container = new Container();\r\n\t\titemContainer.applyOnClones = true;\r\n\t\titemContainer.padding(8, 0, 8, 0);\r\n\t\titemContainer.margin(0, 10, 0, 10);\r\n\t\titemContainer.layout = \"horizontal\";\r\n\t\titemContainer.clickable = true;\r\n\t\titemContainer.focusable = true;\r\n\t\titemContainer.role = \"switch\";\r\n\t\titemContainer.togglable = true;\r\n\t\titemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\titemContainer.background.fillOpacity = 0; // creates hit area\r\n\r\n\t\t// Create container list using item template we just created\r\n\t\tthis.itemContainers = new ListTemplate<Container>(itemContainer);\r\n\t\tthis._disposers.push(new ListDisposer(this.itemContainers));\r\n\t\tthis._disposers.push(this.itemContainers.template);\r\n\r\n\t\t// Set up global keyboard events for toggling elements\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (keyboard.isKey(ev.event, \"enter\") && this.focusedItem && this.focusedItem.itemContainer.clickable) {\r\n\t\t\t\tthis.toggleDataItem(this.focusedItem);\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: Container = new Container();\r\n\t\tmarker.width = 23;\r\n\t\tmarker.height = 23;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.applyOnClones = true;\r\n\t\tmarker.setStateOnChildren = true;\r\n\t\tmarker.background.fillOpacity = 0;\r\n\t\tmarker.background.strokeOpacity = 0;\r\n\t\tmarker.propertyFields.fill = \"fill\";\r\n\t\tmarker.valign = \"middle\";\r\n\r\n\t\tlet disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n\r\n\t\tmarker.events.on(\"childadded\", (event) => {\r\n\t\t\tlet child = event.newValue;\r\n\t\t\tlet activeState = child.states.create(\"active\");\r\n\t\t\tactiveState.properties.stroke = disabledColor;\r\n\t\t\tactiveState.properties.fill = disabledColor;\r\n\t\t});\r\n\r\n\t\tthis.markers = new ListTemplate<Container>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\t// Create a legend background element\r\n\t\tlet rectangle: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\trectangle.width = percent(100);\r\n\t\trectangle.height = percent(100);\r\n\t\trectangle.applyOnClones = true;\r\n\t\trectangle.propertyFields.fill = \"fill\";\r\n\t\trectangle.strokeOpacity = 0;\r\n\r\n\t\t// Create a template container and list for item labels\r\n\t\tlet label: Label = new Label();\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.margin(0, 5, 0, 5);\r\n\t\tlabel.valign = \"middle\";\r\n\t\tlabel.applyOnClones = true;\r\n\t\tlabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tthis.labels = new ListTemplate<Label>(label);\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\t\tlabel.interactionsEnabled = false;\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.fullWords = false;\r\n\r\n\t\t// Create a template container and list for item value labels\r\n\t\tlet valueLabel: Label = new Label();\r\n\t\tvalueLabel.margin(0, 5, 0, 0);\r\n\t\tvalueLabel.valign = \"middle\";\r\n\t\tvalueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n\t\tvalueLabel.align = \"right\";\r\n\t\tvalueLabel.textAlign = \"end\";\r\n\t\tvalueLabel.applyOnClones = true;\r\n\t\tvalueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n\t\tvalueLabel.interactionsEnabled = false;\r\n\r\n\t\tthis.valueLabels = new ListTemplate<Label>(valueLabel);\r\n\t\tthis._disposers.push(new ListDisposer(this.valueLabels));\r\n\t\tthis._disposers.push(this.valueLabels.template);\r\n\r\n\t\tthis.position = \"bottom\"; // don't use setPropertyValue here!\r\n\r\n\t\t// Create a state for disabled legend items\r\n\t\titemContainer.states.create(\"active\");\r\n\t\titemContainer.setStateOnChildren = true;\r\n\r\n\t\t// Apply accessibility settings\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.events.on(\"layoutvalidated\", this.handleScrollbar, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Legend\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LegendDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t * @todo Description\r\n\t * @todo Figure out how to update appearance of legend item without losing focus\r\n\t * @todo Update legend marker appearance as apperance of related series changes\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t// Get data item (legend item's) container\r\n\t\tlet container = dataItem.itemContainer;\r\n\r\n\t\tlet marker = dataItem.marker;\r\n\r\n\t\t$utils.used(dataItem.label);\r\n\t\tlet valueLabel = dataItem.valueLabel;\r\n\r\n\t\t// Set parent and update current state\r\n\t\tcontainer.readerChecked = dataItem.dataContext.visible;\r\n\r\n\t\t// Tell series its legend data item\r\n\t\tdataItem.dataContext.legendDataItem = dataItem;\r\n\r\n\t\tdataItem.label.width = undefined;\r\n\t\tif (valueLabel.align == \"right\") {\r\n\t\t\tvalueLabel.width = undefined;\r\n\t\t}\r\n\r\n\t\tlet legendSettings = dataItem.dataContext.legendSettings;\r\n\r\n\t\t// If we are not using default markers, create a unique legend marker based\r\n\t\t// on the data item type\r\n\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\tif (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n\t\t\tif (!dataItem.childrenCreated) {\r\n\t\t\t\tdataContext.createLegendMarker(marker);\r\n\t\t\t\tdataItem.childrenCreated = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataContext.updateLegendValue) {\r\n\t\t\tdataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n\t\t}\r\n\r\n\t\tif (dataContext.component && dataContext.component.updateLegendValue) {\r\n\t\t\tdataContext.component.updateLegendValue(dataContext);\r\n\t\t}\r\n\r\n\t\tif (valueLabel.invalid) {\r\n\t\t\tvalueLabel.validate();\r\n\t\t}\r\n\r\n\t\tif (valueLabel.text == \"\" || valueLabel.text == undefined) {\r\n\t\t\tvalueLabel.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n\t\t\tvalueLabel.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet visible = dataItem.dataContext.visible;\r\n\t\tif (visible === undefined) {\r\n\t\t\tvisible = true;\r\n\t\t}\r\n\t\tvisible = $type.toBoolean(visible);\r\n\t\tdataItem.dataContext.visible = visible;\r\n\r\n\t\tcontainer.events.disableType(\"toggled\");\r\n\t\tcontainer.isActive = !visible;\r\n\t\tif (container.isActive) {\r\n\t\t\tcontainer.setState(\"active\", 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcontainer.setState(\"default\", 0);\r\n\t\t}\r\n\t\tcontainer.events.enableType(\"toggled\");\r\n\t}\r\n\r\n\r\n\tpublic afterDraw() {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\t\tlet maxLabelWidth = 0;\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxLabelWidth) {\r\n\t\t\t\tmaxLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tlet maxValueLabelWidth = 0;\r\n\t\tthis.valueLabels.each((label) => {\r\n\t\t\tif (label.invalid) {\r\n\t\t\t\tlabel.validate();\r\n\t\t\t}\r\n\t\t\tif (label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight > maxValueLabelWidth) {\r\n\t\t\t\tmaxValueLabelWidth = label.measuredWidth + label.pixelMarginLeft + label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet maxMarkerWidth = 0;\r\n\t\tthis.markers.each((marker) => {\r\n\t\t\tif (marker.invalid) {\r\n\t\t\t\tmarker.validate();\r\n\t\t\t}\r\n\t\t\tif (marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight > maxMarkerWidth) {\r\n\t\t\t\tmaxMarkerWidth = marker.measuredWidth + marker.pixelMarginLeft + marker.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tlet itemContainer = this.itemContainers.template;\r\n\t\tlet margin = itemContainer.pixelMarginRight + itemContainer.pixelMarginLeft;\r\n\t\tlet maxAdjustedLabelWidth: number;\r\n\t\tlet trueMaxWidth = maxLabelWidth + maxValueLabelWidth + maxMarkerWidth;\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tmaxAdjustedLabelWidth = maxLabelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmaxWidth = maxWidth - margin;\r\n\t\t\tif (maxWidth > trueMaxWidth) {\r\n\t\t\t\tmaxWidth = trueMaxWidth;\r\n\t\t\t}\r\n\t\t\tmaxAdjustedLabelWidth = maxWidth - maxMarkerWidth - maxValueLabelWidth;\r\n\t\t}\r\n\r\n\t\tthis.labels.each((label) => {\r\n\t\t\tif (this.valueLabels.template.align == \"right\" || label.measuredWidth > maxAdjustedLabelWidth) {\r\n\t\t\t\tlabel.width = maxAdjustedLabelWidth - label.pixelMarginLeft - label.pixelMarginRight;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (this.valueLabels.template.align == \"right\") {\r\n\t\t\tthis.valueLabels.each((valueLabel) => {\r\n\t\t\t\tvalueLabel.width = maxValueLabelWidth - valueLabel.pixelMarginRight - valueLabel.pixelMarginLeft;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tsuper.afterDraw();\r\n\t}\r\n\r\n\r\n\tprotected handleScrollbar() {\r\n\t\tlet scrollbar = this.scrollbar;\r\n\t\tif (this.scrollable && scrollbar) {\r\n\t\t\tscrollbar.height = this.measuredHeight;\r\n\t\t\tscrollbar.x = this.measuredWidth - scrollbar.pixelWidth - scrollbar.pixelMarginLeft;\r\n\r\n\t\t\tif (this.contentHeight > this.measuredHeight) {\r\n\t\t\t\tscrollbar.visible = true;\r\n\t\t\t\tscrollbar.thumb.height = scrollbar.height * this.measuredHeight / this.contentHeight;\r\n\t\t\t\tthis.paddingRight = scrollbar.pixelWidth + scrollbar.pixelMarginLeft + + scrollbar.pixelMarginRight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Position of the legend.\r\n\t *\r\n\t * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n\t *\r\n\t * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n\t * layout structure than other charts.\r\n\t *\r\n\t * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n\t * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n\t *\r\n\t * @default \"bottom\"\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set position(value: LegendPosition) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tif (value == \"left\" || value == \"right\") {\r\n\t\t\t\tthis.margin(10, 5, 10, 10);\r\n\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\tthis.contentAlign = \"none\";\r\n\t\t\t\tthis.valueLabels.template.align = \"right\";\r\n\r\n\t\t\t\tif (!$type.isNumber(this.maxColumns)) {\r\n\t\t\t\t\tthis.maxColumns = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.width = undefined;\r\n\t\t\t\tthis.maxWidth = 220;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.maxColumns = undefined;\r\n\t\t\t\tthis.width = percent(100);\r\n\t\t\t\tthis.valueLabels.template.align = \"left\";\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): LegendPosition {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should legend try to mirror the look of the related item when building\r\n\t * the marker for legend item?\r\n\t *\r\n\t * If set to `true` it will try to make the marker look like its related\r\n\t * item.\r\n\t *\r\n\t * E.g. if an item is for a Line Series, it will display a line of the\r\n\t * same thickness, color, and will use the same bullets if series have them.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use default marker?\r\n\t */\r\n\tpublic set useDefaultMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useDefaultMarker\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use default marker?\r\n\t */\r\n\tpublic get useDefaultMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"useDefaultMarker\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the Legend will display a scrollbar if its contents do\r\n\t * not fit into its `maxHeight`.\r\n\t *\r\n\t * Please note that `maxHeight` is automatically set for Legend when its\r\n\t * `position` is set to `\"left\"` or `\"right\"`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.8.0\r\n\t * @param  value  Legend Scrollable?\r\n\t */\r\n\tpublic set scrollable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"scrollable\", value, true)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tlet scrollbar = this.createChild(Scrollbar);\r\n\t\t\t\tthis.scrollbar = scrollbar;\r\n\t\t\t\tscrollbar.isMeasured = false;\r\n\t\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\t\tscrollbar.endGrip.__disabled = true;\r\n\t\t\t\tscrollbar.startGrip.__disabled = true;\r\n\t\t\t\tscrollbar.visible = false;\r\n\t\t\t\tscrollbar.marginLeft = 5;\r\n\r\n\t\t\t\tthis._mouseWheelDisposer = this.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\r\n\t\t\t\tthis._disposers.push(scrollbar.events.on(\"rangechanged\", this.updateMasks, this, false));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t\tif (this.scrollbar) {\r\n\t\t\t\t\t\tthis.scrollbar.dispose();\r\n\t\t\t\t\t\tthis.scrollbar = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel scrolling of legend.\r\n\t *\r\n\t * @param  event  Event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]): void {\r\n\t\tlet shift = event.shift.y;\r\n\t\tlet scrollbar = this.scrollbar\r\n\t\tif (scrollbar) {\r\n\t\t\tlet ds = (shift / 1000 * this.measuredHeight / this.contentHeight);\r\n\t\t\tlet delta = scrollbar.end - scrollbar.start;\r\n\t\t\tif (shift > 0) {\r\n\t\t\t\tscrollbar.start = $math.max(0, scrollbar.start - ds);\r\n\t\t\t\tscrollbar.end = scrollbar.start + delta;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tscrollbar.end = $math.min(1, scrollbar.end - ds);\r\n\t\t\t\tscrollbar.start = scrollbar.end - delta;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMasks(): void {\r\n\t\tif (this.scrollbar) {\r\n\t\t\tthis.itemContainers.each((itemContainer) => {\r\n\t\t\t\titemContainer.dy = -this.scrollbar.thumb.pixelY * this.contentHeight / this.measuredHeight;\r\n\t\t\t\titemContainer.maskRectangle = { x: 0, y: -itemContainer.dy, width: this.measuredWidth, height: this.measuredHeight }\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend Scrollable?\r\n\t */\r\n\tpublic get scrollable(): boolean {\r\n\t\treturn this.getPropertyValue(\"scrollable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item Legend item\r\n\t * @todo Maybe do it with togglable instead\r\n\t */\r\n\tpublic toggleDataItem(item: this[\"_dataItem\"]): void {\r\n\t\tlet dataContext = item.dataContext;\r\n\r\n\t\tif (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n\t\t\titem.color = item.colorOrig;\r\n\r\n\t\t\titem.itemContainer.isActive = false;\r\n\r\n\t\t\tif (dataContext.hidden === true) {\r\n\t\t\t\tdataContext.hidden = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataContext.show) {\r\n\t\t\t\tdataContext.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 shown\", this.language.locale, item.label.readerTitle));\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\titem.itemContainer.isActive = true;\r\n\r\n\t\t\tif (dataContext.hide) {\r\n\t\t\t\tdataContext.hide();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataContext.visible = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"%1 hidden\", this.language.locale, item.label.readerTitle));\r\n\t\t\titem.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Override preloader method so that legend does not accidentally show its\r\n\t * own preloader.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Always `undefined`\r\n\t */\r\n\tpublic get preloader(): Optional<Preloader> {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tdataItem.valueLabel.invalidate();\r\n\t\tdataItem.label.invalidate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Move legend to below the chart if chart is narrow\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"left\" || target.position == \"right\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Move legend to the right if chart is very short\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend && (target.position == \"top\" || target.position == \"bottom\")) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.position = \"right\";\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable legend altogether on small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Legend) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n","/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullet: Sprite;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * beginning than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `minLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.renderer.ticks.template.minPosition = 0.2;\r\n\t * axis.renderer.labels.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.renderer.ticks.template.minPosition = 0.2;\r\n\t * axis.renderer.labels.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"minPosition\": 0.2\r\n\t *       },\r\n\t *       \"labels\": {\r\n\t *         \"minPosition\": 0.2\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic minPosition?: number;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * end than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `maxLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.renderer.ticks.template.minPosition = 0.8;\r\n\t * axis.renderer.labels.template.minPosition = 0.8;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.renderer.ticks.template.minPosition = 0.8;\r\n\t * axis.renderer.labels.template.minPosition = 0.8;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis end.\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"minPosition\": 0.8\r\n\t *       },\r\n\t *       \"labels\": {\r\n\t *         \"minPosition\": 0.8\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic maxPosition?: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual index of the axis data item.\r\n\t * \r\n\t * @since 4.7.8\r\n\t */\r\n\tpublic itemIndex: number;\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t\tif (source.bullet) {\r\n\t\t\tthis.bullet = source.bullet.clone();\r\n\t\t}\r\n\r\n\t\tthis.minPosition = source.minPosition;\r\n\t\tthis.maxPosition = source.maxPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t\tif (this._contents) {\r\n\t\t\tthis._contents.visible = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n\t * bullet in the middle of the cell, or specific value.\r\n\t *\r\n\t * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n\t * instead. It has a `location` property which can be used to indicate\r\n\t * precise relative location within cell/range.\r\n\t *\r\n\t * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n\t * into it.\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * let flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * var flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"FlagBullet\",\r\n\t *         \"label\": {\r\n\t *           \"text\": \"Hello\"\r\n\t *         }\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.9\r\n\t * @param  value  Bullet\r\n\t */\r\n\tpublic set bullet(value: Sprite) {\r\n\t\tif (this._bullet && this._bullet != value) {\r\n\t\t\t$array.remove(this.sprites, this._bullet);\r\n\t\t\tthis._bullet.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tthis._bullet = value;\r\n\t\tif (value) {\r\n\t\t\tthis.addSprite(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bullet\r\n\t */\r\n\tpublic get bullet(): Sprite {\r\n\t\treturn this._bullet;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\ttoggleZoomOutButton?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tprotected _title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\tprotected _tooltipPosition: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic relativePositionSprite?: Sprite;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _axisItemCount: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tif (this.constructor === Axis) {\r\n\t\t\tthrow new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\r\n\t\t}\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.minWidth = 0.0001;\r\n\t\tthis.minHeight = 0.0001;\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\t\tthis.toggleZoomOutButton = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.readerHidden = true;\r\n\r\n\t\tthis.events.on(\"rangechangestarted\", () => {\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = true;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.events.on(\"rangechangeended\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = false;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tthis._axisItemCount = 0;\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t\tthis.ghostLabel.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\t\t\r\n\t\tif (this.renderer) {\r\n\t\t\tlet gridCount = this.axisLength / this.renderer.minGridDistance; \r\n\t\t\tif(gridCount != this._gridCount){\r\n\t\t\t\tthis._gridCount = gridCount;\r\n\t\t\t\tthis.clearCache();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\trenderer.updateAxisLine();\r\n\t\t\trenderer.updateTooltip();\r\n\t\t\trenderer.updateBaseGridElement();\r\n\t\t}\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\tif (tick.above) {\r\n\t\t\t\ttick.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tlet axisFill = dataItem.axisFill;\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.above) {\r\n\t\t\t\taxisFill.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\taxisFill.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\tif (grid.above) {\r\n\t\t\t\tgrid.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgrid.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\tdataItem.bullet.parent = renderer.bulletsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\taxisBreak.invalidate();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"lengthchanged\", series.createMask, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false),\r\n\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\t\t\t\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position to coordinate.\r\n\t *\r\n\t * @since 4.7.15\r\n\t * @param position (0-1)\r\n\t * @return coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\treturn this.renderer.positionToCoordinate(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.axisLength;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t\telse if (this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.6.2\r\n\t * @param  value  Toggle zoom out button?\r\n\t */\r\n\tpublic set toggleZoomOutButton(value: boolean) {\r\n\t\tthis.setPropertyValue(\"toggleZoomOutButton\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Toggle zoom out button?\r\n\t */\r\n\tpublic get toggleZoomOutButton(): boolean {\r\n\t\treturn this.getPropertyValue(\"toggleZoomOutButton\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis._tooltipPosition = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!tooltip || this.dataItems.length <= 0) {\r\n\t\t\tthis._tooltipPosition = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!local) {\r\n\t\t\t\tposition = this.toAxisPosition(position);\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(position) || position < this.start || position > this.end) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t\tthis._tooltipPosition = undefined;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.renderer;\r\n\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (!tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = $math.ceil(startPosition + (endPosition - startPosition) * tooltipLocation, 4);\r\n\t\t\t}\r\n\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tif (this._tooltipPosition != position) {\r\n\t\t\t\tthis._tooltipPosition = position;\r\n\r\n\t\t\t\tlet tooltipLocation2 = renderer.tooltipLocation2;\r\n\r\n\t\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\r\n\t\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\r\n\r\n\t\t\t\t// save values so cursor could use them\r\n\t\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point: IPoint = renderer.positionToPoint(position, tooltipLocation2);\r\n\t\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\t\tif (tooltip.text) {\r\n\t\t\t\t\ttooltip.pointTo(globalPoint);\r\n\t\t\t\t\ttooltip.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled || this.tooltip.disabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation, axisLocation?: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?:XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.eachContinue(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\treturn $iter.find(this._axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this._axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t\t// TODO very inefficient\r\n\t\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\tthis._axisBreaks.update(axisBreak);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (source.renderer) {\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t\tthis._disposers.push(this.renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tif (!this.title) {\r\n\t\t\t\tthis.title = source.title.clone();\r\n\t\t\t\tthis.title.parent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.title.copyFrom(source.title);\r\n\t\t\t}\r\n\t\t\tthis._disposers.push(this.title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean) {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.gridContainer.disabled = value;\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Label]] element which serves as a title to the axis.\r\n\t *\r\n\t * When axis is created it aleready has an element, so you can just modify\r\n\t * it.\r\n\t *\r\n\t * Or you can replace it with your own instance of `Label`.\r\n\t * \r\n\t * @param  value  Title label\r\n\t */\r\n\tpublic set title(value: Label) {\r\n\t\tif (this._title && this._title != value) {\r\n\t\t\tthis._title.dispose();\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis._title = value;\r\n\t\t\tvalue.parent = this;\r\n\t\t\tvalue.shouldClone = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title label\r\n\t */\r\n\tpublic get title(): Label {\r\n\t\treturn this._title;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLine]].\r\n */\r\nexport interface IAxisLineProperties extends ISpriteProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisLine]].\r\n */\r\nexport interface IAxisLineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLineAdapters extends ISpriteAdapters, IAxisLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw Axis line.\r\n *\r\n * @see {@link IAxisLineEvents} for a list of available events\r\n * @see {@link IAxisLineAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLine extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLine\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.fill = color();\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\t//this.element.moveTo({ x: 0, y: 0 });\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLine\"] = AxisLine;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n","/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteEvents, ISpriteAdapters } from \"../../core/Sprite\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grid]].\r\n */\r\nexport interface IGridProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Location of the grid item within cell. (0-1)\r\n\t */\r\n\tlocation?: AxisItemLocation;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grid]].\r\n */\r\nexport interface IGridEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters  for [[Grid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridAdapters extends ISpriteAdapters, IGridProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nexport class Grid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridEvents;\r\n\r\n\t/**\r\n\t * An axis data item that corresponds to the this grid element.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Grid\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.fill = color(); // \"none\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to place grid line on.\r\n\t *\r\n\t * * 0 - start\r\n\t * * 0.5 - middle\r\n\t * * 1 - end\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Grid) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelProperties extends ILabelProperties {\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the label on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabel]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelAdapters extends ILabelAdapters, IAxisLabelProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on Axis.\r\n *\r\n * @see {@link IAxisLabelEvents} for a list of available events\r\n * @see {@link IAxisLabelAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisLabel extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabel\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.location = 0.5;\r\n\t\t//this.nonScaling = true; // not good for perf\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if label should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean):boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif(this.axis){\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabel\"] = AxisLabel;\r\n","/**\r\n * Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Tick]].\r\n */\r\nexport interface ITickProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Length of the tick (px).\r\n\t */\r\n\tlength?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tick]].\r\n */\r\nexport interface ITickEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITickAdapters extends ISpriteAdapters, ITickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Tick extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITickEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Tick\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.length = 6;\r\n\t\tthis.strokeOpacity = 0.2;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Length of the tick in pixels.\r\n\t *\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set length(value: number) {\r\n\t\tthis.setPropertyValue(\"length\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get length(): number {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"length\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n","/**\r\n * Axis Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisTick]].\r\n */\r\nexport interface IAxisTickProperties extends ITickProperties {\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the tick on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisTick]].\r\n */\r\nexport interface IAxisTickEvents extends ITickEvents {\r\n\r\n}\r\n\r\n/**\r\n * Defines adapter for [[AxisTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisTickAdapters extends ITickAdapters, IAxisTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an axis tick\r\n * @see {@link IAxisTickEvents} for a list of available events\r\n * @see {@link IAxisTickAdapters} for a list of available Adapters\r\n */\r\nexport class AxisTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisTickEvents;\r\n\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referece to Axis element this tick is placed on.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisTick\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\tthis.length = 5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if tick should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally tick goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisTick\"] = AxisTick;\r\n","/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateLayout();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n","/**\r\n * Axis Bullet module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerAdapters, IContainerEvents, IContainerProperties } from \"../../core/Container\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw inside plot area (`true`) or outside it (`false`).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapter for [[AxisBullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBulletAdapters extends IContainerAdapters, IAxisBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a positioned bullet (element) on an Axis.\r\n *\r\n * ```TypeScript\r\n * let range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * let flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JavaScript\r\n * var range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * var flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"xAxes\": [{\r\n *     \"type\": \"DateAxis\",\r\n *     // ...\r\n *     \"axisRanges\": [{\r\n *       \"date\": new Date(2018, 0, 5),\r\n *       \"bullet: {\r\n *         \"type\": \"FlagBullet\",\r\n *         \"label\": {\r\n *           \"text\": \"Hello\"\r\n *         }\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.9\r\n * @see {@link IAxisBulletEvents} for a list of available events\r\n * @see {@link IAxisBulletAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBulletEvents;\r\n\r\n\t/**\r\n\t * Data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisBullet\";\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * let bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * let flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * var bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * var flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"endDate\": new Date(2018, 0, 6),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"AxisBullet\",\r\n\t *         \"location\": 1,\r\n\t *         \"children\": [{\r\n\t *           \"type\": \"FlagBullet\",\r\n\t *           \"label\": {\r\n\t *             \"text\": \"Hello\"\r\n\t *           }\r\n\t *         }]\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0.5\r\n\t * @param  value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBullet\"] = AxisBullet;","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * A module which defines functionality related to Value Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { ValueAxis } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Value break starts on.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * Value break ends on.\r\n\t */\r\n\tendValue?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ValueAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisBreakAdapters extends IAxisBreakAdapters, IValueAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on value axis.\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * when comparing columns with relatively similar values, it would make sense\r\n * to cut out their mid section, so that their tip differences are more\r\n * prominent.\r\n *\r\n * @see {@link IValueAxisBreakEvents} for a list of available events\r\n * @see {@link IValueAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: ValueAxis;\r\n\r\n\t/**\r\n\t * [adjustedStep description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedStep: number;\r\n\r\n\t/**\r\n\t * [adjustedMin description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMin: number;\r\n\r\n\t/**\r\n\t * [adjustedMax description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMax: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxisBreak\"] = ValueAxisBreak;\r\n","/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\t\t\t\t\t\t\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\t\t\t\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\t\t\t\r\n\t\t\tlet step = minMaxStep.step;\t\t\t\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\t\t\t\t\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step) {\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\t\t\t\tthis._step = step;\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.round(value, decCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMax) {\r\n\t\t\t\t\t\tselectionMax = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\t\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default flase\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", ()=>{\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\t\t\t\t\t\t\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t * \r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif(!$type.isNumber(min)){\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(max)){\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif(!$type.isNumber(step)){\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif(min >= 0 && omin < 0){\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif(omax <= 0 && omax > 0){\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * HeatLegend module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * Minimum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxValue?: number;\r\n\r\n\r\n\t/**\r\n\t * Maximum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * Number of markers (steps)\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmarkerCount?: number;\r\n\r\n\r\n\t/**\r\n\t * Orientation\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatLegend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatLegendAdapters extends IContainerAdapters, IHeatLegendProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class HeatLegend extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IHeatLegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IHeatLegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IHeatLegendEvents;\r\n\r\n\t/**\r\n\t * List of heat legend markers (color step rectangles).\r\n\t */\r\n\tpublic markers: ListTemplate<RoundedRectangle>;\r\n\r\n\t/**\r\n\t * Container which holds markers\r\n\t */\r\n\tpublic markerContainer: Container;\r\n\r\n\t/**\r\n\t * Value axis of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _valueAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * Series of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _series: Series;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatLegend\";\r\n\r\n\t\tthis.markerContainer = this.createChild(Container);\r\n\t\tthis.markerContainer.shouldClone = false;\r\n\r\n\t\tthis.markerCount = 1;\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: RoundedRectangle = new RoundedRectangle();\r\n\t\tmarker.minHeight = 20;\r\n\t\tmarker.minWidth = 20;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.fillOpacity = 1;\r\n\t\tmarker.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tthis.markerContainer.minHeight = 20;\r\n\t\tthis.markerContainer.minWidth = 20;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\tthis.markers = new ListTemplate<RoundedRectangle>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tprotected getMinFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet minValue;\r\n\t\t\t$iter.eachContinue(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tminValue = heatRule.min;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getMaxFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet maxValue;\r\n\t\t\t$iter.each(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tmaxValue = heatRule.max;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.valueAxis.renderer.inversed = this.reverseOrder;\r\n\r\n\t\tlet series = this.series;\r\n\r\n\t\tlet minColor = this.minColor;\r\n\t\tlet maxColor = this.maxColor;\r\n\r\n\t\tif (!$type.hasValue(minColor)) {\r\n\t\t\tminColor = toColor(this.getMinFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (series) {\r\n\t\t\tlet seriesFill = series.fill;\r\n\t\t\tif (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n\t\t\t\tminColor = seriesFill;\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n\t\t\t\tmaxColor = seriesFill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tlet minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(minOpacity)) {\r\n\t\t\tminOpacity = 1;\r\n\t\t}\r\n\t\tlet maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(maxOpacity)) {\r\n\t\t\tmaxOpacity = 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(minStrokeOpacity)) {\r\n\t\t\tminStrokeOpacity = 1;\r\n\t\t}\r\n\t\tlet maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(maxStrokeOpacity)) {\r\n\t\t\tmaxStrokeOpacity = 1;\r\n\t\t}\r\n\r\n\t\tlet minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n\t\tlet maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n\r\n\r\n\t\t//if (series) {\r\n\t\tfor (let i = 0; i < this.markerCount; i++) {\r\n\t\t\tlet marker = this.markers.getIndex(i);\r\n\r\n\t\t\tif (!marker) {\r\n\t\t\t\tmarker = this.markers.create();\r\n\t\t\t\tmarker.parent = this.markerContainer;\r\n\t\t\t\tmarker.height = percent(100);\r\n\t\t\t\tmarker.width = percent(100);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (this.markerCount == 1) {\r\n\t\t\t\tlet gradient = new LinearGradient();\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tgradient.rotation = -90;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmarker.fill = gradient;\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet strokeGradient = new LinearGradient();\r\n\t\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\tstrokeGradient.rotation = -90;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmarker.stroke = strokeGradient;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet c = i;\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tc = this.markerCount - i - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n\t\t\t\tmarker.fill = color;\r\n\r\n\t\t\t\tlet opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n\t\t\t\tmarker.fillOpacity = opacity;\r\n\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet color = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n\t\t\t\t\tmarker.stroke = color;\r\n\r\n\t\t\t\t\tlet opacity = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n\t\t\t\t\tmarker.strokeOpacity = opacity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet renderer = this.valueAxis.renderer;\r\n\t\tif (this.markerCount > 1) {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\trenderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valueAxis.invalidate();\r\n\r\n\t\tfor (let i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n\t\t\tthis.markers.getIndex(i).parent = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!$type.isObject(value)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maxColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set markerCount(value: number) {\r\n\t\tthis.setPropertyValue(\"markerCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns number of color squares (markers).\r\n\t * @return {number}\r\n\t */\r\n\tpublic get markerCount(): number {\r\n\t\treturn this.getPropertyValue(\"markerCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis.setPropertyValue(\"minValue\", value);\r\n\t\tthis.valueAxis.min = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minimum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis.setPropertyValue(\"maxValue\", value);\r\n\t\tthis.valueAxis.max = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\treturn this.getPropertyValue(\"maxValue\");\r\n\t}\r\n\r\n\t/**\r\n\t* Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n\t*\r\n\t* @param {\"horizontal\" | \"vertical\"}\r\n\t*/\r\n\tpublic set orientation(value: \"horizontal\" | \"vertical\") {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet markerContainer = this.markerContainer;\r\n\t\tlet valueAxis = this.valueAxis;\r\n\r\n\t\t// HORIZONTAL\r\n\t\tif (value == \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.width)) {\r\n\t\t\t\tthis.width = 200;\r\n\t\t\t}\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tvalueAxis.width = percent(100);\r\n\t\t\tvalueAxis.height = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"vertical\";\r\n\r\n\t\t\tthis.layout = \"vertical\";\r\n\t\t\tmarkerContainer.width = percent(100);\r\n\t\t\tmarkerContainer.height = undefined;\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererX();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// VERTICAL\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.height)) {\r\n\t\t\t\tthis.height = 200;\r\n\t\t\t}\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.layout = \"horizontal\";\r\n\t\t\tmarkerContainer.width = undefined;\r\n\t\t\tmarkerContainer.height = percent(100);\r\n\t\t\tvalueAxis.height = percent(100);\r\n\t\t\tvalueAxis.width = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererY();\r\n\t\t\t}\r\n\t\t\tvalueAxis.renderer.inside = true;\r\n\t\t\tvalueAxis.renderer.labels.template.inside = true;\r\n\r\n\t\t\tthis.markerContainer.reverseOrder = true;\r\n\t\t}\r\n\r\n\t\tlet renderer = valueAxis.renderer;\r\n\t\trenderer.grid.template.disabled = true;\r\n\t\trenderer.axisFills.template.disabled = true;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t\trenderer.labels.template.padding(2, 3, 2, 3);\r\n\r\n\t\trenderer.minHeight = undefined;\r\n\t\trenderer.minWidth = undefined;\r\n\r\n\t\tthis.markerContainer.layout = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns orientation value.\r\n\t *\r\n\t * @return {\"horizontal\" | \"vertical\"}\r\n\t */\r\n\tpublic get orientation(): \"horizontal\" | \"vertical\" {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n\t * @param {ValueAxis}\r\n\t */\r\n\tpublic set valueAxis(valueAxis: ValueAxis) {\r\n\r\n\t\tthis._valueAxis = valueAxis;\r\n\r\n\t\tvalueAxis.parent = this;\r\n\t\tvalueAxis.strictMinMax = true;\r\n\t\tthis.orientation = this.orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns valueAxis value.\r\n\t * @return {ValueAxis}\r\n\t */\r\n\tpublic get valueAxis(): ValueAxis {\r\n\t\tif (!this._valueAxis) {\r\n\t\t\tthis.valueAxis = this.createChild(ValueAxis);\r\n\t\t\tthis.valueAxis.shouldClone = false;\r\n\t\t}\r\n\t\treturn this._valueAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n\t * @param series\r\n\t */\r\n\tset series(series: Series) {\r\n\t\tthis._series = series;\r\n\r\n\t\tlet dataField = \"value\";\r\n\r\n\t\ttry {\r\n\t\t\tlet dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n\t\t\tif (dataFieldDefined) {\r\n\t\t\t\tdataField = dataFieldDefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\r\n\t\tseries.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\t\t}, undefined, false);\r\n\r\n\t\tseries.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n\t\tseries.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns series value.\r\n\t * @return {Series}\r\n\t */\r\n\tget series(): Series {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates min/max of value axis.\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMinMax(min: number, max: number) {\r\n\t\tlet valueAxis = this.valueAxis;\r\n\t\tif (!$type.isNumber(this.minValue)) {\r\n\t\t\tvalueAxis.min = min;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.maxValue)) {\r\n\t\t\tvalueAxis.max = max;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n\t\t\t\tif ($type.isString(config.series)) {\r\n\t\t\t\t\tif (this.map.hasKey(config.series)) {\r\n\t\t\t\t\t\tconfig.series = this.map.getKey(config.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet seriesId = config.series;\r\n\t\t\t\t\t\tconst disposer = this.map.events.on(\"insertKey\", function(ev) {\r\n\t\t\t\t\t\t\tif (ev.key == seriesId) {\r\n\t\t\t\t\t\t\t\tthis.series = ev.newValue;\r\n\t\t\t\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t\tdelete config.series;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n","/**\r\n * Grip module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button, IButtonProperties, IButtonAdapters, IButtonEvents } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../Registry\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grip]].\r\n */\r\nexport interface IGripProperties extends IButtonProperties {\r\n\tposition: Align | VerticalAlign;\r\n\tautoHideDelay: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grip]] for [[Grip]].\r\n */\r\nexport interface IGripEvents extends IButtonEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Grip]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGripAdapters extends IButtonAdapters, IGripProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a grip element that can be used for scrolling or other things.\r\n *\r\n * @see {@link IGripEvents} for a list of available events\r\n * @see {@link IGripAdapters} for a list of available Adapters\r\n * @since 4.4.0\r\n */\r\nexport class Grip extends Button {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGripProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGripAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGripEvents;\r\n\r\n\t\t/**\r\n\t * Disposer for grip autohide timeout.\r\n\t */\r\n\tprotected _autoHideTimeout: Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Grip\";\r\n\r\n\t\tconst cs = new InterfaceColorSet();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.margin(3, 3, 3, 3);\r\n\t\tthis.background.fillOpacity = 0.3;\r\n\t\tthis.background.cornerRadius(10, 10, 10, 10);\r\n\r\n\t\t// Create an icon\r\n\t\tlet icon: Sprite = new Sprite();\r\n\t\ticon.element = this.paper.add(\"path\");\r\n\r\n\t\tlet path = $path.moveTo({ x: -6, y: 0 });\r\n\t\tpath += $path.lineTo({ x: 6, y: 0 });\r\n\t\tpath += $path.moveTo({ x: -8, y: -6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: -12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: -6 });\r\n\t\tpath += $path.moveTo({ x: -8, y: 6 });\r\n\t\tpath += $path.lineTo({ x: 0, y: 12 });\r\n\t\tpath += $path.lineTo({ x: 8, y: 6 });\r\n\t\ticon.path = path;\r\n\t\ticon.strokeWidth = 2;\r\n\t\ticon.fillOpacity = 0;\r\n\r\n\t\ticon.pixelPerfect = true;\r\n\t\ticon.padding(0, 4, 0, 4);\r\n\t\ticon.stroke = cs.getFor(\"text\");\r\n\t\ticon.strokeOpacity = 0.7;\r\n\t\ticon.align = \"center\";\r\n\t\ticon.valign = \"middle\";\r\n\t\tthis.icon = icon;\r\n\r\n\t\tthis.label.dispose();\r\n\t\tthis.label = undefined;\r\n\r\n\t\t// Set default position\r\n\t\tthis.position = \"right\";\r\n\r\n\t\t// Set up autohide\r\n\t\tthis.autoHideDelay = 3000;\r\n\t\tthis.events.on(\"shown\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\tif (this._autoHideTimeout) {\r\n\t\t\t\tthis._autoHideTimeout.dispose();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.autoHideDelay) {\r\n\t\t\t\tthis._autoHideTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}, this.autoHideDelay);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets position of the grip.\r\n\t *\r\n\t * Available options: \"left\", \"right\" (default), \"top\", \"bottom\".\r\n\t *\r\n\t * @param  value  Position\r\n\t */\r\n\tpublic set position(value: Align | VerticalAlign) {\r\n\t\tif (this.setPropertyValue(\"position\", value)) {\r\n\t\t\tswitch(value) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tthis.align = \"left\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tthis.align = \"right\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 0;\r\n\t\t\t\t\tthis.width = undefined;\r\n\t\t\t\t\tthis.height = percent(30);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"top\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"top\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"bottom\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"bottom\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.align = \"center\";\r\n\t\t\t\t\tthis.valign = \"middle\";\r\n\t\t\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\t\t\tthis.verticalCenter = \"middle\";\r\n\t\t\t\t\tthis.icon.rotation = 90;\r\n\t\t\t\t\tthis.width = percent(30);\r\n\t\t\t\t\tthis.height = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position\r\n\t */\r\n\tpublic get position(): Align | VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of milliseconds to show grip until it is hidden automatically.\r\n\t *\r\n\t * @default 3000\r\n\t * @param  value  Delay\r\n\t */\r\n\tpublic set autoHideDelay(value: number) {\r\n\t\tthis.setPropertyValue(\"autoHideDelay\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Delay\r\n\t */\r\n\tpublic get autoHideDelay(): number {\r\n\t\treturn this.getPropertyValue(\"autoHideDelay\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grip\"] = Grip;\r\n","/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../core/Registry\";\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentEvents, IComponentAdapters } from \"../core/Component\";\r\nimport { MutableValueDisposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { Grip } from \"../core/elements/Grip\";\r\nimport { Legend } from \"../charts/Legend\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../core/utils/Responsive\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChartDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Chart]].\r\n */\r\nexport interface IChartDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Chart]].\r\n */\r\nexport interface IChartProperties extends IComponentProperties { }\r\n\r\n/**\r\n * Defines events for [[Chart]].\r\n */\r\nexport interface IChartEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Chart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChartAdapters extends IComponentAdapters, IChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nexport class Chart extends Component {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChartEvents;\r\n\r\n\t/**\r\n\t * A List of chart titles.\r\n\t */\r\n\tpublic titles: ListTemplate<Label>;\r\n\r\n\t/**\r\n\t * Container that holds the chart itself.\r\n\t */\r\n\tpublic chartContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to a container that holds both the chart and the legend.\r\n\t */\r\n\tpublic chartAndLegendContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to chart's [[Legend]].\r\n\t * @ignore\r\n\t */\r\n\tprotected _legend = new MutableValueDisposer<Legend>();\r\n\r\n\t/**\r\n\t * Instance of the grip element.\r\n\t */\r\n\tprotected _dragGrip: $type.Optional<Grip>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Chart) {\r\n\t\t\tthrow new Error(\"'Chart' cannot be instantiated directly. Please use a specific chart type.\");\r\n\t\t}\r\n\t\tthis.className = \"Chart\";\r\n\r\n\t\t// Create a list of titles\r\n\t\tconst template = new Label();\r\n\t\tthis.titles = new ListTemplate<Label>(template);\r\n\t\tthis._disposers.push(new ListDisposer(this.titles));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\t// Chart component is also a container. it holds _chartAndLegendCont and titles\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.layout = \"vertical\";\r\n\r\n\t\t// Chart and legend\r\n\t\tlet chartAndLegendContainer: Container = this.createChild(Container);\r\n\t\tchartAndLegendContainer.shouldClone = false;\r\n\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\tchartAndLegendContainer.width = percent(100);\r\n\t\tchartAndLegendContainer.height = percent(100);\r\n\t\tthis.chartAndLegendContainer = chartAndLegendContainer;\r\n\r\n\t\t// Chart container holds all the elements of a chart, extept titles and legend\r\n\t\tlet chartContainer = chartAndLegendContainer.createChild(Container);\r\n\t\tchartContainer.shouldClone = false;\r\n\t\tchartContainer.width = percent(100);\r\n\t\tchartContainer.height = percent(100);\r\n\t\tthis.chartContainer = chartContainer;\r\n\r\n\t\tthis.showOnInit = true;\r\n\r\n\t\tthis._disposers.push(this._legend);\r\n\r\n\t\t// Add title list events to apply certain formatting options and to make\r\n\t\t// the chart reference them as accessible screen reader labels\r\n\t\tthis.titles.events.on(\"inserted\", (label) => {\r\n\t\t\tthis.processTitle(label);\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\t\tthis.titles.events.on(\"removed\", (label) => {\r\n\t\t\tthis.updateReaderTitleReferences();\r\n\t\t}, this, false);\r\n\r\n\t\t// Accessibility\r\n\t\t// It seems we can't set focusable on the whole chart because it seems to\r\n\t\t// mess up the whole focus event system - getting a focus on an inside\r\n\t\t// object also trigger focus on parent\r\n\t\t//this.focusable = true;\r\n\t\tthis.role = \"region\";\r\n\r\n\t\tthis.defaultState.transitionDuration = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates drawing of the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.fixLayout();\r\n\t\tsuper.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates legend's hierarchy based on the position.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet chartAndLegendContainer = this.chartAndLegendContainer;\r\n\t\t\tlet chartContainer = this.chartContainer;\r\n\t\t\tchartContainer.x = undefined;\r\n\t\t\tchartContainer.y = undefined;\r\n\t\t\tlegend.x = undefined;\r\n\t\t\tlegend.y = undefined;\r\n\t\t\tswitch (legend.position) {\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"horizontal\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toBack();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tchartAndLegendContainer.layout = \"vertical\";\r\n\t\t\t\t\tlegend.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\r\n\t\t// Nothing here. This method is provided only as a \"placeholder\" for\r\n\t\t// extending classes to override\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new title to the chart when it is inserted into chart's titles\r\n\t * list.\r\n\t * @param event  An event object which is triggered when inserting into titles list\r\n\t * @return Label object\r\n\t */\r\n\tprotected processTitle(event: IListEvents<Label>[\"inserted\"]): Label {\r\n\t\tlet title: Label = event.newValue;\r\n\t\ttitle.parent = this;\r\n\t\ttitle.toBack();\r\n\t\ttitle.shouldClone = false;\r\n\t\ttitle.align = \"center\";\r\n\r\n\t\t// Need to explicitly apply the `id` attribute so it can be referenced by\r\n\t\t// `aria-labelledby`\r\n\t\ttitle.uidAttr();\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if chart has any title elements. If it does, we will use them in an\r\n\t * `aria-labelledby` attribute so that screen readers can use them to properly\r\n\t * describe the chart when it is focused or hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateReaderTitleReferences(): void {\r\n\t\tif (this.titles.length) {\r\n\t\t\tlet titleIds: Array<string> = [];\r\n\t\t\t$iter.each(this.titles.iterator(), (title) => {\r\n\t\t\t\ttitleIds.push(title.uid);\r\n\t\t\t});\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": titleIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Holds the instance of chart's [[Leged]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n\t * @param Legend\r\n\t */\r\n\tpublic set legend(legend: Legend) {\r\n\t\tthis.setLegend(legend);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend\r\n\t */\r\n\tpublic get legend(): Legend {\r\n\t\treturn this._legend.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tif (this._legend.get() !== legend) {\r\n\t\t\tif (legend) {\r\n\t\t\t\tlegend.maxWidth = 200;\r\n\t\t\t\t// Set legend options\r\n\t\t\t\tlegend.parent = this.chartAndLegendContainer;\r\n\r\n\t\t\t\tthis._legend.set(legend, legend.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"position\") {\r\n\t\t\t\t\t\tthis.fixLayout();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false));\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._legend.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(){\r\n\t\t// otherwise there might be some errors when disposing chart which was just inited\r\n\t\tif(this.legend){\r\n\t\t\tthis.legend.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up legend\r\n\t\t\tif ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n\t\t\t\tconfig.legend.type = \"Legend\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.titles.copyFrom(source.titles);\r\n\t\tthis.chartContainer.copyFrom(source.chartContainer);\r\n\t\tif (source.legend) {\r\n\t\t\tthis.legend = source.legend.clone();\r\n\t\t\tthis.legend.removeChildren();\r\n\t\t}\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[Grip]] which serves as a grip point which appears on\r\n\t * touch and allows scrolling whole page even if chart is occupying the\r\n\t * whole of the screen and would otherwise prevent scrolling.\r\n\t *\r\n\t * @since 4.4.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/touch/} For more information.\r\n\t * @param  value  Grip\r\n\t */\r\n\tpublic set dragGrip(value: Grip) {\r\n\t\tthis._dragGrip = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grip\r\n\t */\r\n\tpublic get dragGrip(): Grip {\r\n\t\tif (!this._dragGrip) {\r\n\t\t\tlet grip = this.tooltipContainer.createChild(Grip);\r\n\t\t\tgrip.align = \"right\";\r\n\t\t\tgrip.valign = \"middle\";\r\n\t\t\tgrip.hide(0);\r\n\r\n\t\t\tgrip.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tthis.interactionsEnabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tgrip.events.on(\"up\", (ev) => {\r\n\t\t\t\tthis.interactionsEnabled = true;\r\n\t\t\t});\r\n\r\n\t\t\tthis.events.on(\"down\", (ev) => {\r\n\t\t\t\tif (ev.touch) {\r\n\t\t\t\t\tgrip.show();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._dragGrip = grip;\r\n\t\t}\r\n\t\treturn this._dragGrip;\r\n\t}\r\n\r\n\tpublic set focusable(value: boolean) {\r\n\t\tthis.parent.focusable = true;\r\n\t}\r\n\r\n\tpublic get focusable(): boolean {\r\n\t\treturn this.parent.focusable;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Chart\"] = Chart;\r\n\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Reduce horizontal margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingLeft > 10) {\r\n\t\t\t\tstate.properties.paddingLeft = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingRight > 10) {\r\n\t\t\t\tstate.properties.paddingRight = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Reduce vertical margins\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tif (target.pixelPaddingTop > 10) {\r\n\t\t\t\tstate.properties.paddingTop = 10;\r\n\t\t\t}\r\n\t\t\tif (target.pixelPaddingBottom > 10) {\r\n\t\t\t\tstate.properties.paddingBottom = 10;\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove horizontal padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingLeft = 0;\r\n\t\t\tstate.properties.paddingRight = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical padding\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Chart) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.paddingTop = 0;\r\n\t\t\tstate.properties.paddingBottom = 0;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Module that defines everything related to building bullets.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]].\r\n */\r\nexport interface IBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t */\r\n\tlocationX?: number;\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t */\r\n\tlocationY?: number;\r\n\r\n\t/**\r\n\t * Specifies if bullet needs to be redrawn if the underlying data changes.\r\n\t */\r\n\tisDynamic?: boolean;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\txField?: string;\r\n\r\n\t/**\r\n\t * [string description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tyField?: string;\r\n\r\n\t/**\r\n\t * Defines if this bullet should be copied to legend marker\r\n\t */\r\n\tcopyToLegendMarker?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Bullet]].\r\n */\r\nexport interface IBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Bullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IBulletAdapters extends IContainerAdapters, IBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Bullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IBulletEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Bullet\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.tooltipX = 0;\r\n\t\tthis.tooltipY = 0;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.copyToLegendMarker = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative horizontal location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationX\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative vertical location within cell. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tif(this.setPropertyValue(\"locationY\", value)){\r\n\t\t\tlet dataItem = this.dataItem\r\n\t\t\tif(dataItem && dataItem.component){\r\n\t\t\t\tdataItem.component.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set xField(value: string) {\r\n\t\tthis.setPropertyValue(\"xField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this.getPropertyValue(\"xField\");\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * Description\r\n\t * @param value  [description]\r\n\t */\r\n\tpublic set yField(value: string) {\r\n\t\tthis.setPropertyValue(\"yField\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this.getPropertyValue(\"yField\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the bullet is \"dynamic\".\r\n\t *\r\n\t * In most cases the bullets remain the same, even if the underlying data\r\n\t * changes.\r\n\t *\r\n\t * However, in cases where bullet also displays a label, or its size depends\r\n\t * on data, it also needs to be redrawn when the underlying data changes.\r\n\t *\r\n\t * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n\t * time data changes. Regular bullets will be reused as they are.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set isDynamic(value: boolean) {\r\n\t\tthis.setPropertyValue(\"isDynamic\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get isDynamic(): boolean {\r\n\t\treturn this.getPropertyValue(\"isDynamic\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if the bullet should be copied to legend marker\r\n\t *\r\n\t * @default false\r\n\t * @param value  Redraw on data change?\r\n\t */\r\n\tpublic set copyToLegendMarker(value: boolean) {\r\n\t\tthis.setPropertyValue(\"copyToLegendMarker\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Redraw on data change?\r\n\t */\r\n\tpublic get copyToLegendMarker(): boolean {\r\n\t\treturn this.getPropertyValue(\"copyToLegendMarker\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Bullet\"] = Bullet;\r\n\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Hide bullets\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.isXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Bullet) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { AxisDataItem } from \"../axes/Axis\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendDataItem, LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n\r\nexport interface IHeatRule {\r\n\ttarget: Sprite;\r\n\tproperty: string;\r\n\tmin: any;\r\n\tmax: any;\r\n\tdataField?: string;\r\n\tminValue?: number;\r\n\tmaxValue?: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SeriesDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Related item's width in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemWidth: number;\r\n\r\n\t/**\r\n\t * Related item's height in pixels.\r\n\t *\r\n\t * This is passed to bullets so that we'd know if the bullet (LabelBullet)\r\n\t * fits to max width/height.\r\n\t *\r\n\t * At the moment this is only used by column series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic itemHeight: number;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bullets: Dictionary<string, Sprite>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Series;\r\n\r\n\t/**\r\n\t * A dictionary of data items bullets, where key is uid of a bullet template.\r\n\t */\r\n\tpublic get bullets(): Dictionary<string, Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new Dictionary<string, Sprite>();\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._bullets));\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SeriesDataItem\";\r\n\t\t//@todo Should we make `bullets` list disposable?\r\n\t\t//this._disposers.push(new DictionaryDisposer(this.bullets));\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.bullets.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * data items's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[Series]].\r\n */\r\nexport interface ISeriesDataFields extends IComponentDataFields {\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t */\r\n\thidden?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[Series]].\r\n */\r\nexport interface ISeriesProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tminBulletDistance?: number;\r\n\r\n\t/**\r\n\t * Should series be hidden in chart's legend?\r\n\t */\r\n\thiddenInLegend?: boolean;\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t */\r\n\tname?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[Series]].\r\n */\r\nexport interface ISeriesEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\textremeschanged: {};\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tdataitemchanged: {\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Series]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISeriesAdapters extends IComponentAdapters, ISeriesProperties {\r\n\t/**\r\n\t * Applied to the name used by screen readers.\r\n\t */\r\n\titemReaderText: string\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nexport class Series extends Component {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ISeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISeriesEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used for the series.\r\n\t */\r\n\tpublic _dataItem: SeriesDataItem;\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this series.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Container series' elements are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic mainContainer: Container;\r\n\r\n\t/**\r\n\t * Should series' bullets?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tprotected _showBullets: boolean = true;\r\n\r\n\t/**\r\n\t * List of series' bullets.\r\n\t */\r\n\tprotected _bullets: ListTemplate<Sprite>;\r\n\r\n\t/**\r\n\t * Container bullets are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: SerialChart;\r\n\r\n\t/**\r\n\t * A container axis ranges are placed in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangesContainer: Container;\r\n\r\n\t/**\r\n\t * A list of axis ranges for this series.\r\n\t */\r\n\tpublic axisRanges: List<AxisDataItem>;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\t/**\r\n\t * Lowest overal values by type.\r\n\t */\r\n\tprotected _tmin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest overal values by type.\r\n\t */\r\n\tprotected _tmax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Lowest values in current selection by type.\r\n\t */\r\n\tprotected _smin = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * Highest values in current selection by type.\r\n\t */\r\n\tprotected _smax = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [dataItemsByAxis description]\r\n\t *\r\n\t * Both by category and date.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsByAxis = new Dictionary<string, Dictionary<string, this[\"_dataItem\"]>>();\r\n\r\n\t/**\r\n\t * Normally series items are focusable using keyboard, so that people can\r\n\t * select them with a TAB key. However, if there are a lot of data points on\r\n\t * screen it might be long and useless to tab through all o fthem.\r\n\t *\r\n\t * This is where `skipFocusThreshold` comes in. If there are more items than\r\n\t * the value set here, we will not make those focusable and rather let screen\r\n\t * reader software rely on the series summary, or authors provide alternative\r\n\t * detailed information display, such as HTML table.\r\n\t *\r\n\t * Different series might have different threshold defaults.\r\n\t */\r\n\tpublic skipFocusThreshold: number = 20;\r\n\r\n\t/**\r\n\t * Holds a default screen reader text for series data items. It will be used\r\n\t * to generate information for screen readers. If not set, the series will\r\n\t * try to deduce reader text from `tooltipText` or `tooltipHTML`. If those\r\n\t * are not set either, a default reader text will be used which is relevant\r\n\t * for each Series type.\r\n\t */\r\n\tprotected _itemReaderText: string;\r\n\r\n\r\n\t/**\r\n\t * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n\t */\r\n\tprotected _itemReaderTextChanged: boolean = false;\r\n\r\n\t/*\r\n\t\tpublic heatMapfillRule: (fill:Color, column: Sprite) => any = function(fill:Color, sprite: Sprite) {\r\n\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>sprite.dataItem;\r\n\r\n\t\t\tif (dataItem && dataItem.value) {\r\n\t\t\t\tlet series = dataItem.component;\r\n\t\t\t\tif($type.hasValue(series.minColor) &&  $type.hasValue(series.maxColor) && $type.isNumber(series.minValue) && $type.isNumber(series.maxValue)){\r\n\t\t\t\t\tlet percent = (dataItem.values.value.workingValue - series.minValue) / (series.maxValue - series.minValue);\r\n\t\t\t\t\treturn new Color($colors.interpolate(series.minColor.rgb, series.maxColor.rgb, percent));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\r\n\tprotected _heatRules: List<IHeatRule>;\r\n\r\n\t/**\r\n\t * Most of the series use absolute values. However sometimes various\r\n\t * calculated percent values are need, e.g. item's percent representation\r\n\t * across all values in series, etc.\r\n\t *\r\n\t * It's a resource-intensive operation, so it is disabled by default.\r\n\t *\r\n\t * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n\t * or creating 100% stacks, this setting needs to be set to `true`.\r\n\t * \r\n\t * NOTE: `PieChart`, which relies on slice percentages, has this\r\n\t * automatically set to `true`.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic calculatePercent: boolean = false;\r\n\r\n\t/**\r\n\t * Specifies if series should be automatically disposed when removing from\r\n\t * chart's `series` list.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * When chart/series' data is processed, all kinds of derivative values are\r\n\t * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n\t * time-consuming operation, especially prominent in data-heavy charts.\r\n\t *\r\n\t * If your chart does not need those values, and you have a lot of data,\r\n\t * setting this to `true` might give a dramatic increase in initial chart\r\n\t * load speed.\r\n\t *\r\n\t * Please note, regular column and line series usage scenarios do not\r\n\t * require derivative values. Those come into play only when you do advanced\r\n\t * functionality like coloring segments of charts in different colors\r\n\t * depending on change between open and close values, have stacked series, or\r\n\t * display any of the derived values, like percent, in tooltips or bullets.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tif (this.constructor === Series) {\r\n\t\t\tthrow new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n\t\t}\r\n\r\n\t\tthis.className = \"Series\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\r\n\t\tthis.axisRanges = new List<AxisDataItem>();\r\n\t\tthis.axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\r\n\t\tthis.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n\t\tthis.mainContainer = this.createChild(Container);\r\n\t\tthis.mainContainer.shouldClone = false;\r\n\t\tthis.mainContainer.mask = this.createChild(Sprite);\r\n\r\n\t\tthis._disposers.push(this.mainContainer);\r\n\r\n\t\t// all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n\t\tlet bulletsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis._shouldBeReady.push(bulletsContainer);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.virtualParent = this;\r\n\t\tthis._disposers.push(bulletsContainer);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.tooltip = new Tooltip();\r\n\t\tthis.tooltip.virtualParent = this;\r\n\t\tthis._disposers.push(this.tooltip);\r\n\r\n\t\tthis.hiddenState.transitionEasing = $ease.cubicIn;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis._disposers.push(this.dataItem);\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply accessibility\r\n\t\tthis.role = \"group\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * We need this here so that class names can be applied to bullets container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName && this.bulletsContainer) {\r\n\t\t\tthis.bulletsContainer.className = this.className + \"-bullets\";\r\n\t\t\tthis.bulletsContainer.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart series is used on.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullet.\r\n\t *\r\n\t * @param bullet  Sprite\r\n\t */\r\n\tpublic positionBullet(bullet: Sprite): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates newly created bullet after it has been instert into the list.\r\n\t *\r\n\t * @param event  List event\r\n\t * @todo investigate why itemReaderText is undefined\r\n\t */\r\n\tprotected processBullet(event: IListEvents<Sprite>[\"inserted\"]) {\r\n\t\tlet bullet: Sprite = event.newValue;\r\n\t\tbullet.isTemplate = true;\r\n\t\t// Add accessibility options to bullet\r\n\t\t// If there are relatively few bullets, make them focusable\r\n\t\tthis.events.once(\"datavalidated\", (ev) => {\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tbullet.focusable = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * removes bullets\r\n\t *\r\n\t * @param event  List event\r\n\t */\r\n\tprotected removeBullet(event: IListEvents<Sprite>[\"removed\"]) {\r\n\t\tlet bullet: Sprite = event.oldValue;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n\t\t\tif (eachBullet) {\r\n\t\t\t\teachBullet.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.processValues(false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getFirstValue(key: string, startIndex: number): number {\r\n\t\t// find first\r\n\t\t/*\r\n\t\treturn $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tfor (let key in dataItem.values) {\r\n\t\t\t\tif ($object.hasKey(dataItem.values, key)) {\r\n\t\t\t\t\tlet value: number = dataItem.values[key].workingValue;\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});*/\r\n\r\n\t\tif (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n\t\t\tstartIndex++;\r\n\t\t}\r\n\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns first value for the specific key in the series.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Value\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t */\r\n\tprotected getAbsoluteFirstValue(key: string): number {\r\n\t\tfor (let i = 0; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet value: number = dataItem.values[key].value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tsuper.rangeChangeUpdate();\r\n\t\tthis.processValues(true);\r\n\t}\r\n\r\n\t/**\r\n\t * [processValues description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Convert to propert object property iterator\r\n\t * @param dataItems [description]\r\n\t */\r\n\tprotected processValues(working: boolean) {\r\n\t\tif (!this.simplifiedProcessing) {\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tlet count: { [index: string]: number } = {};\r\n\t\t\tlet sum: { [index: string]: number } = {};\r\n\t\t\tlet absoluteSum: { [index: string]: number } = {};\r\n\t\t\tlet low: { [index: string]: number } = {};\r\n\t\t\tlet high: { [index: string]: number } = {};\r\n\t\t\tlet open: { [index: string]: number } = {};\r\n\t\t\tlet close: { [index: string]: number } = {};\r\n\t\t\tlet previous: { [index: string]: number } = {};\r\n\t\t\tlet first: { [index: string]: number } = {};\r\n\t\t\tlet absoluteFirst: { [index: string]: number } = {};\r\n\r\n\t\t\t//let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n\r\n\t\t\tlet startIndex: number = $math.max(0, this._workingStartIndex);\r\n\t\t\tstartIndex = $math.min(startIndex, this.dataItems.length);\r\n\r\n\t\t\tlet endIndex: number = $math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\t\tif (!$type.isNumber(startIndex)) {\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\t\tendIndex = this.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t$object.each(dataItem.values, (key, values) => {\r\n\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t//if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t// count values\r\n\t\t\t\t\t\tif (!$type.isNumber(count[key])) {\r\n\t\t\t\t\t\t\tcount[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcount[key]++;\r\n\r\n\t\t\t\t\t\t// sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\tsum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsum[key] += value;\r\n\r\n\t\t\t\t\t\t// absolute sum values\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteSum[key])) {\r\n\t\t\t\t\t\t\tabsoluteSum[key] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tabsoluteSum[key] += Math.abs(value);\r\n\r\n\t\t\t\t\t\t// open\r\n\t\t\t\t\t\tif (!$type.isNumber(open[key])) {\r\n\t\t\t\t\t\t\topen[key] = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// close\r\n\t\t\t\t\t\tclose[key] = value;\r\n\r\n\t\t\t\t\t\t// low\r\n\t\t\t\t\t\tif (!$type.isNumber(low[key])) {\r\n\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (low[key] > value) {\r\n\t\t\t\t\t\t\t\tlow[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// high\r\n\t\t\t\t\t\tif (!$type.isNumber(high[key])) {\r\n\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (high[key] < value) {\r\n\t\t\t\t\t\t\t\thigh[key] = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(first[key])) {\r\n\t\t\t\t\t\t\tfirst[key] = this.getFirstValue(key, startIndex);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(absoluteFirst[key])) {\r\n\t\t\t\t\t\t\tabsoluteFirst[key] = this.getAbsoluteFirstValue(key);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// change\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - first[key], \"change\");\r\n\t\t\t\t\t\t// change from start percent\r\n\t\t\t\t\t\t// will fail if first value is 0\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - first[key]) / first[key] * 100, \"changePercent\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]), \"startChange\");\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - absoluteFirst[key]) / absoluteFirst[key] * 100, \"startChangePercent\");\r\n\r\n\t\t\t\t\t\t// previous change\r\n\t\t\t\t\t\tlet prevValue: number = previous[key];\r\n\t\t\t\t\t\tif (!$type.isNumber(prevValue)) {\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n\t\t\t\t\t\t// previous change percent\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n\r\n\t\t\t\t\t\t// save previous\r\n\t\t\t\t\t\tprevious[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.calculatePercent) {\r\n\t\t\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\tlet ksum: number = absoluteSum[key];\r\n\r\n\t\t\t\t\t\tlet value: number = dataItem.getActualWorkingValue(key);\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tif (ksum > 0) {\r\n\t\t\t\t\t\t\t\t// this hack is made in order to make it possible to animate single slice to 0\r\n\t\t\t\t\t\t\t\t// if there is only one slice left, percent value is always 100%, so it won't animate\r\n\t\t\t\t\t\t\t\t// so we use real value of a slice instead of current value\r\n\t\t\t\t\t\t\t\tif (value == ksum) {\r\n\t\t\t\t\t\t\t\t\tksum = dataItem.values[key].value;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet percent = value / ksum * 100;\r\n\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, percent, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 0, \"percent\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// calculate one before first (cant do that in cycle, as we don't know open yet\r\n\t\t\t// when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n\t\t\t// so we do startIndex - 1\r\n\t\t\tif (startIndex > 0) {\r\n\t\t\t\tlet zeroItem: this[\"_dataItem\"] = dataItems.getIndex(startIndex - 1);\r\n\r\n\t\t\t\t$object.each(zeroItem.values, (key) => {\r\n\t\t\t\t\tlet value = zeroItem.values[key].value;\r\n\t\t\t\t\t// change\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, value - open[key], \"change\");\r\n\t\t\t\t\t// change percent\r\n\t\t\t\t\tzeroItem.setCalculatedValue(key, (value - open[key]) / open[key] * 100, \"changePercent\");\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// we save various data like sum, average to dataPoint of the series\r\n\t\t\tlet dataItem: DataItem = this.dataItem;\r\n\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, absoluteSum[key], \"absoluteSum\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, sum[key] / count[key], \"average\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, open[key], \"open\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, close[key], \"close\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, low[key], \"low\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, high[key], \"high\");\r\n\t\t\t\tdataItem.setCalculatedValue(key, count[key], \"count\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t//axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n\t\t\t//\t\t\taxisRange.appendChildren();\r\n\t\t\taxisRange.validate();\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t\tlet bulletsContainer = this.bulletsContainer;\r\n\t\tbulletsContainer.fill = this.fill;\r\n\t\tbulletsContainer.stroke = this.stroke;\r\n\t\tbulletsContainer.x = this.pixelX;\r\n\t\tbulletsContainer.y = this.pixelY;\r\n\r\n\t\tif (this.bulletsContainer.children.length > 0) {\r\n\t\t\tif (this._showBullets) {\r\n\r\n\r\n\t\t\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.children.each((bullet) => {\r\n\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.updateTooltipBounds();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.topParent) {\r\n\t\t\tlet x = 0;\r\n\t\t\tlet y = 0;\r\n\t\t\tlet w = this.topParent.maxWidth;\r\n\t\t\tlet h = this.topParent.maxHeight;\r\n\t\t\tlet rect = { x: x, y: y, width: w, height: h };\r\n\r\n\t\t\tthis.tooltip.setBounds(rect);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Sprite): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (this._showBullets) {\r\n\t\t\tif (!this.isHidden) {\r\n\t\t\t\tthis.bulletsContainer.visible = true;\r\n\t\t\t}\r\n\t\t\tthis.bullets.each((bulletTemplate) => {\r\n\t\t\t\t// always better to use the same, this helps to avoid redrawing\r\n\t\t\t\tlet bullet: Sprite = <Sprite>dataItem.bullets.getKey(bulletTemplate.uid);\r\n\r\n\t\t\t\tif (this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n\t\t\t\t\tif (!bullet) {\r\n\r\n\t\t\t\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\t\t\t\tif (disabledField && dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = false;\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = false;\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t\tbulletTemplate.disabled = true;\r\n\t\t\t\t\t\t\tbulletTemplate.applyOnClones = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbullet = bulletTemplate.clone();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbullet.shouldClone = false;\r\n\t\t\t\t\t\tdataItem.addSprite(bullet);\r\n\r\n\t\t\t\t\t\tif (!this.visible || this.isHiding) {\r\n\t\t\t\t\t\t\tbullet.hide(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet currentDataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\t\t\t\tif (currentDataItem != dataItem) {\r\n\t\t\t\t\t\t// set to undefined in order not to reuse\r\n\t\t\t\t\t\tif (currentDataItem) {\r\n\t\t\t\t\t\t\tcurrentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet readerText = this.itemReaderText;\r\n\r\n\t\t\t\t\t\tif (bullet instanceof Bullet) {\r\n\t\t\t\t\t\t\tif (!readerText) {\r\n\t\t\t\t\t\t\t\treaderText = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (bullet.isDynamic) {\r\n\t\t\t\t\t\t\t\tdataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\t//dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t\tthis.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbullet.deepInvalidate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add accessibility to bullet\r\n\t\t\t\t\t\tif (bullet.focusable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (bullet.hoverable) {\r\n\t\t\t\t\t\t\tbullet.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = this.populateString(readerText, bullet.dataItem);\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t\tbullet.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\t\t\tbullet.readerTitle = \"\";\r\n\t\t\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbullet.parent = this.bulletsContainer;\r\n\t\t\t\t\tdataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n\r\n\t\t\t\t\t// pass max w/h so we'd know if we should show/hide somethings\r\n\t\t\t\t\tbullet.maxWidth = dataItem.itemWidth;\r\n\t\t\t\t\tbullet.maxHeight = dataItem.itemHeight;\r\n\t\t\t\t\tbullet.__disabled = false;\r\n\r\n\t\t\t\t\tthis.positionBullet(bullet);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(bullet){\r\n\t\t\t\t\t\tbullet.__disabled = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.bulletsContainer.visible = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataRangeInvalid) {\r\n\t\t\tthis.invalidateProcessedData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series excluded from the axis scale calculations?\r\n\t *\r\n\t * @default false\r\n\t * @param value  Exclude from calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\r\n\t\t// A placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process axis range after it has been added to the list.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<AxisDataItem>[\"inserted\"]): void {\r\n\t\t// create container if not existing\r\n\t\tif (!this.rangesContainer) {\r\n\t\t\tthis.rangesContainer = this.createChild(Container);\r\n\t\t\tthis.rangesContainer.shouldClone = false;\r\n\t\t\tthis.rangesContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\tif (axisRange) {\r\n\t\t\taxisRange.contents.parent = this.rangesContainer;\r\n\t\t\taxisRange.isRange = true;\r\n\t\t\taxisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getAxisField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axis  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): void {\r\n\r\n\t\t// Placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Minimal distance between data points in pixels.\r\n\t *\r\n\t * If distance gets smaller than this, bullets are turned off to avoid\r\n\t * overlapping.\r\n\t *\r\n\t * `0` (zero) disables this behavior.\r\n\t *\r\n\t * IMPORTANT: This setting will work only when Series' base axis\r\n\t * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n\t * setting will be ignored, because it would be a huge overhead to measure\r\n\t * distance between each and every bullet.\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Distance (px)\r\n\t */\r\n\tpublic set minBulletDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"minBulletDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get minBulletDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minBulletDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of bullets that will be added to each and every items in the\r\n\t * series.\r\n\t *\r\n\t * You can push any object that is a descendant of a [[Sprite]] here. All\r\n\t * items added to this list will be copied and used as a bullet on all data\r\n\t * items, including their properties, events, etc.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n\t * @return List of bullets.\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Sprite> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Sprite>(new Bullet());\r\n\t\t\tthis._bullets.template.virtualParent = this;\r\n\t\t\tthis._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n\t\t\tthis._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Should the series be hidden in legend?\r\n\t *\r\n\t * @param value Hidden in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.feedLegend();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.getPropertyValue(\"hiddenInLegend\");\r\n\t}\r\n\r\n\t/**\r\n\t * Series' name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value);\r\n\r\n\t\tlet legendDataItem = this.legendDataItem;\r\n\t\tif (legendDataItem) {\r\n\t\t\tlegendDataItem.component.invalidate();\r\n\t\t\tlegendDataItem.component.invalidateRawData();\r\n\t\t}\r\n\r\n\t\tthis.readerTitle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader text to be applied to each individual data item, such\r\n\t * as bullets, columns or slices.\r\n\t *\r\n\t * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n\t * `{valueY}`, etc.\r\n\t *\r\n\t * Any text formatting options, e.g. `[bold]` will be ignored.\r\n\t *\r\n\t * @param value Screen reader text template\r\n\t */\r\n\tpublic set itemReaderText(value: string) {\r\n\t\tthis._itemReaderText = value;\r\n\t\tthis._itemReaderTextChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Screen reader text template\r\n\t */\r\n\tpublic get itemReaderText(): string {\r\n\r\n\t\t// Get explicitly set reader text\r\n\t\tlet readerText = this._itemReaderText;\r\n\r\n\t\t// Not set? Let's try something else\r\n\t\tif (!readerText) {\r\n\r\n\t\t\t// Tooltip text?\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipText);\r\n\t\t\t}\r\n\t\t\telse if (this.tooltipHTML) {\r\n\t\t\t\treaderText = $utils.plainText(this.tooltipHTML);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn readerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"itemReaderText\", readerText);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if number of data items in the series are beyond non-focusable\r\n\t * count and should not be available for TAB-through.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Items focusable?\r\n\t */\r\n\tpublic itemsFocusable(): boolean {\r\n\t\treturn this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\t// if this series has legend item\r\n\t\tif (this.legendDataItem) {\r\n\r\n\t\t\tlet legendSettings: LegendSettings = this.legendSettings;\r\n\t\t\tlet legendDataItem = this.legendDataItem;\r\n\t\t\tlet label: Label = legendDataItem.label;\r\n\t\t\tlet valueLabel: Label = legendDataItem.valueLabel;\r\n\r\n\t\t\t// update legend\r\n\t\t\tif (dataItem || notRange) {\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\tvalueLabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\t// if itemLabelText is set, means we have to reset label even if labelText is not set\r\n\t\t\t\t\tif (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n\t\t\t\t\t\tlabel.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tif (valueLabel) {\r\n\t\t\t\t\tif (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n\t\t\t\t\t\tvalueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueLabel.dataItem = this.dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tthis.bulletsContainer.copyFrom(source.bulletsContainer);\r\n\t\tthis.calculatePercent = source.calculatePercent;\r\n\t\tthis.simplifiedProcessing = source.simplifiedProcessing;\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this element.\r\n\t *\r\n\t * @param e Error\r\n\t */\r\n\tpublic raiseCriticalError(e: Error) {\r\n\t\tif (this._chart && this._chart.modal) {\r\n\t\t\tthis._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n\t\t\tthis._chart.modal.closable = false;\r\n\t\t\tthis._chart.modal.open();\r\n\t\t\tthis._chart.disabled = true;\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters() {\r\n\t\tsuper.applyFilters();\r\n\t\tthis.bulletsContainer.filters.clear();\r\n\r\n\t\t// copyFrom of a list copies, does not clone\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tthis.bulletsContainer.filters.push(filter.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of heat rules to apply to series' elements based on the value\r\n\t * of the data item.\r\n\t *\r\n\t * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n\t * be applied to child objects of series, like columns, bullets, etc.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t * ```Javacript\r\n\t * series.heatRules.push({\r\n\t *  \"target\": series.columns.template,\r\n\t *  \"property\": \"fill\",\r\n\t *  \"min\": am4core.color(\"#F5DBCB\"),\r\n\t *  \"max\": am4core.color(\"#ED7B84\"),\r\n\t *  \"dataField\": \"valueY\"\r\n\t *});\r\n\t *```\r\n\t *```JSON\r\n\t *{\r\n\t *  // ...\r\n\t *  \"series\": [{\r\n\t *    \"type\": \"ColumnSeries\",\r\n\t *    \"heatRules\": [{\r\n\t *      \"target\": \"columns.template\",\r\n\t *      \"property\": \"fill\",\r\n\t *      \"min\": \"#F5DBCB\",\r\n\t *      \"max\": \"#ED7B84\",\r\n\t *      \"dataField\": \"valueY\"\r\n\t *    }]\r\n\t *  }]\r\n\t *}\r\n\t *```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n\t * @return  Heat rules\r\n\t */\r\n\r\n\tpublic get heatRules(): List<IHeatRule> {\r\n\t\tif (!this._heatRules) {\r\n\t\t\tthis._heatRules = new List<IHeatRule>();\r\n\t\t\tthis._heatRules.events.on(\"inserted\", (event) => {\r\n\t\t\t\tlet heatRule = event.newValue;\r\n\t\t\t\tlet target = heatRule.target;\r\n\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\tlet dataField = heatRule.dataField;\r\n\r\n\t\t\t\t\tif (!$type.hasValue(dataField)) {\r\n\t\t\t\t\t\tdataField = \"value\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet min = heatRule.min;\r\n\t\t\t\t\tlet max = heatRule.max;\r\n\r\n\t\t\t\t\tlet seriesDataItem = this.dataItem;\r\n\t\t\t\t\tlet property = heatRule.property;\r\n\r\n\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\tthis.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// giveup here\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.dataItems.template.events.on(\"workingvaluechanged\", (event) => {\r\n\t\t\t\t\t\tif (event.property == dataField) {\r\n\t\t\t\t\t\t\tlet dataItem = event.target;\r\n\t\t\t\t\t\t\tlet foundSprite = false;\r\n\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == target) {\r\n\t\t\t\t\t\t\t\t\tlet anySprite = <any>sprite;\r\n\t\t\t\t\t\t\t\t\tanySprite[property] = anySprite[property];\r\n\t\t\t\t\t\t\t\t\tfoundSprite = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif (!foundSprite) {\r\n\t\t\t\t\t\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t$iter.each(sprite.children.iterator(), (child) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (child.className == target.className) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet anyChild = <any>child;\r\n\t\t\t\t\t\t\t\t\t\t\t\tanyChild[property] = anyChild[property];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// givup here\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child instanceof Container) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.deepInvalidate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\ttarget.adapter.add(<any>property, (value, ruleTarget, property) => {\r\n\t\t\t\t\t\tlet minValue = $type.toNumber(heatRule.minValue);\r\n\t\t\t\t\t\tlet maxValue = $type.toNumber(heatRule.maxValue);\r\n\r\n\t\t\t\t\t\tif (ruleTarget instanceof Sprite) {\r\n\t\t\t\t\t\t\tlet anySprite = <any>ruleTarget;\r\n\t\t\t\t\t\t\tlet propertyField = anySprite.propertyFields[property];\r\n\t\t\t\t\t\t\tif (propertyField && ruleTarget.dataItem) {\r\n\t\t\t\t\t\t\t\tlet dataContext = <any>ruleTarget.dataItem.dataContext;\r\n\t\t\t\t\t\t\t\tif (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n\t\t\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet dataItem: SeriesDataItem = <SeriesDataItem>ruleTarget.dataItem;\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(minValue)) {\r\n\t\t\t\t\t\t\tminValue = seriesDataItem.values[dataField].low;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!$type.isNumber(maxValue)) {\r\n\t\t\t\t\t\t\tmaxValue = seriesDataItem.values[dataField].high;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tlet fieldValues = dataItem.values[dataField];\r\n\t\t\t\t\t\t\tif (fieldValues) {\r\n\t\t\t\t\t\t\t\tlet workingValue = dataItem.getActualWorkingValue(dataField);\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n\r\n\t\t\t\t\t\t\t\t\tlet percent = (workingValue - minValue) / (maxValue - minValue);\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(workingValue) && !$type.isNumber(percent)) {\r\n\t\t\t\t\t\t\t\t\t\tpercent = 0.5;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// fixes problems if all values are the same\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(min)) {\r\n\t\t\t\t\t\t\t\t\t\treturn min + (max - min) * percent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (min instanceof Color) {\r\n\t\t\t\t\t\t\t\t\t\treturn new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this._heatRules;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tlet heatRules;\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up bullets\r\n\t\t\tif ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n\t\t\t\tfor (let i = 0, len = config.bullets.length; i < len; i++) {\r\n\t\t\t\t\tlet bullets = config.bullets[i];\r\n\t\t\t\t\tif (!$type.hasValue(bullets.type)) {\r\n\t\t\t\t\t\tbullets.type = \"Bullet\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Let's take heatRules out of the config, so that we can process\r\n\t\t\t// them later, when bullets are already there\r\n\t\t\tif ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n\t\t\t\theatRules = config.heatRules;\r\n\t\t\t\tdelete config.heatRules;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\t// Process heat rules again, when all other elements are ready\r\n\t\tif (heatRules) {\r\n\t\t\tfor (let i = 0, len = heatRules.length; i < len; i++) {\r\n\t\t\t\tlet rule = heatRules[i];\r\n\r\n\t\t\t\t// Resolve target\r\n\t\t\t\tlet target: any = this;\r\n\t\t\t\tif ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n\r\n\r\n\t\t\t\t\t// Check if we can find this element by id\r\n\t\t\t\t\tif (this.map.hasKey(rule.target)) {\r\n\t\t\t\t\t\ttarget = this.map.getKey(rule.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet parts = rule.target.split(\".\");\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tif (target instanceof List) {\r\n\t\t\t\t\t\t\t\tlet listitem = target.getIndex($type.toNumber(parts[x]));\r\n\t\t\t\t\t\t\t\tif (!listitem) {\r\n\t\t\t\t\t\t\t\t\ttarget = (<any>target)[parts[x]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ttarget = listitem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\ttarget = target[parts[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trule.target = target;\r\n\r\n\t\t\t\t// Resolve colors and percents\r\n\t\t\t\tif ($type.hasValue(rule.min)) {\r\n\t\t\t\t\trule.min = this.maybeColorOrPercent(rule.min);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(rule.max)) {\r\n\t\t\t\t\trule.max = this.maybeColorOrPercent(rule.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig({\r\n\t\t\t\theatRules: heatRules\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\t/*\r\n\t\tprotected getVisibility(): boolean {\r\n\t\t\tlet hidden = this.getPropertyValue(\"hidden\");\r\n\t\t\tif (hidden) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn super.getVisibility();\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"heatRules\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"heatRules\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;","/**\r\n * Serial chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { IListEvents, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SerialChartDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SerialChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SerialChart]].\r\n */\r\nexport interface ISerialChartDataFields extends IChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SerialChart]]\r\n */\r\nexport interface ISerialChartProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * A set of colors to be used for chart elements, like Series, Slices, etc.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * A set of patterns to use for fills, like Series, Slices, etc.\r\n\t *\r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[SerialChart]].\r\n */\r\nexport interface ISerialChartEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SerialChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISerialChartAdapters extends IChartAdapters, ISerialChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nexport class SerialChart extends Chart {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ISerialChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISerialChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISerialChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISerialChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: Series;\r\n\r\n\t/**\r\n\t * Holds a list of [[Series]] displayed on the chart.\r\n\t */\r\n\tprotected _series: ListTemplate<this[\"_seriesType\"]>\r\n\r\n\t/**\r\n\t * Holds the reference to the container actual series are drawn in.\r\n\t */\r\n\tpublic readonly seriesContainer: Container;\r\n\r\n\t/**\r\n\t * Holds a reference to the container series' bullets are drawn in.\r\n\t */\r\n\tpublic readonly bulletsContainer: Container;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SerialChart\";\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\r\n\t\tthis._usesData = false;\r\n\r\n\t\t// Create a container for series\r\n\t\tlet seriesContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tseriesContainer.shouldClone = false;\r\n\t\tseriesContainer.width = percent(100);\r\n\t\tseriesContainer.height = percent(100);\r\n\t\tseriesContainer.isMeasured = false;\r\n\t\tseriesContainer.layout = \"none\";\r\n\t\tseriesContainer.zIndex = 2;\r\n\t\tthis.seriesContainer = seriesContainer;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet bulletsContainer: Container = this.chartContainer.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.zIndex = 3;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this.colors) {\r\n\t\t\tthis.colors.dispose();\r\n\t\t}\r\n\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Serial chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's series.\r\n\t *\r\n\t * @return Chart's series\r\n\t */\r\n\tpublic get series(): ListTemplate<this[\"_seriesType\"]> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new ListTemplate<this[\"_seriesType\"]>(this.createSeries());\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._series, false));\r\n\t\t\tthis._disposers.push(this._series.template);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<Series>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(series);\r\n\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\tdataUser.invalidateDataItems();\r\n\t\t})\r\n\r\n\t\tif (series.autoDispose) {\r\n\t\t\tseries.dispose();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tseries.parent = undefined;\r\n\t\t\tseries.bulletsContainer.parent = undefined;\r\n\t\t}\r\n\t\t//this.feedLegend();\r\n\t\tif (this.legend) {\r\n\t\t\tlet dataItems = this.legend.dataItems;\r\n\r\n\t\t\tfor(let i = dataItems.length - 1; i >= 0; i--){\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem && dataItem.dataContext == series) {\r\n\t\t\t\t\t$array.remove(this.legend.data, dataItem.dataContext);\t\t\t\t\t\r\n\t\t\t\t\tthis.legend.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<Series>[\"inserted\"]): void {\r\n\t\tlet series: Series = event.newValue;\r\n\t\tif (series.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseries.chart = this;\r\n\t\tseries.parent = this.seriesContainer;\r\n\r\n\t\tseries.bulletsContainer.parent = this.bulletsContainer;\r\n\r\n\t\tthis._dataUsers.moveValue(series);\r\n\t\tseries.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(series);\r\n\t\t}))\r\n\r\n\t\tthis.handleSeriesAdded2(series);\r\n\r\n\t\tif (!series.hiddenInLegend) {\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.addData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2(series: Series) {\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\tthis._disposers.push(\r\n\t\t\t\t// on exit only as data is usually passed after push\r\n\t\t\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\tif (!series.data || series.data.length == 0) {\r\n\t\t\t\t\t\tseries.data = this.data;\r\n\t\t\t\t\t\tif(series.showOnInit){\r\n\t\t\t\t\t\t\tseries.reinit()\r\n\t\t\t\t\t\t\tseries.setPropertyValue(\"showOnInit\", false);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tseries.showOnInit = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseries.events.on(\"datavalidated\", ()=>{\r\n\t\t\t\t\t\t\t(<any>series)._data = [];\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for this chart type.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new Series();\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's color list.\r\n\t *\r\n\t * This list can be used by a number of serial items, like applying a new\r\n\t * color for each Series added. Or, applying a new color for each slice\r\n\t * of a Pie chart.\r\n\t *\r\n\t * Please see [[ColorSet]] for information on how you can set up to generate\r\n\t * unique colors.\r\n\t *\r\n\t * A theme you are using may override default pre-defined colors.\r\n\t *\r\n\t * @param value Color list\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color list\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[SerialChart]].\r\n\t *\r\n\t * @param source Source SerialChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.series.copyFrom(source.series);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tsuper.appear();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.showOnInit && series.inited) {\r\n\t\t\t\tseries.appear();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder.js\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder.js\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * South-most latitude.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * North-most latitude.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * East-most longitude.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * West-most longitude.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Shortcut to either [[MapLine]], [[MapImage]], or [[MapPolygon]].\r\n\t */\r\n\tpublic mapObject: MapObject;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * zoom level itself or use object's `zoomLevel` if set.\r\n\t *\r\n\t * @param value  Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.setProperty(\"zoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.properties[\"zoomLevel\"];\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * center position itself or use object's `zoomGeoPoint` if set.\r\n\t *\r\n\t * @param value  Zoom geo point\r\n\t */\r\n\tpublic set zoomGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setProperty(\"zoomGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom geo point\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.properties[\"zoomGeoPoint\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet geometry = this.getFeature().geometry;\r\n\t\tif (geometry) {\r\n\r\n\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\tlet west = bounds[0][0];\r\n\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\tlet north = bounds[1][1];\r\n\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\tlet changed = false;\r\n\t\t\tif (north != this.north) {\r\n\t\t\t\tthis._north = $math.round(north, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (south != this.south) {\r\n\t\t\t\tthis._south = $math.round(south, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (east != this.east) {\r\n\t\t\t\tthis._east = $math.round(east, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (west != this.west) {\r\n\t\t\t\tthis._west = $math.round(west, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\t// solves single russia prob\r\n\t\t\tif (this._east < this._west) {\r\n\t\t\t\tthis._east = 180;\r\n\t\t\t\tthis._west = -180;\r\n\t\t\t}\r\n\r\n\t\t\tif (changed) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field name in data for a numeric value of the map object.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomLevel` of the map object.\r\n\t */\r\n\tzoomLevel?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomGeoPoint` of the map object.\r\n\t */\r\n\tzoomGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t */\r\n\texclude?: string[];\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t */\r\n\tignoreBounds?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents {\r\n\tgeoBoundsChanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\tprotected _eastDefined: number;\r\n\r\n\tprotected _westDefined: number;\r\n\r\n\tprotected _southDefined: number;\r\n\r\n\tprotected _northDefined: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: MapChart;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\r\n\tprotected _mapObjects: ListTemplate<MapObject>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tif(this.tooltip){\r\n\t\t\tthis.tooltip.showInViewport = true;\r\n\t\t}\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param includes  A list of explicitly included ids\r\n\t * @param excludes  A list of explicitly excluded ids\r\n\t * @param id        Id of the object\r\n\t * @return Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Ignore bounds?\r\n\t */\r\n\tpublic set ignoreBounds(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"ignoreBounds\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore bounds?\r\n\t */\r\n\tpublic get ignoreBounds(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreBounds\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t\tmapObject.strokeWidth = mapObject.strokeWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tfor (let i = this.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (this.data[i].madeFromGeoData == true) {\r\n\t\t\t\t\tthis.data.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.disposeData();\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, undefined, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"Point\" | \"MultiLineString\" | \"MultiPolygon\", coordinates: [number, number] | Array<Array<[number, number]>> | Array<Array<Array<[number, number]>>> } }[] {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateExtremes() {\r\n\t\tlet north: number;\r\n\t\tlet south: number;\r\n\t\tlet east: number;\r\n\t\tlet west: number;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.north > north || !$type.isNumber(north)) {\r\n\t\t\t\tnorth = dataItem.north;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.south < south || !$type.isNumber(south)) {\r\n\t\t\t\tsouth = dataItem.south;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.west < west || !$type.isNumber(west)) {\r\n\t\t\t\twest = dataItem.west;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.east > east || !$type.isNumber(east)) {\r\n\t\t\t\teast = dataItem.east;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this._mapObjects) {\r\n\t\t\tthis._mapObjects.each((mapObject) => {\r\n\t\t\t\tif (mapObject.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = mapObject.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = mapObject.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = mapObject.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = mapObject.east;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (this.north != north || this.east != east || this.south != south || this.west != west) {\r\n\t\t\tthis._north = north;\r\n\t\t\tthis._east = east;\r\n\t\t\tthis._west = west;\r\n\t\t\tthis._south = south;\r\n\r\n\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\tif (!this.ignoreBounds) {\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * North-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set north(value: number) {\r\n\t\tthis._northDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._northDefined)) {\r\n\t\t\treturn this._northDefined;\r\n\t\t}\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * South-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set south(value: number) {\r\n\t\tthis._southDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._southDefined)) {\r\n\t\t\treturn this._southDefined;\r\n\t\t}\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * West-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set west(value: number) {\r\n\t\tthis._westDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._westDefined)) {\r\n\t\t\treturn this._westDefined;\r\n\t\t}\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * East-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set east(value: number) {\r\n\t\tthis._eastDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._eastDefined)) {\r\n\t\t\treturn this._eastDefined;\r\n\t\t}\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthrow Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"geodata\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.tooltip && this.topParent) {\r\n\t\t\tthis.tooltip.setBounds({ x: 10, y: 10, width: this.topParent.maxWidth - 20, height: this.topParent.maxHeight - 20 });\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents {\r\n\tgeoBoundsChanged: {}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet feature = this.getFeature();\r\n\t\tif (feature) {\r\n\t\t\tlet geometry = feature.geometry;\r\n\r\n\t\t\tif (geometry) {\t\t\t\t\r\n\t\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\t\tlet west = bounds[0][0];\r\n\t\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\t\tlet north = bounds[1][1];\r\n\t\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\t\tlet changed = false;\r\n\t\t\t\tif (north != this.north) {\r\n\t\t\t\t\tthis._north = $math.round(north, 8);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (south != this.south) {\r\n\t\t\t\t\tthis._south = $math.round(south);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (east != this.east) {\r\n\t\t\t\t\tthis._east = $math.round(east);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (west != this.west) {\r\n\t\t\t\t\tthis._west = $math.round(west);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\t\t\tif(this.series){\r\n\t\t\t\t\t\tthis.series.invalidateDataItems();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._east)) {\r\n\t\t\treturn this._east;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.east;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._west)) {\r\n\t\t\treturn this._west;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.west;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._south)) {\r\n\t\t\treturn this._south;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.south;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._north)) {\r\n\t\t\treturn this._north;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.north;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the element's [[Tooltip]].\r\n\t *\r\n\t * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n\t * `tooltipText` as well as data in `tooltipDataItem`.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @param optional point (sprite-related) to which tooltip must point.\r\n\t * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n\t */\r\n\tpublic showTooltip(point?: IPoint): boolean {\r\n\t\tconst res = super.showTooltip(point);\r\n\t\tif (res && this.showTooltipOn == \"always\" && !this.series.chart.events.has(\"mappositionchanged\", this.handleTooltipMove, this)) {\r\n\t\t\tthis.series.chart.events.on(\"mappositionchanged\", this.handleTooltipMove, this);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected handleTooltipMove(ev: any): void {\r\n\t\tthis.showTooltip();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\t//this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t\tlet p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\r\n\r\n\t\t\tlet visible: any = this.series.chart.projection.d3Path({ type: 'Point', coordinates: [this.longitude, this.latitude] });\r\n\r\n\t\t\tif (!visible) {\r\n\t\t\t\tthis.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.moveTo({ x: p[0], y: p[1] });\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [this.longitude, this.latitude] } };\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: Array<[Array<[number, number]>, Array<[number, number]>]>): Array<Array<Array<IGeoPoint>>> {\r\n\treturn $array.map(multiPolygon, (polygon) => {\r\n\t\tlet surface: Array<[number, number]> = polygon[0];\r\n\t\tlet hole: Array<[number, number]> = polygon[1];\r\n\r\n\t\t//let holePoints: Array<IGeoPoint> = [];\r\n\r\n\t\tconst geoArea = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tgeoArea.push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tgeoArea.push(multiPointToGeo(hole));\r\n\t\t}\r\n\r\n\t\treturn geoArea;\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: Array<Array<[number, number]>>): Array<Array<IGeoPoint>> {\r\n\treturn $array.map(multiLine, (multiLine) => {\r\n\t\treturn multiPointToGeo(multiLine);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: Array<[number, number]>): Array<IGeoPoint> {\r\n\treturn $array.map(points, (point) => {\r\n\t\treturn pointToGeo(point);\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiGeoToPoint(geoPoints: Array<IGeoPoint>): Array<[number, number]> {\r\n\treturn $array.map(geoPoints, geoToPoint);\r\n}\r\n\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: [number, number]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\r\n/**\r\n * Converts lat/long geo-point into a X/Y point.\r\n *\r\n * @param point  Source geo-point\r\n * @return X/Y point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): [number, number] {\r\n\treturn [geoPoint.longitude, geoPoint.latitude];\r\n}\r\n\r\n\r\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\r\nexport function multiGeoLineToMultiLine(multiGeoLine: Array<Array<IGeoPoint>>): Array<Array<[number, number]>> {\r\n\treturn $array.map(multiGeoLine, (segment) => {\r\n\t\treturn $array.map(segment, geoToPoint);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\r\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>): Array<Array<Array<[number, number]>>> {\r\n\treturn $array.map(multiGeoPolygon, (geoPolygon) => {\r\n\t\tlet surface = geoPolygon[0];\r\n\t\tlet hole = geoPolygon[1];\r\n\r\n\t\tconst multiPolygon = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(hole));\r\n\t\t}\r\n\r\n\t\treturn multiPolygon;\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\r\nexport function getCircle(longitude: number, latitude: number, radius: number): Array<Array<Array<[number, number]>>> {\r\n\treturn [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates as Array<Array<[number, number]>>];\r\n}\r\n\r\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\r\nexport function getBackground(north: number, east: number, south: number, west: number): Array<Array<Array<[number, number]>>> {\r\n\r\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\r\n\r\n\tif(west == -180){\r\n\t\twest = -179.9999;\r\n\t}\r\n\tif(south == -90){\r\n\t\tsouth = -89.9999;\r\n\t}\r\n\tif(north == 90){\r\n\t\tnorth = 89.9999;\r\n\t}\r\n\tif(east == 180){\r\n\t\teast = 179.9999;\r\n\t}\r\n\r\n\r\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\r\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\r\n\r\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\r\n\t\tlet surface: Array<[number, number]> = [];\r\n\t\tmultiPolygon.push([surface]);\r\n\r\n\t\tif(ln + stepLong > east){\r\n\t\t\tstepLong = east - ln;\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\r\n\t\t\tsurface.push([ll, north]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\r\n\t\t\tsurface.push([ln + stepLong, lt]);\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\r\n\t\t\tsurface.push([ll, south]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\r\n\t\t\tsurface.push([ln, lt]);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn multiPolygon;\r\n}\r\n","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport $polylabel from \"polylabel\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of geographical coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>;\r\n\r\n\t/**\r\n\t * Set of screen coordinates for the polygon.\r\n\t */\r\n\tmultiPolygon?: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t */\r\n\tvisualLatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t */\r\n\tvisualLongitude?: number;\r\n\r\n\t/**\r\n\t * When polygon's sides are plotted, they are bent according to the used\r\n\t * projection, to depict the shortest distance how it would go on the actual\r\n\t * land.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between two points of polygon's side is less\r\n\t * than `precision`, no bending will take place and the line will be straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight lines on all\r\n\t * polygon's sides.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.5\r\n\t */\r\n\tprecision?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t */\r\n\tprotected _visualLatitude: number;\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t */\r\n\tprotected _visualLongitude: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\t\tthis.polygon.applyOnClones = true;\r\n\t\tthis.setPropertyValue(\"precision\", 0.5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): Array<[Array<IGeoPoint>, Array<IGeoPoint>]> {\r\n\t\tlet multiGeoPolygon = this.getPropertyValue(\"multiGeoPolygon\");\r\n\t\tif (!multiGeoPolygon && this.dataItem) {\r\n\t\t\tmultiGeoPolygon = this.dataItem.multiGeoPolygon;\r\n\t\t}\r\n\t\treturn multiGeoPolygon;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: Array<Array<Array<[number, number]>>>) {\r\n\t\tif (this.setPropertyValue(\"multiPolygon\", multiPolygon)) {\r\n\t\t\tthis.updateExtremes();\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): Array<Array<Array<[number, number]>>> {\r\n\t\tlet multiPolygon = this.getPropertyValue(\"multiPolygon\");\r\n\t\tif (!multiPolygon && this.dataItem) {\r\n\t\t\tmultiPolygon = this.dataItem.multiPolygon;\r\n\t\t}\r\n\t\treturn multiPolygon;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tlet projection = this.series.chart.projection;\r\n\r\n\t\t\tlet pathGenerator = projection.d3Path;\r\n\r\n\t\t\tif (this.multiPolygon) {\r\n\r\n\t\t\t\tif (this.series) {\r\n\t\t\t\t\tlet feature = { type: \"MultiPolygon\", coordinates: this.multiPolygon };\r\n\r\n\t\t\t\t\tprojection.d3Projection.precision(this.precision);\r\n\t\t\t\t\tthis.polygon.path = pathGenerator(<any>feature);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.series.calculateVisualCenter) {\r\n\t\t\t\t\tlet biggestArea = 0;\r\n\t\t\t\t\tlet biggestPolygon = this.multiPolygon[0];\r\n\r\n\t\t\t\t\tif (this.multiPolygon.length > 1) {\r\n\t\t\t\t\t\tfor (let i = 0; i < this.multiPolygon.length; i++) {\r\n\t\t\t\t\t\t\tlet polygon = this.multiPolygon[i];\r\n\t\t\t\t\t\t\tlet area = d3geo.geoArea({ type: \"Polygon\", coordinates: polygon });\r\n\r\n\t\t\t\t\t\t\tif (area > biggestArea) {\r\n\t\t\t\t\t\t\t\tbiggestPolygon = polygon;\r\n\t\t\t\t\t\t\t\tbiggestArea = area;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet center = $polylabel(biggestPolygon);\r\n\r\n\t\t\t\t\tthis._visualLongitude = center[0];\r\n\t\t\t\t\tthis._visualLatitude = center[1];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._visualLongitude = this.longitude;\r\n\t\t\t\t\tthis._visualLatitude = this.latitude;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the geometrical center of the polygon.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.north + (this.south - this.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the geometrical center of the polygon.\r\n\t *\r\n\t * @readonly\r\n\t * @return Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.east + (this.west - this.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the visual center of the polygon.\r\n\t *\r\n\t * It may (and probably won't) coincide with geometrical center.\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set visualLatitude(value: number) {\r\n\t\tthis.setPropertyValue(\"visualLatitude\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Latitude\r\n\t */\r\n\tpublic get visualLatitude(): number {\r\n\t\tlet latitude = this.getPropertyValue(\"visualLatitude\");\r\n\t\tif ($type.isNumber(latitude)) {\r\n\t\t\treturn (latitude);\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._visualLatitude;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\r\n\t\t\t\t\"visualLatitude\",\r\n\t\t\t\tthis._visualLatitude\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the visual center of the polygon.\r\n\t *\r\n\t * It may (and probably won't) coincide with geometrical center.\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set visualLongitude(value: number) {\r\n\t\tthis.setPropertyValue(\"visualLongitude\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Longitude\r\n\t */\r\n\tpublic get visualLongitude(): number {\r\n\t\tlet longitude = this.getPropertyValue(\"visualLongitude\");\r\n\t\tif ($type.isNumber(longitude)) {\r\n\t\t\treturn (longitude);\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._visualLongitude;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\r\n\t\t\t\t\"visualLongitude\",\r\n\t\t\t\tthis._visualLongitude\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[MapPolygon]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.polygon.copyFrom(source.polygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateExtremes() {\r\n\t\tsuper.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * used to sorth polygons from big to small\r\n\t */\r\n\tpublic get boxArea() {\r\n\t\treturn (this.north - this.south) * (this.east - this.west);\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\treturn this.series.chart.projection.convert({ longitude: this.visualLongitude, latitude: this.visualLatitude }).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\treturn this.series.chart.projection.convert({ longitude: this.visualLongitude, latitude: this.visualLatitude }).y\r\n\t}\r\n\r\n\t/**\r\n\t * When polygon's sides are plotted, they are bent according to the used\r\n\t * projection.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between two points of polygon's side is less\r\n\t * than `precision`, no bending will take place and the line will be straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight lines on all\r\n\t * polygon's sides.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.5\r\n\t * @param  value  Precision\r\n\t */\r\n\tpublic set precision(value: number) {\r\n\t\tthis.setPropertyValue(\"precision\", value, true);\r\n\t}\r\n\r\n\tpublic get precision(): number {\r\n\t\treturn this.getPropertyValue(\"precision\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapPolygon;\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: Array<Array<[number, number]>>) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiPolygon = [polygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): Array<Array<[number, number]>> {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: Array<Array<Array<[number, number]>>>) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): Array<Array<Array<[number, number]>>> {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): [Array<IGeoPoint>, Array<IGeoPoint>] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): Array<[Array<IGeoPoint>, Array<IGeoPoint>]> {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Indicates if series should automatically calculate visual center of the\r\n\t * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n\t * of the [[MapPolygon]]).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic calculateVisualCenter: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif (this.geodata) {\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (this.chart.geodataNames && this.chart.geodataNames[id]) {\r\n\t\t\t\t\t\t\t\tfeature.properties.name = this.chart.geodataNames[id];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id, madeFromGeoData:true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\t$utils.used(dataItem.mapPolygon);\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t\t// makes small go first to avoid hover problems with IE\r\n\t\t\tif (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\r\n\t\t\t\tmapPolygon.zIndex = 1000000 - mapPolygon.boxArea;\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t\tthis._mapObjects = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] {\r\n\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapPolygon.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n","import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import adder from \"./adder.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nvar sum = adder();\n\nfunction longitude(point) {\n  if (abs(point[0]) <= pi)\n    return point[0];\n  else\n    return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {pair} from \"./pairs\";\n\nexport default function(values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","import transpose from \"./transpose\";\n\nexport default function() {\n  return transpose(arguments);\n}\n","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","export default function(x) {\n  return x;\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import adder from \"../adder.js\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder.js\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import adder from \"./adder.js\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\n//import { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint, IOrientationPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport { MapChart } from \"../../types/MapChart\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _d3Projection: d3geo.GeoProjection;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _d3Path: d3geo.GeoPath;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\r\n\tconstructor() {\r\n\t\tthis.d3Projection = d3geo.geoEquirectangular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * d3 projection\r\n\t */\r\n\tpublic set d3Projection(projection: d3geo.GeoProjection) {\r\n\t\tthis._d3Projection = projection;\r\n\t\tprojection.precision(0.1);\r\n\t\tthis._d3Path = d3geo.geoPath().projection(projection);\r\n\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * d3 projection\r\n\t */\r\n\tpublic get d3Projection(): d3geo.GeoProjection {\r\n\t\treturn this._d3Projection;\r\n\t}\r\n\r\n\t/**\r\n\t * d3 path generator method\r\n\t * @ignore\r\n\t */\r\n\tpublic get d3Path(): d3geo.GeoPath {\r\n\t\treturn this._d3Path;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this.d3Projection.scale() / 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param geoPoint Geo point (lat/long)\r\n\t * @return Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\t/*\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};*/\r\n\r\n\t\tlet p = this.d3Projection([geoPoint.longitude, geoPoint.latitude]);\r\n\t\tif (p) {\r\n\t\t\treturn { x: p[0], y: p[1] };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param point Screen point (x/y)\r\n\t * @return Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\t/*\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\t*/\r\n\t\tlet p = this.d3Projection.invert([point.x, point.y]);\r\n\t\tif (p) {\r\n\t\t\treturn { longitude: p[0], latitude: p[1] };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @deprecated\r\n\t * @param lambda [description]\r\n\t * @param phi    [description]\r\n\t * @return X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn this.convert({ longitude: lambda * $math.DEGREES, latitude: phi * $math.DEGREES });\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own\r\n\t * projection logic.\r\n\t * @deprecated\r\n\t * @param x X coordinate\r\n\t * @param y Y coordinate\r\n\t * @return Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn this.invert({ x: x, y: y });\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated\r\n\t */\r\n\tpublic rotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated\r\n\t */\r\n\tpublic unrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number): IGeoPoint {\r\n\t\tlet p = d3geo.geoInterpolate([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude])(position);\r\n\t\treturn { longitude: p[0], latitude: p[1] };\r\n\t};\r\n\r\n\t// returns radians\r\n\tpublic multiDistance(multiGeoLine: Array<Array<IGeoPoint>>): number {\r\n\t\tlet distance = 0;\r\n\t\tfor (let s = 0; s < multiGeoLine.length; s++) {\r\n\t\t\tlet points: Array<IGeoPoint> = multiGeoLine[s];\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\tlet pointA = points[p - 1];\r\n\t\t\t\t\tlet pointB = points[p];\r\n\t\t\t\t\tdistance += this.distance(pointA, pointB);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn distance;\r\n\t}\r\n\r\n\t// returns radians\r\n\tpublic distance(pointA: IGeoPoint, pointB: IGeoPoint): number {\r\n\t\treturn d3geo.geoDistance([pointA.longitude, pointA.latitude], [pointB.longitude, pointB.latitude]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(multiGeoLine: Array<Array<IGeoPoint>>, position: number): IOrientationPoint {\r\n\r\n\t\tif (multiGeoLine) {\r\n\t\t\tlet intermediatePoint = this.positionToGeoPoint(multiGeoLine, position);\r\n\t\t\tlet intermediatePointA = this.positionToGeoPoint(multiGeoLine, position - 0.01);\r\n\t\t\tlet intermediatePointB = this.positionToGeoPoint(multiGeoLine, position + 0.01);\r\n\r\n\t\t\tif (intermediatePointA && intermediatePointB) {\r\n\r\n\t\t\t\tlet point = this.convert(intermediatePoint);\r\n\r\n\t\t\t\tlet pa = this.convert(intermediatePointA);\r\n\t\t\t\tlet pb = this.convert(intermediatePointB);\r\n\r\n\t\t\t\treturn { x: point.x, y: point.y, angle: $math.getAngle(pa, pb) };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToGeoPoint(multiGeoLine: Array<Array<IGeoPoint>>, position: number): IGeoPoint {\r\n\r\n\t\tif (multiGeoLine) {\r\n\t\t\tlet totalDistance: number = this.multiDistance(multiGeoLine);\r\n\t\t\tlet currentDistance: number = 0;\r\n\r\n\t\t\tlet distanceAB: number;\r\n\t\t\tlet positionA: number = 0;\r\n\t\t\tlet positionB: number = 0;\r\n\t\t\tlet pointA: IGeoPoint;\r\n\t\t\tlet pointB: IGeoPoint;\r\n\r\n\t\t\tfor (let s = 0; s < multiGeoLine.length; s++) {\r\n\t\t\t\tlet points: Array<IGeoPoint> = multiGeoLine[s];\r\n\t\t\t\tif (points.length > 1) {\r\n\t\t\t\t\tfor (let p = 1; p < points.length; p++) {\r\n\t\t\t\t\t\tpointA = points[p - 1];\r\n\t\t\t\t\t\tpointB = points[p];\r\n\r\n\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\r\n\t\t\t\t\t\tdistanceAB = this.distance(pointA, pointB);\r\n\t\t\t\t\t\tcurrentDistance += distanceAB;\r\n\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\r\n\r\n\t\t\t\t\t\tif (positionA <= position && positionB > position) {\r\n\t\t\t\t\t\t\ts = multiGeoLine.length;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (points.length == 1) {\r\n\t\t\t\t\tpointA = points[0];\r\n\t\t\t\t\tpointB = points[0];\r\n\t\t\t\t\tpositionA = 0;\r\n\t\t\t\t\tpositionB = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (pointA && pointB) {\r\n\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\r\n\t\t\t\treturn this.intermediatePoint(pointA, pointB, positionAB);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { longitude: 0, latitude: 0 };\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\r\n","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\trectangle.visible = false;\t\t\r\n\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t\tseries.events.on(\"inited\", this.updateMapSize, this, false);\r\n\t\tseries.hidden = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil(( - seriesContainer.pixelX) * scale / zoomLevel) + this.seriesContainer.pixelX;\r\n\t\trectangle.y = Math.ceil(( - seriesContainer.pixelY) * scale / zoomLevel) + this.seriesContainer.pixelY;\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tlet scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.seriesContainer.scale = scale;\r\n\r\n\t\t\tlet bbox: IRectangle = {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\r\n\t\t\ttry { // Add exception catching to tame FF\r\n\t\t\t\tbbox = this.seriesContainer.group.node.getBBox();\r\n\t\t\t} catch (err) { }\r\n\r\n\t\t\tif(bbox.width > 0){\r\n\t\t\t\tthis.rectangle.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\r\n\t\t\tthis.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\r\n\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\t//this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: Array<Array<IGeoPoint>>): Array<Array<IGeoPoint>> {\r\n\t$array.each(multiline, (segment) => {\r\n\t\t$array.each(segment, (point) => {\r\n\t\t\tnormalizePoint(point);\r\n\t\t});\r\n\t});\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\r\n\t\tlet mapLine = this.mapLine;\r\n\r\n\t\tif (mapLine) {\r\n\r\n\t\t\tlet point: IOrientationPoint = mapLine.positionToPoint(this.position);\r\n\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\r\n\t\t\t// hide out of bounds\r\n\t\t\tif (mapLine.shortestDistance) {\r\n\r\n\t\t\t\tlet projection = this.mapLine.series.chart.projection;\r\n\r\n\t\t\t\tlet geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\r\n\r\n\t\t\t\tlet visible: any = projection.d3Path({ type: 'Point', coordinates: [geoPoint.longitude, geoPoint.latitude] });\r\n\r\n\t\t\t\tif (!visible) {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: [number, number];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: this.point } };\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tthis.mapObject = mapImage;\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: [number, number]) {\r\n\t\tthis._point = point;\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): [number, number] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.point = [geoPoint.longitude, geoPoint.latitude];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id, madeFromGeoData:true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tif (!mapImage.isDisposed()) {\r\n\t\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t\tthis._mapObjects = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> {\r\n\t\tlet features: Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapImages.each((mapImage)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapImage._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapImage.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapImage by id\r\n\t * @param image id\r\n\t * @return {MapImage}\r\n\t */\r\n\tpublic getImageById(id: string): MapImage {\r\n\t\treturn $iter.find(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tlet dataContext: any = mapImage.dataItem.dataContext;\r\n\t\t\tif(mapImage.id == id || (dataContext && dataContext.id == id)){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { MapImageSeries } from \"./MapImageSeries\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $geo from \"./Geo\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiLine?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n\r\n\t/**\r\n\t * When line is plotted, if its `shortestDistance` is set to `true` it is\r\n\t * bent according to the used projection, to depict the shortest distance how\r\n\t * it would go on the actual land.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between line start and end points\r\n\t * is less than `precision`, no bending will take place and the line will be\r\n\t * straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight line.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.1\r\n\t */\r\n\tprecision?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * A list of actual line objects.\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * A reference to arrow object.\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * A list of event disposers for images.\r\n\t */\r\n\tprotected _imageListeners: { [index: string]: IDisposer } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\tthis.createLine();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.line.parent = this;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.setPropertyValue(\"precision\", 0.1);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine() {\r\n\t\tthis.line = new Polyline();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.shortestDistance) {\r\n\t\t\treturn this.series.chart.projection.positionToPoint(this.multiGeoLine, position);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.line) {\r\n\t\t\t\treturn this.line.positionToPoint(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: Array<Array<IGeoPoint>>) {\r\n\t\tif (multiGeoLine && multiGeoLine.length > 0) {\r\n\t\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\r\n\t\t\tlet multiLine: Array<Array<[number, number]>> = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\r\n\t\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\r\n\t\t\tthis.updateExtremes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): Array<Array<IGeoPoint>> {\r\n\t\tlet multiGeoLine = this.getPropertyValue(\"multiGeoLine\");\r\n\t\tif (!multiGeoLine && this.dataItem && this.dataItem.multiGeoLine) {\r\n\t\t\tmultiGeoLine = this.dataItem.multiGeoLine;\r\n\t\t}\r\n\r\n\t\treturn multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: Array<Array<[number, number]>>) {\r\n\t\tthis.setPropertyValue(\"multiLine\", multiLine);\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): Array<Array<[number, number]>> {\r\n\r\n\t\tlet multiLine = this.getPropertyValue(\"multiLine\");\r\n\t\tif (!multiLine && this.dataItem && this.dataItem.multiLine) {\r\n\t\t\tmultiLine = this.dataItem.multiLine;\r\n\t\t}\r\n\r\n\t\treturn multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images, true);\r\n\t\tthis.handleImagesToConnect();\r\n\r\n\t\tif (this.series) {\r\n\t\t\tlet chart = this.series.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tchart.series.each((series) => {\r\n\t\t\t\t\tif (series instanceof MapImageSeries) {\r\n\t\t\t\t\t\tif (!series.isReady()) {\r\n\t\t\t\t\t\t\tthis._disposers.push(series.events.on(\"ready\", this.handleImagesToConnect, this, false));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\tprotected handleImagesToConnect() {\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: Array<IGeoPoint> = [];\r\n\t\t\tlet multiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tif ($type.isString(image)) {\r\n\t\t\t\t\tlet chart = this.series.chart;\r\n\t\t\t\t\tif (chart) {\r\n\t\t\t\t\t\tchart.series.each((series) => {\r\n\t\t\t\t\t\t\tif (series instanceof MapImageSeries) {\r\n\t\t\t\t\t\t\t\tlet img = series.getImageById(<string>image)\r\n\t\t\t\t\t\t\t\tif (img) {\r\n\t\t\t\t\t\t\t\t\timage = img;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (image instanceof MapImage) {\r\n\r\n\t\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\r\n\t\t\t\t\tif (!this._imageListeners[image.uid]) {\r\n\t\t\t\t\t\tlet disposer = image.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\t\t\t\tthis.handleImagesToConnect();\r\n\t\t\t\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this, false);\r\n\t\t\t\t\t\tthis._imageListeners[image.uid] = disposer;\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.multiGeoLine = multiGeoLine;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\r\n\t\tif (this.multiLine) {\r\n\r\n\t\t\tif (!this.shortestDistance) {\r\n\r\n\t\t\t\tlet convertedPoints: Array<Array<IPoint>> = [];\r\n\r\n\t\t\t\tfor (let i = 0, len = this.multiLine.length; i < len; i++) {\r\n\r\n\t\t\t\t\tlet segment: Array<[number, number]> = this.multiLine[i];\r\n\r\n\t\t\t\t\tlet convertedSegmentPoints: Array<IPoint> = [];\r\n\r\n\t\t\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\t\t\tlet geoPoint: [number, number] = segment[s];\r\n\t\t\t\t\t\tlet point: IPoint = this.series.chart.projection.convert({ longitude: geoPoint[0], latitude: geoPoint[1] });\r\n\t\t\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t\t\t}\r\n\t\t\t\tthis.line.segments = convertedPoints;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.projection.d3Projection.precision(this.precision);\r\n\t\t\t\tthis.line.path = chart.projection.d3Path(<any>this.getFeature());\r\n\t\t\t}\r\n\r\n\t\t\tif (this._arrow) {\r\n\t\t\t\tthis._arrow.validatePosition();\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\t\tx.validatePosition();\r\n\t\t\t});\r\n\r\n\t\t\tthis.handleGlobalScale();\r\n\t\t}\r\n\t\telse if (this.imagesToConnect) {\r\n\t\t\tthis.handleImagesToConnect();\r\n\t\t}\r\n\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0 && this.multiLine[0] && this.multiLine[0].length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects the line consists of.\r\n\t *\r\n\t * @readonly\r\n\t * @return List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.shouldClone = false;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\t//triangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.north + (this.south - this.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.east + (this.west - this.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return X\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!(x instanceof Percent)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\t\tif (x instanceof Percent) {\r\n\t\t\treturn this.positionToPoint(x.value).x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @ignore\r\n\t * @return Y\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\t\tif (!(y instanceof Percent)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\t\tif (y instanceof Percent) {\r\n\t\t\treturn this.positionToPoint(y.value).y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When line is plotted, if its `shortestDistance` is set to `true` it is\r\n\t * bent according to the used projection, to depict the shortest distance how\r\n\t * it would go on the actual land.\r\n\t *\r\n\t * `precision` introduces a setting which can control when such bending\r\n\t * occurs.\r\n\t *\r\n\t * If the distance (in degrees) between line start and end points\r\n\t * is less than `precision`, no bending will take place and the line will be\r\n\t * straight.\r\n\t *\r\n\t * Set to large number (e.g. 10000) for perfectly straight line.\r\n\t *\r\n\t * @since 4.9.1\r\n\t * @default 0.1\r\n\t * @param  value  Precision\r\n\t */\r\n\tpublic set precision(value: number) {\r\n\t\tthis.setPropertyValue(\"precision\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Precision\r\n\t */\r\n\tpublic get precision(): number {\r\n\t\treturn this.getPropertyValue(\"precision\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: Array<IGeoPoint>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapLine;\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: Array<[number, number]>) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiLine = [line];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): Array<[number, number]> {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: Array<Array<[number, number]>>) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): Array<Array<[number, number]>> {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: Array<IGeoPoint>) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): Array<IGeoPoint> {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: Array<Array<IGeoPoint>>) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): Array<Array<IGeoPoint>> {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id, madeFromGeoData:true};\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t\tthis._mapObjects = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapLine);\r\n\t\t})\r\n\r\n\r\n\t\tsuper.validate();\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] {\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] = [];\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tif (this.dataItems.indexOf(mapLine._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapLine.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns MapLine by id\r\n\t * @param line id\r\n\t * @return {MapLine}\r\n\t */\r\n\tpublic getLineById(id: string): MapLine {\r\n\t\treturn $iter.find(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tlet dataContext: any = mapLine.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n","/**\r\n * Graticule (map grid line).\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GraticuleSeries } from \"./GraticuleSeries\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Graticule]].\r\n */\r\nexport interface IGraticuleProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[Graticule]].\r\n */\r\nexport interface IGraticuleEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Graticule]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleAdapters extends IMapLineAdapters, IGraticuleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Graticule is a map line spanning from the poles or around the globe.\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleEvents} for a list of available events\r\n * @see {@link IGraticuleAdapters} for a list of available Adapters\r\n */\r\nexport class Graticule extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Graticule\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.shortestDistance = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Graticule\"] = Graticule;\r\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","/**\r\n * Graticule (map grid) series functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { Graticule } from \"./Graticule\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GraticuleSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[Graticule]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesProperties extends IMapLineSeriesProperties {\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t */\r\n\t// majorLatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t */\r\n\t// majorLongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tfitExtent?: boolean;\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsingleSprite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GraticuleSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleSeriesAdapters extends IMapLineSeriesAdapters, IGraticuleSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class GraticuleSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGraticuleSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: GraticuleSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeries\";\r\n\r\n\t\tthis.longitudeStep = 10;\r\n\r\n\t\tthis.latitudeStep = 10;\r\n\r\n\t\tthis.north = 90;\r\n\t\tthis.south = -90;\r\n\t\tthis.east = -180;\r\n\t\tthis.west = 180;\r\n\r\n\t\t//this.majorLatitudeStep = 90;\r\n\t\t//this.majorLongitudeStep = 360;\r\n\r\n\t\tthis.fitExtent = true;\r\n\r\n\t\tthis.singleSprite = true;\r\n\r\n\t\tthis.events.disableType(\"geoBoundsChanged\");\r\n\r\n\t\tthis.mapLines.template.line.strokeOpacity = 0.08;\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tthis.hiddenInLegend = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new GraticuleSeriesDataItem();\r\n\t}\r\n\r\n\tpublic validateData() {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.mapLines.clear();\r\n\r\n\t\tlet graticule = d3geo.geoGraticule();\r\n\r\n\t\tif (graticule) {\r\n\t\t\tgraticule.stepMinor([this.longitudeStep, this.latitudeStep]);\r\n\t\t\tgraticule.stepMajor([360, 360]);\r\n\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tif (this.fitExtent) {\r\n\t\t\t\tgraticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgraticule.extent([[this.east, this.north], [this.west, this.south]]);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.singleSprite) {\r\n\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\tmapLine.multiLine = graticule().coordinates as Array<Array<[number, number]>>;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet lineStrings = graticule.lines();\r\n\r\n\t\t\t\t$array.each(lineStrings, (lineString) => {\r\n\t\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\t\tmapLine.multiLine = [lineString.coordinates as Array<[number, number]>];\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new Graticule();\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set latitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"latitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get latitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"latitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value  Step\r\n\t */\r\n\tpublic set longitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"longitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get longitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"longitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLatitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLatitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLatitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLongitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLongitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLongitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Fit?\r\n\t */\r\n\tpublic set fitExtent(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"fitExtent\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fit?\r\n\t */\r\n\tpublic get fitExtent(): boolean {\r\n\t\treturn this.getPropertyValue(\"fitExtent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Use single sprite?\r\n\t */\r\n\tpublic set singleSprite(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"singleSprite\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use single sprite?\r\n\t */\r\n\tpublic get singleSprite(): boolean {\r\n\t\treturn this.getPropertyValue(\"singleSprite\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\r\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;\r\n","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { MapPolygonSeries } from \"../map/MapPolygonSeries\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport * as $mapUtils from \"../map/MapUtils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\nimport { Paper } from \"../../core/rendering/Paper\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { GraticuleSeries } from \"../map/GraticuleSeries\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { Legend } from \"../Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: Array<Array<Array<IGeoPoint>>>;\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tline?: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLine?: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLine?: Array<IGeoPoint>;\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLine?: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: [number, number];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: Array<IGeoPoint>;\r\n\r\n\r\n\t/**\r\n\t * flag indicating whether this data item was created from geo data\r\n\t */\r\n\tmadeFromGeoData?: boolean;\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to -90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaLatitude?: number;\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal \"Z\" - an axis that goes from\r\n\t * the center of the globe directly to the viewer.\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tdeltaGamma?: number;\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * A map will start centered on this geographical point.\r\n\t */\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * A map will start zoomed to this level.\r\n\t */\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tzoomStep?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t *\r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t */\r\n\tpanBehavior?: \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\";\r\n\r\n\r\n\t/**\r\n\t * Specifies if the map should be centered when zooming out\r\n\t * @default true\r\n\t * @since 4.7.12\r\n\t */\r\n\tcenterMapOnZoomOut?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxLeft: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxRight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxTop: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic seriesMaxBottom: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * Names of geodata items, such as countries, to replace by from loaded\r\n\t * geodata.\r\n\t *\r\n\t * Can be used to override built-in English names for countries.\r\n\t *\r\n\t * ```TypeScript\r\n\t * import am4geodata_lang_ES from '@amcharts4-geodata/lang/es';\r\n\t * // ...\r\n\t * map.geodataNames = am4geodata_lang_ES;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.geodataNames = am4geodata_lang_ES;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"geodataNames\": am4geodata_lang_ES\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.7.4\r\n\t */\r\n\tpublic geodataNames: { [index: string]: string };\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: MapSeries;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _fitHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\r\n\tpublic panSprite: Circle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLongitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _downDeltaLatitude: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _backgroundSeries: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.setPropertyValue(\"deltaLatitude\", 0);\r\n\t\tthis.setPropertyValue(\"deltaLongitude\", 0);\r\n\t\tthis.setPropertyValue(\"deltaGamma\", 0);\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\t\tthis.zoomStep = 2;\r\n\t\tthis.layout = \"absolute\";\r\n\r\n\t\tthis.centerMapOnZoomOut = true;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t$utils.used(this.backgroundSeries);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\tthis.events.once(\"inited\", this.handleAllInited, this, false);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.visible = false;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this, false);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this, false);\r\n\t\tseriesContainer.events.on(\"dragged\", this.handleDrag, this, false);\r\n\t\tseriesContainer.zIndex = 0;\r\n\t\tseriesContainer.dragWhileResize = true;\r\n\t\t//seriesContainer.background.fillOpacity = 0;\r\n\r\n\t\t// Set up events\r\n\t\t//this.events.on(\"validated\", this.updateExtremes, this);\r\n\t\t//this.events.on(\"datavalidated\", this.handleAllValidated, this, false);\r\n\t\t//this.events.on(\"datavalidated\", this.updateExtremes, this, false);\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\tif (event.previousWidth == 0 || event.previousHeight == 0) {\r\n\t\t\t\tthis.updateExtremes();\r\n\t\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\t}\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.parent = this;\r\n\t\tchartContainer.zIndex = -1;\r\n\r\n\t\tthis._disposers.push(this.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tif (this._mapAnimation) {\r\n\t\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet allInited = true;\r\n\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\t\t\tallInited = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allInited) {\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t}\r\n\t\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\t\t\t}\r\n\r\n\t\t}, undefined, false));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this, false);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handlePanDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handlePanUp, this));\r\n\t\t//this._disposers.push(interaction.body.events.on(\"track\", this.handlePanMove, this));\r\n\r\n\t\tlet panSprite = this.seriesContainer.createChild(Circle);\r\n\t\tpanSprite.radius = 10;\r\n\t\tpanSprite.inert = true;\r\n\t\tpanSprite.isMeasured = false;\r\n\t\tpanSprite.events.on(\"transformed\", this.handlePanMove, this, false);\r\n\t\tpanSprite.interactionsEnabled = false;\r\n\t\tpanSprite.opacity = 0;\r\n\t\tpanSprite.x = 0;\r\n\t\tpanSprite.y = 0;\r\n\t\tthis.panSprite = panSprite;\r\n\t\tthis.panBehavior = \"move\";\r\n\t\t/*\r\n\t\t\t\tthis.panSprite.inertiaOptions.setKey(\"move\", {\r\n\t\t\t\t\t\"time\": 100,\r\n\t\t\t\t\t\"duration\": 1000,\r\n\t\t\t\t\t\"factor\": 3,\r\n\t\t\t\t\t\"easing\": $ease.sinOut\r\n\t\t\t\t});*/\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tlet svgPoint = $utils.documentPointToSvg(event.pointer.point, this.htmlContainer);\r\n\t\tif (svgPoint.x > 0 && svgPoint.y > 0 && svgPoint.x < this.svgContainer.width && svgPoint.y < this.svgContainer.height) {\r\n\t\t\t// Get local point\r\n\t\t\tthis._downPointOrig = $utils.documentPointToSprite(event.pointer.point, this.seriesContainer);\r\n\r\n\t\t\tthis.panSprite.moveTo(this._downPointOrig);\r\n\t\t\tthis.panSprite.dragStart(event.pointer);\r\n\t\t\tthis._downDeltaLongitude = this.deltaLongitude;\r\n\t\t\tthis._downDeltaLatitude = this.deltaLatitude;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanUp(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (this._downPointOrig) {\r\n\t\t\tthis.panSprite.dragStop(event.pointer);\r\n\t\t}\r\n\t\tthis._downPointOrig = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handlePanMove(): void {\r\n\r\n\t\tif (!this.seriesContainer.isResized) {\r\n\r\n\t\t\tif (getInteraction().areTransformed([this.panSprite.interactions, this.seriesContainer.interactions])) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\t\tlet panBehavior = this.panBehavior;\r\n\r\n\t\t\tif (panBehavior != \"move\" && panBehavior != \"none\" && this._downPointOrig && d3Projection.rotate) {\r\n\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\r\n\t\t\t\tlet dln = rotation[0];\r\n\t\t\t\tlet dlt = rotation[1];\r\n\t\t\t\tlet dlg = rotation[2];\r\n\r\n\t\t\t\td3Projection.rotate([0, 0, 0]);\r\n\r\n\t\t\t\tlet downGeoLocal = this.projection.invert(this._downPointOrig);\r\n\r\n\t\t\t\tlet local: IPoint = { x: this.panSprite.pixelX, y: this.panSprite.pixelY };\r\n\t\t\t\tlet geoLocal: IGeoPoint;\r\n\t\t\t\tif (local) {\r\n\t\t\t\t\tgeoLocal = this.projection.invert(local);\r\n\t\t\t\t}\r\n\r\n\t\t\t\td3Projection.rotate([dln, dlt, dlg]);\r\n\t\t\t\tif (geoLocal) {\r\n\t\t\t\t\tif (panBehavior == \"rotateLat\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\t\tthis.deltaLatitude = this._downDeltaLatitude + geoLocal.latitude - downGeoLocal.latitude;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (panBehavior == \"rotateLong\" || panBehavior == \"rotateLongLat\") {\r\n\t\t\t\t\t\tthis.deltaLongitude = this._downDeltaLongitude + geoLocal.longitude - downGeoLocal.longitude;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAllInited() {\r\n\t\tlet inited = true;\r\n\t\tthis.seriesContainer.visible = true;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (!series.inited || series.dataInvalid) {\r\n\t\t\t\tinited = false;\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (inited) {\r\n\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\tthis.updateScaleRatio();\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// TODO verify that this is correct\r\n\t\t\tconst disposer = registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tthis.removeDispose(disposer);\r\n\t\t\t\tthis.handleAllInited();\r\n\t\t\t}, this, false);\r\n\r\n\t\t\tthis.addDisposer(disposer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateZoomGeoPoint() {\r\n\t\tlet seriesPoint = $utils.svgPointToSprite({ x: this.innerWidth / 2 + this.pixelPaddingLeft, y: this.innerHeight / 2 + this.pixelPaddingTop }, this.series.getIndex(0));\r\n\t\tlet geoPoint = this.projection.invert(seriesPoint);\r\n\t\tthis._zoomGeoPointReal = geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateCenterGeoPoint() {\r\n\t\tlet maxLeft: number;\r\n\t\tlet maxRight: number;\r\n\t\tlet maxTop: number;\r\n\t\tlet maxBottom: number;\r\n\r\n\r\n\t\tif (this.backgroundSeries) {\r\n\t\t\tlet features = this.backgroundSeries.getFeatures();\r\n\t\t\tif (features.length > 0) {\r\n\t\t\t\tlet bounds = this.projection.d3Path.bounds(<any>features[0].geometry);\r\n\t\t\t\tmaxLeft = bounds[0][0];\r\n\t\t\t\tmaxTop = bounds[0][1];\r\n\t\t\t\tmaxRight = bounds[1][0];\r\n\t\t\t\tmaxBottom = bounds[1][1];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet bbox = series.group.node.getBBox();\r\n\r\n\t\t\t\tif (maxLeft > bbox.x || !$type.isNumber(maxLeft)) {\r\n\t\t\t\t\tmaxLeft = bbox.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxRight < bbox.x + bbox.width || !$type.isNumber(maxRight)) {\r\n\t\t\t\t\tmaxRight = bbox.x + bbox.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxTop > bbox.y || !$type.isNumber(maxTop)) {\r\n\t\t\t\t\tmaxTop = bbox.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (maxBottom < bbox.y + bbox.height || !$type.isNumber(maxBottom)) {\r\n\t\t\t\t\tmaxBottom = bbox.y + bbox.height;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.seriesMaxLeft = maxLeft;\r\n\t\tthis.seriesMaxRight = maxRight;\r\n\t\tthis.seriesMaxTop = maxTop;\r\n\t\tthis.seriesMaxBottom = maxBottom;\r\n\r\n\t\tthis.seriesWidth = maxRight - maxLeft;\r\n\t\tthis.seriesHeight = maxBottom - maxTop;\r\n\r\n\t\tif (this.seriesWidth > 0 && this.seriesHeight > 0) {\r\n\t\t\tthis.chartContainer.visible = true;\r\n\t\t\tthis._centerGeoPoint = this.projection.invert({ x: maxLeft + (maxRight - maxLeft) / 2, y: maxTop + (maxBottom - maxTop) / 2 });\r\n\r\n\t\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\t\tthis._zoomGeoPointReal = this._centerGeoPoint;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chartContainer.visible = false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\r\n\t\tlet d = this.zoomLevel * this.scaleRatio;\r\n\r\n\t\tlet ww = this.seriesWidth * d;\r\n\t\tlet hh = this.seriesHeight * d;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tlet maxLeft = this.seriesMaxLeft * d;\r\n\t\tlet maxRight = this.seriesMaxRight * d;\r\n\t\tlet maxTop = this.seriesMaxTop * d;\r\n\t\tlet maxBottom = this.seriesMaxBottom * d;\r\n\r\n\t\tlet x = seriesContainer.pixelX;\r\n\t\tlet y = seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww - maxLeft, -maxLeft);\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut - maxLeft, this.maxWidth - maxRight);\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh - maxTop, -maxTop)\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut - maxTop, this.maxHeight - maxBottom);\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tseriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(this.background.readerTitle)) {\r\n\t\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\t// Cancel any move inertia if there is one\r\n\t\tconst inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\r\n\t\tif (inertia) {\r\n\t\t\tinertia.done();\r\n\t\t}\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint, undefined, this.interactions.mouseOptions.sensitivity);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * What \"dragging\" map does.\r\n\t *\r\n\t * Available values:\r\n\t * * `\"move\"` (default): changes position of the map.\r\n\t * * `\"rotateLat\"`: changes `deltaLatitude` (rotates the globe vertically).\r\n\t * * `\"rotateLong\"`: changes `deltaLongitude` (rotates the globe horizontally).\r\n\t * * `\"rotateLongLat\"`: changes both `deltaLongitude` and `deltaLatitude` (rotates the globe in any direction).\r\n\t *\r\n\t * @default \"move\"\r\n\t * @since 4.3.0\r\n\t * @param  value  Behavior\r\n\t */\r\n\tpublic set panBehavior(value: \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\") {\r\n\t\tif (this.setPropertyValue(\"panBehavior\", value)) {\r\n\t\t\tlet seriesContainer = this.seriesContainer;\r\n\t\t\tthis.panSprite.draggable = false;\r\n\t\t\tseriesContainer.draggable = false;\r\n\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase \"move\":\r\n\t\t\t\t\tseriesContainer.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.panSprite.draggable = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns If the map should be centered when zooming out.\r\n\t */\r\n\tpublic get centerMapOnZoomOut(): boolean {\r\n\t\treturn this.getPropertyValue(\"centerMapOnZoomOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if the map should be centered when zooming out\r\n\t * @default true\r\n\t * @since 4.7.12\r\n\t */\r\n\tpublic set centerMapOnZoomOut(value: boolean) {\r\n\t\tthis.setPropertyValue(\"centerMapOnZoomOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Behavior\r\n\t */\r\n\tpublic get panBehavior(): \"none\" | \"move\" | \"rotateLat\" | \"rotateLong\" | \"rotateLongLat\" {\r\n\t\treturn this.getPropertyValue(\"panBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Albers\r\n\t * * AlbersUSA\r\n\t * * AzimuthalEqualArea\r\n\t * * Eckert6\r\n\t * * EqualEarth\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * NaturalEarth\r\n\t * * Orthographic\r\n\t * * Stereographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Setting_projection} More about projections\r\n\t * @param projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tif (this.setPropertyValue(\"projection\", projection)) {\r\n\t\t\tthis.invalidateProjection();\r\n\r\n\t\t\tprojection.chart = this;\r\n\r\n\t\t\tif (this._backgroundSeries) {\r\n\t\t\t\tthis._backgroundSeries.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.updateExtremes();\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.events.once(\"validated\", () => {\r\n\t\t\t\t\tthis.updateCenterGeoPoint();\r\n\t\t\t\t\tthis.updateScaleRatio();\r\n\t\t\t\t\tthis.goHome(0);\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tlet east: number;\r\n\t\tlet north: number;\r\n\t\tlet west: number;\r\n\t\tlet south: number;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent)) {\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = series.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = series.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = series.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = series.east;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet features: any[] = [];\r\n\t\tlet foundGraticule = false;\r\n\t\t// if we gave graticule, get features of these series only for faster fitSize\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series instanceof GraticuleSeries && !series.fitExtent) {\r\n\t\t\t\tfeatures = series.getFeatures();\r\n\t\t\t\tfoundGraticule = true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (!foundGraticule) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.ignoreBounds || (series instanceof GraticuleSeries && series.fitExtent)) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfeatures = features.concat(series.getFeatures());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet w = $math.max(50, this.innerWidth);\r\n\t\tlet h = $math.max(50, this.innerHeight);\r\n\r\n\t\tlet d3Projection = this.projection.d3Projection;\r\n\r\n\t\tif (features.length > 0 && d3Projection && (this.east != east || this.west != west || this.north != north || this.south != south)) {\r\n\t\t\tthis.east = east;\r\n\t\t\tthis.west = west;\r\n\t\t\tthis.north = north;\r\n\t\t\tthis.south = south;\r\n\t\t\tif (d3Projection.rotate) {\r\n\t\t\t\tlet rotation = d3Projection.rotate();\r\n\t\t\t\tlet deltaLong = rotation[0];\r\n\t\t\t\tlet deltaLat = rotation[1];\r\n\t\t\t\tlet deltaGamma = rotation[2];\r\n\r\n\t\t\t\tthis.deltaLongitude = deltaLong;\r\n\t\t\t\tthis.deltaLatitude = deltaLat;\r\n\t\t\t\tthis.deltaGamma = deltaGamma;\r\n\t\t\t}\r\n\r\n\t\t\tlet geoJSON = { \"type\": \"FeatureCollection\", features: features };\r\n\r\n\t\t\tlet initialScale = d3Projection.scale();\r\n\r\n\t\t\td3Projection.fitSize([w, h], <any>geoJSON);\r\n\r\n\t\t\tif (d3Projection.scale() != initialScale) {\r\n\t\t\t\tthis.invalidateDataUsers();\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series instanceof GraticuleSeries) {\r\n\t\t\t\t\tseries.invalidateData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (this._backgroundSeries) {\r\n\t\t\t\tlet polygon = this._backgroundSeries.mapPolygons.getIndex(0);\r\n\t\t\t\tif (polygon) {\r\n\t\t\t\t\tpolygon.multiPolygon = $mapUtils.getBackground(this.north, this.east, this.south, this.west);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._fitWidth = w;\r\n\t\t\tthis._fitHeight = h;\r\n\t\t}\r\n\r\n\t\tif (!this._zoomGeoPointReal || !$type.isNumber(this._zoomGeoPointReal.latitude)) {\r\n\t\t\tthis.goHome(0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tthis.updateCenterGeoPoint();\r\n\r\n\t\tlet hScale: number = this.innerWidth / this.seriesWidth;\r\n\t\tlet vScale: number = this.innerHeight / this.seriesHeight;\r\n\r\n\t\tscaleRatio = $math.min(hScale, vScale);\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.backgroundSeries.scale = scaleRatio;\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param point  Source point\r\n\t * @return Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param point  Source geo-point\r\n\t * @return Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\tfor (let i = dataUser.data.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tif (dataUser.data[i].madeFromGeoData == true) {\r\n\t\t\t\t\t\tdataUser.data.splice(i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdataUser.disposeData();\r\n\t\t\t\tdataUser.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param point      Center coordinate\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number, mapObject?: boolean): Animation {\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif (!point || !$type.isNumber(point.longitude) || !$type.isNumber(point.latitude)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\t\tif (seriesPoint) {\r\n\r\n\t\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\r\n\t\t\tlet mapPoint = $utils.svgPointToSprite(svgPoint, this);\r\n\r\n\t\t\tif (center) {\r\n\t\t\t\tmapPoint = {\r\n\t\t\t\t\tx: this.innerWidth / 2,\r\n\t\t\t\t\ty: this.innerHeight / 2\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = this.zoomDuration;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = mapPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio;\r\n\t\t\tlet y = mapPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio;\r\n\r\n\r\n\t\t\tif (!mapObject && zoomLevel < this.zoomLevel && this.centerMapOnZoomOut && zoomLevel < 1.5) {\r\n\t\t\t\tx = this.innerWidth / 2 - (this.seriesMaxLeft + (this.seriesMaxRight - this.seriesMaxLeft) / 2) * zoomLevel * this.scaleRatio;\r\n\t\t\t\ty = this.innerHeight / 2 - (this.seriesMaxTop + (this.seriesMaxBottom - this.seriesMaxTop) / 2) * zoomLevel * this.scaleRatio;\r\n\t\t\t}\r\n\r\n\t\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t\t[{\r\n\t\t\t\t\tproperty: \"scale\",\r\n\t\t\t\t\tto: zoomLevel\r\n\t\t\t\t}, {\r\n\t\t\t\t\tproperty: \"x\", from: this.seriesContainer.pixelX,\r\n\t\t\t\t\tto: x\r\n\t\t\t\t}, {\r\n\t\t\t\t\tproperty: \"y\", from: this.seriesContainer.pixelY,\r\n\t\t\t\t\tto: y\r\n\t\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t\t}))\r\n\r\n\r\n\t\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\t\treturn this._mapAnimation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param mapObject  Target map object\r\n\t * @param zoomLevel  Zoom level\r\n\t * @param center     Center on the given coordinate?\r\n\t * @param duration   Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tconst inertia = this.seriesContainer.interactions.inertias.getKey(\"move\");\r\n\t\tif (inertia) {\r\n\t\t\tinertia.done();\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration, true);\r\n\t\t}\r\n\r\n\t\tlet dataItem = mapObject.dataItem;\r\n\r\n\t\tif (dataItem && $type.isNumber(dataItem.zoomLevel)) {\r\n\t\t\tzoomLevel = dataItem.zoomLevel;\r\n\t\t}\r\n\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tlet bbox = mapObject.polygon.bbox;\r\n\t\t\tif (bbox.width == 0 || bbox.height == 0) {\r\n\t\t\t\tbbox = mapObject.polygon.group.getBBox();\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(zoomLevel)) {\r\n\t\t\t\tzoomLevel = Math.min(this.seriesWidth / bbox.width, this.seriesHeight / bbox.height);\r\n\t\t\t}\r\n\r\n\t\t\tlet geoPoint: IGeoPoint;\r\n\r\n\t\t\tif (dataItem && $type.hasValue(dataItem.zoomGeoPoint)) {\r\n\t\t\t\tgeoPoint = dataItem.zoomGeoPoint;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is more accurate\r\n\t\t\t\tlet polygonPoint = { x: bbox.x + bbox.width / 2, y: bbox.y + bbox.height / 2 };\r\n\t\t\t\tlet seriesPoint = $utils.spritePointToSprite(polygonPoint, mapObject.polygon, mapObject.series);\r\n\r\n\t\t\t\tgeoPoint = this.seriesPointToGeo(seriesPoint);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param north     Latitude of the North-most boundary\r\n\t * @param east      Longitude of the East-most boundary\r\n\t * @param south     Latitude of the South-most boundary\r\n\t * @param west      Longitude of the West-most boundary\r\n\t * @param level     Adjust zoom level\r\n\t * @param center    Center on the given coordinate?\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number, sensitivity: number = 1): Animation {\r\n\t\tlet step = 1 + (this.zoomStep - 1) * sensitivity;\r\n\t\tif (step < 1) {\r\n\t\t\tstep = 1;\r\n\t\t}\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * step, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param geoPoint  Optional center point\r\n\t * @param duration  Duration for zoom animation (ms)\r\n\t * @return Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number, sensitivity: number = 1): Animation {\r\n\t\tlet step = 1 + (this.zoomStep - 1) * sensitivity;\r\n\t\tif (step < 1) {\r\n\t\t\tstep = 1;\r\n\t\t}\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / step, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param shift     Vertical and horizontal shift\r\n\t * @param duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\tconst point = $utils.spritePointToSvg({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 }, this);\r\n\t\treturn this.svgPointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t\tthis.svgContainer.readerAlert(this.language.translate(\"Zoom level changed to %1\", this.language.locale, $type.castString(this.zoomLevel)));\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t\tzoomControl.plusButton.exportable = false;\r\n\t\tzoomControl.minusButton.exportable = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around vertical axis (Y).\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint(); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around horizontal axis (X).\r\n\t *\r\n\t * E.g. setting this to 90 will put Antarctica directly in the center of\r\n\t * the map.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @since 4.3.0\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaLatitude(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaLatitude\", value)) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint(); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaLatitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLatitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Degrees to rotate the map around \"Z\" axis. This is the axis that pierces\r\n\t * the globe directly from the viewer's point of view.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/#Map_rotation} For more info on map rotation.\r\n\t * @since 4.3.0\r\n\t * @param  value  Rotation\r\n\t */\r\n\tpublic set deltaGamma(value: number) {\r\n\t\tvalue = $math.round(value, 3);\r\n\t\tif (this.setPropertyValue(\"deltaGamma\", value)) {\r\n\t\t\tthis.rotateMap();\r\n\t\t\tthis.updateZoomGeoPoint(); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation\r\n\t */\r\n\tpublic get deltaGamma(): number {\r\n\t\treturn this.getPropertyValue(\"deltaGamma\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected rotateMap() {\r\n\t\tif (this.projection.d3Projection) {\r\n\t\t\tif (this.projection.d3Projection.rotate) {\r\n\t\t\t\tthis.projection.d3Projection.rotate([this.deltaLongitude, this.deltaLatitude, this.deltaGamma]);\r\n\t\t\t\tthis.invalidateProjection();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum portion of the map's width/height to allow panning \"off screen\".\r\n\t *\r\n\t * A value of 0 (zero) will prevent any portion of the the map to be panned\r\n\t * outside the viewport.\r\n\t *\r\n\t * 0.5 will allow half of the map to be outside viewable area.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value  Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * When user zooms in or out current zoom level is multiplied or divided\r\n\t * by value of this setting.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Zoom factor\r\n\t */\r\n\tpublic set zoomStep(value: number) {\r\n\t\tthis.setPropertyValue(\"zoomStep\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomStep(): number {\r\n\t\treturn this.getPropertyValue(\"zoomStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t *\r\n\t * Call this after changing projection or its settings.\r\n\t */\r\n\tpublic invalidateProjection() {\r\n\t\tthis.east = undefined;\r\n\t\tthis.invalidateDataUsers();\r\n\t\tthis.updateCenterGeoPoint();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthis.raiseCriticalError(Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\"), true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tlet series = event.newValue;\r\n\t\tseries.scale = this.scaleRatio;\r\n\t\tseries.events.on(\"validated\", this.updateCenterGeoPoint, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n \t * This function is used to sort element's JSON config properties, so that\r\n \t * some properties that absolutely need to be processed last, can be put at\r\n \t * the end.\r\n \t *\r\n \t * @ignore Exclude from docs\r\n \t * @param a  Element 1\r\n \t * @param b  Element 2\r\n \t * @return Sorting number\r\n \t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || field == \"geodata\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic get centerGeoPoint(): IGeoPoint {\r\n\t\treturn this._centerGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t *\r\n\t * Use the only parameter to set number of milliseconds for the zoom\r\n\t * animation to play.\r\n\t *\r\n\t * @param  duration  Duration (ms)\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t *\r\n\t * @ignore\r\n\t * @param   paper  Paper\r\n\t * @return         true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tif (this.svgContainer) {\r\n\t\t\tthis.svgContainer.hideOverflow = true;\r\n\t\t}\r\n\r\n\t\treturn super.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Background series will create polygons that will fill all the map area\r\n\t * with some color (or other fill).\r\n\t *\r\n\t * This might be useful with non-rectangular projections, like Orthographic,\r\n\t * Albers, etc.\r\n\t *\r\n\t * To change background color/opacity access polygon template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#fff\");\r\n\t * chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"backgroundSeries\": {\r\n\t *     \"mapPolygons\": {\r\n\t *       \"polygon\": {\r\n\t *         \"fill\": \"#fff\",\r\n\t *         \"fillOpacity\": 0.1\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic get backgroundSeries(): MapPolygonSeries {\r\n\t\tif (!this._backgroundSeries) {\r\n\t\t\tlet backgroundSeries = new MapPolygonSeries();\r\n\t\t\tbackgroundSeries.parent = this.seriesContainer;\r\n\t\t\tbackgroundSeries.chart = this;\r\n\r\n\t\t\tbackgroundSeries.hiddenInLegend = true;\r\n\t\t\tbackgroundSeries.addDisposer(new Disposer(() => {\r\n\t\t\t\tthis._backgroundSeries = undefined;\r\n\t\t\t}))\r\n\t\t\tthis._disposers.push(backgroundSeries);\r\n\r\n\t\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\t\tlet color = interfaceColors.getFor(\"background\");\r\n\r\n\t\t\tlet polygonTemplate = backgroundSeries.mapPolygons.template.polygon;\r\n\t\t\tpolygonTemplate.stroke = color;\r\n\t\t\tpolygonTemplate.fill = color;\r\n\t\t\tpolygonTemplate.fillOpacity = 0;\r\n\t\t\tpolygonTemplate.strokeOpacity = 0;\r\n\r\n\t\t\tbackgroundSeries.mapPolygons.create();\r\n\r\n\t\t\tthis._backgroundSeries = backgroundSeries;\r\n\t\t}\r\n\r\n\t\treturn this._backgroundSeries;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the legend instance for use in this chart.\r\n\t *\r\n\t * @param legend  Legend\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tlegend.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\t// setup other containers\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = true;\r\n\t\tthis.panSprite.interactions.isTouchProtected = true;\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = false;\r\n\t\tthis.panSprite.interactions.isTouchProtected = false;\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tthis.seriesContainer.interactions.isTouchProtected = true;\r\n\t\tthis.panSprite.interactions.isTouchProtected = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"zoomEasing\" || super.asIs(field);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createLine(){\r\n\t\tthis.line = new Polyarc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * `shortestDistance = true` is not supported by `MapArc`.\r\n\t *\r\n\t * Only [[MapLine]] supports it.\r\n\t *\r\n\t * @default false\r\n\t * @param value\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\t//plusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\t//minusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected fixLayout() {\r\n\r\n\t\tlet plusButton = this.plusButton;\r\n\t\tlet minusButton = this.minusButton;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tlet slider = this.slider;\r\n\r\n\t\tplusButton.x = undefined;\r\n\t\tplusButton.y = undefined;\r\n\r\n\t\tminusButton.x = undefined;\r\n\t\tminusButton.y = undefined;\r\n\r\n\t\tthumb.x = undefined;\r\n\t\tthumb.y = undefined;\r\n\r\n\t\tslider.x = undefined;\r\n\t\tslider.y = undefined;\r\n\r\n\t\tplusButton.padding(6, 10, 6, 10);\r\n\t\tminusButton.padding(6, 10, 6, 10);\r\n\r\n\t\tminusButton.label.align = \"center\";\r\n\t\tminusButton.label.valign = \"middle\";\r\n\r\n\t\tplusButton.label.align = \"center\";\r\n\t\tplusButton.label.valign = \"middle\";\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tminusButton.width = percent(100);\r\n\t\t\tminusButton.height = undefined;\r\n\r\n\t\t\tthumb.width = percent(100);\r\n\t\t\tthumb.height = undefined;\r\n\r\n\t\t\tplusButton.width = percent(100);\r\n\t\t\tplusButton.height = undefined;\r\n\r\n\t\t\tslider.width = percent(100);\r\n\t\t\tminusButton.marginTop = 1;\r\n\t\t\tplusButton.marginBottom = 2;\r\n\r\n\t\t\tslider.height = 0;\r\n\r\n\t\t\tminusButton.toFront();\r\n\t\t\tplusButton.toBack();\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.maxX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\r\n\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\r\n\t\t\tminusButton.height = percent(100);\r\n\t\t\tminusButton.width = undefined;\r\n\r\n\t\t\tplusButton.height = percent(100);\r\n\t\t\tplusButton.width = undefined;\r\n\r\n\t\t\tthumb.height = percent(100);\r\n\t\t\tthumb.width = undefined;\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\t\t\tthumb.maxY = 0;\r\n\r\n\t\t\tslider.height = percent(100);\r\n\t\t\tslider.width = 0;\r\n\r\n\t\t\tminusButton.toBack();\r\n\t\t\tplusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math.js\";\nimport rotation from \"../rotation.js\";\nimport projection from \"./index.js\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoMercator();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\r\n","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math.js\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n *\n * ```\n * Copyright 2017 Mike Bostock\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { registry } from \"../../../core/Registry\";\n// @ts-ignore\nimport * as d3geoprojection from \"d3-geo-projection\";\n\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.d3Projection = d3geoprojection.geoMiller();\n\t}\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n *\n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\n// @ts-ignore\r\nimport * as d3geoprojection from \"d3-geo-projection\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geoprojection.geoEckert6();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\r\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoOrthographic();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\r\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Stereographic extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoStereographic();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Stereographic\"] = Stereographic;\r\n","import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Albers extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAlbers();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Albers\"] = Albers;\r\n","import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class AlbersUsa extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAlbersUsa();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AlbersUsa\"] = AlbersUsa;\r\n","import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class NaturalEarth1 extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoNaturalEarth1();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NaturalEarth1\"] = NaturalEarth1;\r\n","import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class AzimuthalEqualArea extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoAzimuthalEqualArea();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AzimuthalEqualArea\"] = AzimuthalEqualArea;\r\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","/**\r\n * Functionality for Mercator projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n *\r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class EqualEarth extends Projection {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.d3Projection = d3geo.geoEqualEarth();\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"EqualEarth\"] = EqualEarth;\r\n","import clipRectangle from \"./rectangle.js\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import {default as polygonContains} from \"./polygonContains.js\";\nimport {default as distance} from \"./distance.js\";\nimport {epsilon2, radians} from \"./math.js\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ao, bo, ab;\n  for (var i = 0, n = coordinates.length; i < n; i++) {\n    bo = distance(coordinates[i], point);\n    if (bo === 0) return true;\n    if (i > 0) {\n      ab = distance(coordinates[i], coordinates[i - 1]);\n      if (\n        ab > 0 &&\n        ao <= ab &&\n        bo <= ab &&\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab\n      )\n        return true;\n    }\n    ao = bo;\n  }\n  return false;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {acos, sin} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {mercatorRaw} from \"./mercator.js\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {equirectangularRaw} from \"./equirectangular.js\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import clipRectangle from \"../clip/rectangle.js\";\nimport identity from \"../identity.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n}\n","import {atan, exp, halfPi, log, tan} from \"../math.js\";\nimport {mercatorProjection} from \"./mercator.js\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapLineObjectAdapters, IMapLineObjectEvents, IMapLineObjectProperties, MapLineObject } from \"./.internal/charts/map/MapLineObject\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { IGraticuleProperties, IGraticuleEvents, IGraticuleAdapters, Graticule } from \"./.internal/charts/map/Graticule\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { GraticuleSeriesDataItem, IGraticuleSeriesDataFields, IGraticuleSeriesProperties, IGraticuleSeriesEvents, IGraticuleSeriesAdapters, GraticuleSeries } from \"./.internal/charts/map/GraticuleSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo, multiGeoPolygonToMultipolygon, getBackground, multiGeoLineToMultiLine, multiGeoToPoint, getCircle } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\nimport * as d3geo from \"d3-geo\";\nexport { d3geo };\n\n\n"],"sourceRoot":""}