{"version":3,"file":"static/js/929.15527cf4.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/utils/Color.ts","../node_modules/src/.internal/core/utils/Colors.ts"],"sourcesContent":["/**\r\n * This module contains Color object definition\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { iRGB, iHSV, iHSL } from \"./Colors\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n\r\n// Re-export\r\nexport { iRGB, iHSV, iHSL };\r\n\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nexport class Color {\r\n\r\n\t/**\r\n\t * Light color (used when light contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _lightColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Dark color (used when dark contrasting color is required).\r\n\t *\r\n\t * @param {Color}\r\n\t * @ignore\r\n\t */\r\n\tprotected _darkColor: $type.Optional<Color>;\r\n\r\n\t/**\r\n\t * Holds RGB value of the color.\r\n\t */\r\n\tprotected _value: $type.Optional<iRGB>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param color Source color\r\n\t */\r\n\tconstructor(color: $type.Optional<iRGB>) {\r\n\t\tthis._value = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[iRGB]] representation of the color.\r\n\t *\r\n\t * @return RGB object\r\n\t */\r\n\tpublic get rgb(): $type.Optional<iRGB> {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns color hex value string, e.g. \"#FF0000\".\r\n\t *\r\n\t * @return Hex color code\r\n\t */\r\n\tpublic get hex(): string {\r\n\t\treturn this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `rgba()` representation of the color, e.g.:\r\n\t * `rgba(255, 0, 0, 0.5)`.\r\n\t *\r\n\t * @return rgba color string\r\n\t */\r\n\tpublic get rgba(): string {\r\n\t\treturn this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Set alpha (transparency) of the color.\r\n\t *\r\n\t * @param value Alpha (0-1)\r\n\t */\r\n\tpublic set alpha(value: number) {\r\n\t\tif (this._value) {\r\n\t\t\tthis._value.a = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current transparency.\r\n\t *\r\n\t * @return Alpha (0-1)\r\n\t */\r\n\tpublic get alpha(): number {\r\n\t\tif (this._value != null && this._value.a != null) {\r\n\t\t\treturn this._value.a;\r\n\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"light\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set lightColor(color: Color) {\r\n\t\tthis._lightColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current light color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get lightColor(): Color {\r\n\t\tif (!this._lightColor) {\r\n\t\t\tthis._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n\t\t}\r\n\t\treturn this._lightColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets \"dark\" color. Used when determining contrasting color.\r\n\t *\r\n\t * @param color Color\r\n\t */\r\n\tpublic set darkColor(color: Color) {\r\n\t\tthis._darkColor = color;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current dark color setting.\r\n\t *\r\n\t * @return Color\r\n\t */\r\n\tpublic get darkColor(): Color {\r\n\t\tif (!this._darkColor) {\r\n\t\t\tthis._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n\t\t}\r\n\t\treturn this._darkColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Overrides `toString` method so that [[Color]] object can be used as\r\n\t * string.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return String represantion of color (usable in CSS)\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn this.alpha < 1 ? this.rgba : this.hex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent lighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease lightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic lighten(percent: number): Color {\r\n\t\treturn new Color($colors.lighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] which is percent brighter (positive value),\r\n\t * or darker (negative value).\r\n\t *\r\n\t * Parameter is in the scale of -1 to 1.\r\n\t *\r\n\t * @param percent  Increase/decrease brightness by X\r\n\t * @return New Color\r\n\t */\r\n\tpublic brighten(percent: number): Color {\r\n\t\treturn new Color($colors.brighten(this.rgb, percent));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new [[Color]] based on current color with specific saturation\r\n\t * applied.\r\n\t *\r\n\t * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n\t * saturated).\r\n\t *\r\n\t * @param saturation  Saturation (0-1)\r\n\t * @return New (saturated) color\r\n\t */\r\n\tpublic saturate(saturation: number): Color {\r\n\t\treturn new Color($colors.saturate(this.rgb, saturation));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a either light or dark color that contrasts specifically with\r\n\t * this color.\r\n\t *\r\n\t * Uses properties `darkColor` (default black) and `lightColor` (default\r\n\t * white).\r\n\t *\r\n\t * Useful when determining which color label should be on a colored\r\n\t * background, so that it stands out.\r\n\t *\r\n\t * @return Contrasting color\r\n\t */\r\n\tpublic get alternative(): Color {\r\n\t\tif (this.rgb != null) {\r\n\t\t\treturn $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Color does not exist\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\r\nexport function color(value?: string | iRGB | Color, alpha?: number): Color {\r\n\r\n\tif (!$type.hasValue(value)) {\r\n\t\treturn new Color(undefined);\r\n\t}\r\n\r\n\tif (typeof value == \"string\") {\r\n\t\tlet cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n\t\tlet cached = registry.getCache(cacheId);\r\n\t\tif (cached) {\r\n\t\t\treturn new Color({\r\n\t\t\t\tr: cached.r,\r\n\t\t\t\tg: cached.g,\r\n\t\t\t\tb: cached.b,\r\n\t\t\t\ta: cached.a\r\n\t\t\t});\r\n\t\t}\r\n\t\tlet rgb = $colors.rgb(value, alpha);\r\n\t\tregistry.setCache(cacheId, rgb);\r\n\t\treturn new Color(rgb);\r\n\t}\r\n\r\n\t// Check if it's already a Color object\r\n\tif (value instanceof Color) {\r\n\t\tif ($type.hasValue(alpha)) {\r\n\t\t\tvalue.alpha = alpha;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Not a string or Color instance, it's the iRGB object then\r\n\treturn new Color(value);\r\n}\r\n\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\r\nexport function isColor(value: any): boolean {\r\n\treturn value instanceof Color;\r\n}\r\n\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\r\nexport function castColor(value: any): Color {\r\n\treturn color(value);\r\n}\r\n\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\r\nexport function toColor(value: any): Color {\r\n\tif ($type.hasValue(value) && !isColor(value)) {\r\n\t\treturn castColor(value);\r\n\t}\r\n\treturn value;\r\n}\r\n","/**\r\n * A collection of color-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\r\nlet namedColors = {\r\n\taliceblue: { r: 240, g: 248, b: 255 },\r\n\tantiquewhite: { r: 250, g: 235, b: 215 },\r\n\taqua: { r: 0, g: 255, b: 255 },\r\n\taquamarine: { r: 127, g: 255, b: 212 },\r\n\tazure: { r: 240, g: 255, b: 255 },\r\n\tbeige: { r: 245, g: 245, b: 220 },\r\n\tbisque: { r: 255, g: 228, b: 196 },\r\n\tblack: { r: 0, g: 0, b: 0 },\r\n\tblanchedalmond: { r: 255, g: 235, b: 205 },\r\n\tblue: { r: 0, g: 0, b: 255 },\r\n\tblueviolet: { r: 138, g: 43, b: 226 },\r\n\tbrown: { r: 165, g: 42, b: 42 },\r\n\tburlywood: { r: 222, g: 184, b: 135 },\r\n\tcadetblue: { r: 95, g: 158, b: 160 },\r\n\tchartreuse: { r: 127, g: 255, b: 0 },\r\n\tchocolate: { r: 210, g: 105, b: 30 },\r\n\tcoral: { r: 255, g: 127, b: 80 },\r\n\tcornflowerblue: { r: 100, g: 149, b: 237 },\r\n\tcornsilk: { r: 255, g: 248, b: 220 },\r\n\tcrimson: { r: 220, g: 20, b: 60 },\r\n\tcyan: { r: 0, g: 255, b: 255 },\r\n\tdarkblue: { r: 0, g: 0, b: 139 },\r\n\tdarkcyan: { r: 0, g: 139, b: 139 },\r\n\tdarkgoldenrod: { r: 184, g: 134, b: 11 },\r\n\tdarkgray: { r: 169, g: 169, b: 169 },\r\n\tdarkgrey: { r: 169, g: 169, b: 169 },\r\n\tdarkgreen: { r: 0, g: 100, b: 0 },\r\n\tdarkkhaki: { r: 189, g: 183, b: 107 },\r\n\tdarkmagenta: { r: 139, g: 0, b: 139 },\r\n\tdarkolivegreen: { r: 85, g: 107, b: 47 },\r\n\tdarkorange: { r: 255, g: 140, b: 0 },\r\n\tdarkorchid: { r: 153, g: 50, b: 204 },\r\n\tdarkred: { r: 139, g: 0, b: 0 },\r\n\tdarksalmon: { r: 233, g: 150, b: 122 },\r\n\tdarkseagreen: { r: 143, g: 188, b: 143 },\r\n\tdarkslateblue: { r: 72, g: 61, b: 139 },\r\n\tdarkslategray: { r: 47, g: 79, b: 79 },\r\n\tdarkslategrey: { r: 47, g: 79, b: 79 },\r\n\tdarkturquoise: { r: 0, g: 206, b: 209 },\r\n\tdarkviolet: { r: 148, g: 0, b: 211 },\r\n\tdeeppink: { r: 255, g: 20, b: 147 },\r\n\tdeepskyblue: { r: 0, g: 191, b: 255 },\r\n\tdimgray: { r: 105, g: 105, b: 105 },\r\n\tdimgrey: { r: 105, g: 105, b: 105 },\r\n\tdodgerblue: { r: 30, g: 144, b: 255 },\r\n\tfirebrick: { r: 178, g: 34, b: 34 },\r\n\tfloralwhite: { r: 255, g: 250, b: 240 },\r\n\tforestgreen: { r: 34, g: 139, b: 34 },\r\n\tfuchsia: { r: 255, g: 0, b: 255 },\r\n\tgainsboro: { r: 220, g: 220, b: 220 },\r\n\tghostwhite: { r: 248, g: 248, b: 255 },\r\n\tgold: { r: 255, g: 215, b: 0 },\r\n\tgoldenrod: { r: 218, g: 165, b: 32 },\r\n\tgray: { r: 128, g: 128, b: 128 },\r\n\tgrey: { r: 128, g: 128, b: 128 },\r\n\tgreen: { r: 0, g: 128, b: 0 },\r\n\tgreenyellow: { r: 173, g: 255, b: 47 },\r\n\thoneydew: { r: 240, g: 255, b: 240 },\r\n\thotpink: { r: 255, g: 105, b: 180 },\r\n\tindianred: { r: 205, g: 92, b: 92 },\r\n\tindigo: { r: 75, g: 0, b: 130 },\r\n\tivory: { r: 255, g: 255, b: 240 },\r\n\tkhaki: { r: 240, g: 230, b: 140 },\r\n\tlavender: { r: 230, g: 230, b: 250 },\r\n\tlavenderblush: { r: 255, g: 240, b: 245 },\r\n\tlawngreen: { r: 124, g: 252, b: 0 },\r\n\tlemonchiffon: { r: 255, g: 250, b: 205 },\r\n\tlightblue: { r: 173, g: 216, b: 230 },\r\n\tlightcoral: { r: 240, g: 128, b: 128 },\r\n\tlightcyan: { r: 224, g: 255, b: 255 },\r\n\tlightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n\tlightgray: { r: 211, g: 211, b: 211 },\r\n\tlightgrey: { r: 211, g: 211, b: 211 },\r\n\tlightgreen: { r: 144, g: 238, b: 144 },\r\n\tlightpink: { r: 255, g: 182, b: 193 },\r\n\tlightsalmon: { r: 255, g: 160, b: 122 },\r\n\tlightseagreen: { r: 32, g: 178, b: 170 },\r\n\tlightskyblue: { r: 135, g: 206, b: 250 },\r\n\tlightslategray: { r: 119, g: 136, b: 153 },\r\n\tlightslategrey: { r: 119, g: 136, b: 153 },\r\n\tlightsteelblue: { r: 176, g: 196, b: 222 },\r\n\tlightyellow: { r: 255, g: 255, b: 224 },\r\n\tlime: { r: 0, g: 255, b: 0 },\r\n\tlimegreen: { r: 50, g: 205, b: 50 },\r\n\tlinen: { r: 250, g: 240, b: 230 },\r\n\tmagenta: { r: 255, g: 0, b: 255 },\r\n\tmaroon: { r: 128, g: 0, b: 0 },\r\n\tmediumaquamarine: { r: 102, g: 205, b: 170 },\r\n\tmediumblue: { r: 0, g: 0, b: 205 },\r\n\tmediumorchid: { r: 186, g: 85, b: 211 },\r\n\tmediumpurple: { r: 147, g: 112, b: 219 },\r\n\tmediumseagreen: { r: 60, g: 179, b: 113 },\r\n\tmediumslateblue: { r: 123, g: 104, b: 238 },\r\n\tmediumspringgreen: { r: 0, g: 250, b: 154 },\r\n\tmediumturquoise: { r: 72, g: 209, b: 204 },\r\n\tmediumvioletred: { r: 199, g: 21, b: 133 },\r\n\tmidnightblue: { r: 25, g: 25, b: 112 },\r\n\tmintcream: { r: 245, g: 255, b: 250 },\r\n\tmistyrose: { r: 255, g: 228, b: 225 },\r\n\tmoccasin: { r: 255, g: 228, b: 181 },\r\n\tnavajowhite: { r: 255, g: 222, b: 173 },\r\n\tnavy: { r: 0, g: 0, b: 128 },\r\n\toldlace: { r: 253, g: 245, b: 230 },\r\n\tolive: { r: 128, g: 128, b: 0 },\r\n\tolivedrab: { r: 107, g: 142, b: 35 },\r\n\torange: { r: 255, g: 165, b: 0 },\r\n\torangered: { r: 255, g: 69, b: 0 },\r\n\torchid: { r: 218, g: 112, b: 214 },\r\n\tpalegoldenrod: { r: 238, g: 232, b: 170 },\r\n\tpalegreen: { r: 152, g: 251, b: 152 },\r\n\tpaleturquoise: { r: 175, g: 238, b: 238 },\r\n\tpalevioletred: { r: 219, g: 112, b: 147 },\r\n\tpapayawhip: { r: 255, g: 239, b: 213 },\r\n\tpeachpuff: { r: 255, g: 218, b: 185 },\r\n\tperu: { r: 205, g: 133, b: 63 },\r\n\tpink: { r: 255, g: 192, b: 203 },\r\n\tplum: { r: 221, g: 160, b: 221 },\r\n\tpowderblue: { r: 176, g: 224, b: 230 },\r\n\tpurple: { r: 128, g: 0, b: 128 },\r\n\trebeccapurple: { r: 102, g: 51, b: 153 },\r\n\tred: { r: 255, g: 0, b: 0 },\r\n\trosybrown: { r: 188, g: 143, b: 143 },\r\n\troyalblue: { r: 65, g: 105, b: 225 },\r\n\tsaddlebrown: { r: 139, g: 69, b: 19 },\r\n\tsalmon: { r: 250, g: 128, b: 114 },\r\n\tsandybrown: { r: 244, g: 164, b: 96 },\r\n\tseagreen: { r: 46, g: 139, b: 87 },\r\n\tseashell: { r: 255, g: 245, b: 238 },\r\n\tsienna: { r: 160, g: 82, b: 45 },\r\n\tsilver: { r: 192, g: 192, b: 192 },\r\n\tskyblue: { r: 135, g: 206, b: 235 },\r\n\tslateblue: { r: 106, g: 90, b: 205 },\r\n\tslategray: { r: 112, g: 128, b: 144 },\r\n\tslategrey: { r: 112, g: 128, b: 144 },\r\n\tsnow: { r: 255, g: 250, b: 250 },\r\n\tspringgreen: { r: 0, g: 255, b: 127 },\r\n\tsteelblue: { r: 70, g: 130, b: 180 },\r\n\ttan: { r: 210, g: 180, b: 140 },\r\n\tteal: { r: 0, g: 128, b: 128 },\r\n\tthistle: { r: 216, g: 191, b: 216 },\r\n\ttomato: { r: 255, g: 99, b: 71 },\r\n\tturquoise: { r: 64, g: 224, b: 208 },\r\n\tviolet: { r: 238, g: 130, b: 238 },\r\n\twheat: { r: 245, g: 222, b: 179 },\r\n\twhite: { r: 255, g: 255, b: 255 },\r\n\twhitesmoke: { r: 245, g: 245, b: 245 },\r\n\tyellow: { r: 255, g: 255, b: 0 },\r\n\tyellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n\r\n\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n\treturn (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\r\nexport function rgb(color: string, alpha?: number): iRGB {\r\n\r\n\t// Init return value\r\n\tlet rgb: $type.Optional<iRGB>;\r\n\r\n\t// Try resolving color format\r\n\r\n\t// Named color?\r\n\tif ((<any>namedColors)[color]) {\r\n\t\trgb = (<any>namedColors)[color];\r\n\t}\r\n\r\n\t// Hex code?\r\n\telse if (color.charAt(0) === \"#\") {\r\n\t\trgb = hexToRgb(color);\r\n\t}\r\n\r\n\t// rgb() format?\r\n\telse if (color.match(/^rgba?\\(/)) {\r\n\t\trgb = rgbaToRgb(color);\r\n\t}\r\n\r\n\t// Was not able to resolve?\r\n\tif (!rgb) {\r\n\t\trgb = { r: 0, g: 0, b: 0, a: 1 };\r\n\t}\r\n\r\n\t// Set alpha\r\n\tif ($type.hasValue(alpha)) {\r\n\t\trgb.a = alpha;\r\n\t}\r\n\r\n\treturn rgb;\r\n}\r\n\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgb(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n\t\treturn r + r + g + g + b + b;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16)\r\n\t} : hexToRgbWithAlpha(hex);\r\n}\r\n\r\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgbWithAlpha(hex: string): $type.Optional<iRGB> {\r\n\t// Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\r\n\tlet shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n\thex = hex.replace(shorthandRegex, function(m, r, g, b, a) {\r\n\t\treturn r + r + g + g + b + b + a + a;\r\n\t});\r\n\r\n\tlet result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\treturn result ? {\r\n\t\tr: parseInt(result[1], 16),\r\n\t\tg: parseInt(result[2], 16),\r\n\t\tb: parseInt(result[3], 16),\r\n\t\ta: parseInt(result[4], 16) / 256\r\n\t} : undefined;\r\n}\r\n\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\r\nexport function rgbaToRgb(color: string): $type.Optional<iRGB> {\r\n\tcolor = color.replace(/[ ]/g, \"\");\r\n\r\n\t// Init\r\n\tlet matches: string[] | null = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\r\n\r\n\t// Try rgb() format\r\n\tif (matches) {\r\n\t\tmatches.push(\"1\");\r\n\r\n\t} else {\r\n\t\tmatches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\r\n\r\n\t\tif (!matches) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: parseInt(matches[1]),\r\n\t\tg: parseInt(matches[2]),\r\n\t\tb: parseInt(matches[3]),\r\n\t\ta: parseFloat(matches[4])\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\r\nexport function rgbToHex(rgb: iRGB): string {\r\n\treturn \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb: iRGB): string {\r\n\tif ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n\t\treturn \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n\t}\r\n\telse {\r\n\t\treturn \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\r\nexport function pad2(c: string): string {\r\n\treturn c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\r\nexport function interpolate(rgb1: $type.Optional<iRGB>, rgb2: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tpercent = $math.fitToRange(percent, 0, 1);\r\n\r\n\tif (rgb1) {\r\n\t\tif (rgb2) {\r\n\t\t\treturn {\r\n\t\t\t\tr: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n\t\t\t\tg: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n\t\t\t\tb: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n\t\t\t\ta: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\t\t\treturn rgb1;\r\n\t\t}\r\n\r\n\t} else if (rgb2) {\r\n\t\treturn rgb2;\r\n\r\n\t} else {\r\n\t\treturn rgb1;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\r\nexport function lighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n\t\t\tg: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n\t\t\tb: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getLightnessStep(value: number, percent: number): number {\r\n\tlet base = percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\r\nexport function brighten(rgb: $type.Optional<iRGB>, percent: number): $type.Optional<iRGB> {\r\n\tif (rgb) {\r\n\t\tlet base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n\t\t//let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n\t\tlet step = getLightnessStep(base, percent);\r\n\t\treturn {\r\n\t\t\tr: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n\t\t\tg: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n\t\t\tb: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n\t\t\ta: rgb.a\r\n\t\t};\r\n\r\n\t} else {\r\n\t\t// TODO is this correct ?\r\n\t\treturn rgb;\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getBrightnessStep(value: number, percent: number): number {\r\n\tlet base = 255; //percent > 0 ? 255 - value : value;\r\n\treturn Math.round(base * percent);\r\n}\r\n\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\r\nexport function saturate(rgb: $type.Optional<iRGB>, saturation: number): $type.Optional<iRGB> {\r\n\tif (rgb == null || saturation == 1) {\r\n\t\treturn rgb;\r\n\t}\r\n\r\n\tlet hsl = rgbToHsl(rgb);\r\n\thsl.s = saturation;\r\n\treturn hslToRgb(hsl);\r\n}\r\n\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n\tlet r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n\tlet g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n\tlet b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n\tlet a = $type.toText(rgb.a || 1);\r\n\treturn\t      r + \" 0 0 0 0\" +\r\n\t\t\t\t\t\" 0 \" + g + \" 0 0 0\" +\r\n\t\t\t\t\t\" 0 0 \" + b + \" 0 0\" +\r\n\t\t\t\t\t\" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\r\nexport function hslToRgb(color: iHSL): iRGB {\r\n\tlet r, g, b;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet l = color.l;\r\n\r\n\tif (s == 0) {\r\n\t\tr = g = b = l; // achromatic\r\n\t} else {\r\n\t\tlet hue2rgb = function hue2rgb(p: number, q: number, t: number) {\r\n\t\t\tif (t < 0) { t += 1; }\r\n\t\t\tif (t > 1) { t -= 1; }\r\n\t\t\tif (t < 1 / 6) { return p + (q - p) * 6 * t; }\r\n\t\t\tif (t < 1 / 2) { return q; }\r\n\t\t\tif (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }\r\n\t\t\treturn p;\r\n\t\t}\r\n\r\n\t\tlet q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\t\tlet p = 2 * l - q;\r\n\t\tr = hue2rgb(p, q, h + 1 / 3);\r\n\t\tg = hue2rgb(p, q, h);\r\n\t\tb = hue2rgb(p, q, h - 1 / 3);\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\r\nexport function rgbToHsl(color: iRGB): iHSL {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b);\r\n\tlet min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet l = (max + min) / 2;\r\n\r\n\tif (max === min) {\r\n\t\th = s = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tlet d = max - min;\r\n\r\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tl: l\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color: iRGB): iHSV {\r\n\tlet r = color.r / 255;\r\n\tlet g = color.g / 255;\r\n\tlet b = color.b / 255;\r\n\tlet max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\tlet h = 0;\r\n\tlet s = 0;\r\n\tlet v = max;\r\n\r\n\tlet d = max - min;\r\n\ts = max == 0 ? 0 : d / max;\r\n\r\n\tif (max == min) {\r\n\t\th = 0; // achromatic\r\n\r\n\t} else {\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn {\r\n\t\th: h,\r\n\t\ts: s,\r\n\t\tv: v\r\n\t};\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color: iHSV): iRGB {\r\n\tlet r = 0;\r\n\tlet g = 0;\r\n\tlet b = 0;\r\n\tlet h = color.h;\r\n\tlet s = color.s;\r\n\tlet v = color.v;\r\n\r\n\tlet i = Math.floor(h * 6);\r\n\tlet f = h * 6 - i;\r\n\tlet p = v * (1 - s);\r\n\tlet q = v * (1 - f * s);\r\n\tlet t = v * (1 - (1 - f) * s);\r\n\r\n\tswitch (i % 6) {\r\n\t\tcase 0:\r\n\t\t\tr = v;\r\n\t\t\tg = t;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tr = q;\r\n\t\t\tg = v;\r\n\t\t\tb = p;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tr = p;\r\n\t\t\tg = v;\r\n\t\t\tb = t;\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tr = p;\r\n\t\t\tg = q;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 4:\r\n\t\t\tr = t;\r\n\t\t\tg = p;\r\n\t\t\tb = v;\r\n\t\t\tbreak;\r\n\t\tcase 5:\r\n\t\t\tr = v;\r\n\t\t\tg = p;\r\n\t\t\tb = q;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn {\r\n\t\tr: Math.round(r * 255),\r\n\t\tg: Math.round(g * 255),\r\n\t\tb: Math.round(b * 255)\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\r\nexport function isLight(color: iRGB): boolean {\r\n\treturn ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * COLOR CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an interface for an object that represents an RGB color.\r\n */\r\nexport interface iRGB {\r\n\tr: number;\r\n\tg: number;\r\n\tb: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSL color.\r\n */\r\nexport interface iHSL {\r\n\th: number;\r\n\ts: number;\r\n\tl: number;\r\n\ta?: number;\r\n}\r\n\r\n/**\r\n * Represents an interface for an object that represents an HSV color.\r\n */\r\nexport interface iHSV {\r\n\th: number;\r\n\ts: number;\r\n\tv: number;\r\n\ta?: number;\r\n}\r\n"],"names":["color","this","_value","Object","Color","$colors","a","value","_lightColor","r","g","b","_darkColor","alpha","rgba","hex","percent","rgb","saturation","darkColor","lightColor","Error","$type","undefined","cacheId","cached","registry","isColor","castColor","toColor","namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","charAt","hexToRgb","match","rgbaToRgb","replace","m","result","exec","parseInt","hexToRgbWithAlpha","matches","push","parseFloat","rgbToHex","pad2","toString","rgbToRGBA","c","length","interpolate","rgb1","rgb2","$math","Math","round","lighten","max","min","getLightnessStep","base","brighten","step","getBrightnessStep","saturate","hsl","rgbToHsl","s","hslToRgb","h","l","hue2rgb","p","q","t","d","rgbToHsv","v","hsvToRgb","i","floor","f","isLight"],"sourceRoot":""}